var dataJson = {"arch":{"ispc":true,"isunix":false,"ismac":false},"build":"LabB_TuneTheGyro","ref":false,"files":[{"name":"ert_main.c","type":"source","group":"main","path":"C:\\Users\\Jasminis\\OneDrive\\R7003E\\Viktor\\LAB_B\\LabB_TuneTheGyro_ert_rtw","tag":"","groupDisplay":"Main file","code":"/*\r\n * Academic License - for use in teaching, academic research, and meeting\r\n * course requirements at degree granting institutions only.  Not for\r\n * government, commercial, or other organizational use.\r\n *\r\n * File: ert_main.c\r\n *\r\n * Code generated for Simulink model 'LabB_TuneTheGyro'.\r\n *\r\n * Model version                  : 7.0\r\n * Simulink Coder version         : 9.9 (R2023a) 19-Nov-2022\r\n * C/C++ source code generated on : Fri Dec  1 22:12:55 2023\r\n *\r\n * Target selection: ert.tlc\r\n * Embedded hardware selection: Atmel->AVR\r\n * Code generation objectives: Unspecified\r\n * Validation result: Not run\r\n */\r\n\r\n#include \"LabB_TuneTheGyro.h\"\r\n#include \"rtwtypes.h\"\r\n#include \"xcp.h\"\r\n#include \"ext_mode.h\"\r\n#include \"MW_target_hardware_resources.h\"\r\n\r\nvolatile int IsrOverrun = 0;\r\nstatic boolean_T OverrunFlag = 0;\r\nvoid rt_OneStep(void)\r\n{\r\n  /* Check for overrun. Protect OverrunFlag against preemption */\r\n  if (OverrunFlag++) {\r\n    IsrOverrun = 1;\r\n    OverrunFlag--;\r\n    return;\r\n  }\r\n\r\n#ifndef _MW_ARDUINO_LOOP_\r\n\r\n  sei();\r\n\r\n#endif;\r\n\r\n  LabB_TuneTheGyro_step();\r\n\r\n  /* Get model outputs here */\r\n#ifndef _MW_ARDUINO_LOOP_\r\n\r\n  cli();\r\n\r\n#endif;\r\n\r\n  OverrunFlag--;\r\n}\r\n\r\nextern void rtIOStreamResync();\r\nvolatile boolean_T stopRequested;\r\nvolatile boolean_T runModel;\r\nint main(void)\r\n{\r\n  float modelBaseRate = 0.01;\r\n  float systemClock = 0;\r\n  extmodeErrorCode_T errorCode = EXTMODE_SUCCESS;\r\n\r\n  /* Initialize variables */\r\n  stopRequested = false;\r\n  runModel = false;\r\n  init();\r\n  MW_Arduino_Init();\r\n  rtmSetErrorStatus(LabB_TuneTheGyro_M, 0);\r\n\r\n  /* Set Final Simulation Time in Ticks */\r\n  errorCode = extmodeSetFinalSimulationTime((extmodeSimulationTime_T) -1);\r\n\r\n  /* Parse External Mode command line arguments */\r\n  errorCode = extmodeParseArgs(0, NULL);\r\n  if (errorCode != EXTMODE_SUCCESS) {\r\n    return (errorCode);\r\n  }\r\n\r\n  LabB_TuneTheGyro_initialize();\r\n  cli();\r\n  sei();\r\n\r\n  /* External Mode initialization */\r\n  errorCode = extmodeInit(LabB_TuneTheGyro_M->extModeInfo, &rtmGetTFinal\r\n    (LabB_TuneTheGyro_M));\r\n  if (errorCode != EXTMODE_SUCCESS) {\r\n    /* Code to handle External Mode initialization errors\r\n       may be added here */\r\n  }\r\n\r\n  if (errorCode == EXTMODE_SUCCESS) {\r\n    /* Wait until a Start or Stop Request has been received from the Host */\r\n    extmodeWaitForHostRequest(EXTMODE_WAIT_FOREVER);\r\n    if (extmodeStopRequested()) {\r\n      rtmSetStopRequested(LabB_TuneTheGyro_M, true);\r\n    }\r\n  }\r\n\r\n  cli();\r\n  configureArduinoAVRTimer();\r\n  runModel = !extmodeSimulationComplete() && !extmodeStopRequested() &&\r\n    !rtmGetStopRequested(LabB_TuneTheGyro_M);\r\n\r\n#ifndef _MW_ARDUINO_LOOP_\r\n\r\n  sei();\r\n\r\n#endif;\r\n\r\n  XcpStatus lastXcpState = xcpStatusGet();\r\n  sei();\r\n  while (runModel) {\r\n    /* Run External Mode background activities */\r\n    errorCode = extmodeBackgroundRun();\r\n    if (errorCode != EXTMODE_SUCCESS) {\r\n      /* Code to handle External Mode background task errors\r\n         may be added here */\r\n    }\r\n\r\n    stopRequested = !(!extmodeSimulationComplete() && !extmodeStopRequested() &&\r\n                      !rtmGetStopRequested(LabB_TuneTheGyro_M));\r\n    runModel = !(stopRequested);\r\n    if (stopRequested)\r\n      disable_rt_OneStep();\r\n    if (lastXcpState==XCP_CONNECTED && xcpStatusGet()==XCP_DISCONNECTED)\r\n      rtIOStreamResync();\r\n    lastXcpState = xcpStatusGet();\r\n    MW_Arduino_Loop();\r\n  }\r\n\r\n  /* Terminate model */\r\n  LabB_TuneTheGyro_terminate();\r\n\r\n  /* External Mode reset */\r\n  extmodeReset();\r\n  cli();\r\n  return 0;\r\n}\r\n\r\n/*\r\n * File trailer for generated code.\r\n *\r\n * [EOF]\r\n */\r\n"},{"name":"LabB_TuneTheGyro.c","type":"source","group":"model","path":"C:\\Users\\Jasminis\\OneDrive\\R7003E\\Viktor\\LAB_B\\LabB_TuneTheGyro_ert_rtw","tag":"","groupDisplay":"Model files","code":"/*\r\n * Academic License - for use in teaching, academic research, and meeting\r\n * course requirements at degree granting institutions only.  Not for\r\n * government, commercial, or other organizational use.\r\n *\r\n * File: LabB_TuneTheGyro.c\r\n *\r\n * Code generated for Simulink model 'LabB_TuneTheGyro'.\r\n *\r\n * Model version                  : 7.0\r\n * Simulink Coder version         : 9.9 (R2023a) 19-Nov-2022\r\n * C/C++ source code generated on : Fri Dec  1 22:12:55 2023\r\n *\r\n * Target selection: ert.tlc\r\n * Embedded hardware selection: Atmel->AVR\r\n * Code generation objectives: Unspecified\r\n * Validation result: Not run\r\n */\r\n\r\n#include \"LabB_TuneTheGyro.h\"\r\n#include \"rtwtypes.h\"\r\n#include \"LabB_TuneTheGyro_private.h\"\r\n#include <string.h>\r\n\r\n/* Block signals (default storage) */\r\nBlockIO_LabB_TuneTheGyro LabB_TuneTheGyro_B;\r\n\r\n/* Block states (default storage) */\r\nD_Work_LabB_TuneTheGyro LabB_TuneTheGyro_DWork;\r\n\r\n/* Real-time model */\r\nstatic RT_MODEL_LabB_TuneTheGyro LabB_TuneTheGyro_M_;\r\nRT_MODEL_LabB_TuneTheGyro *const LabB_TuneTheGyro_M = &LabB_TuneTheGyro_M_;\r\n\r\n/* Model step function */\r\nvoid LabB_TuneTheGyro_step(void)\r\n{\r\n  int16_T out[3];\r\n\r\n  /* Reset subsysRan breadcrumbs */\r\n  srClearBC(LabB_TuneTheGyro_DWork.measurementfilter_SubsysRanBC);\r\n\r\n  /* MATLABSystem: '<Root>/Gyroscope' */\r\n  /*  initialize output to a single (float) with the value zero */\r\n  /* 'soMPU6050Gyro:59' out = int16(zeros(3,1)); */\r\n  /* 'soMPU6050Gyro:60' if coder.target('Rtw') */\r\n  /*  done only for code gen */\r\n  /* 'soMPU6050Gyro:61' coder.cinclude('MPU6050wrapper.h'); */\r\n  /*  get the current value of the sensor */\r\n  /* 'soMPU6050Gyro:63' coder.ceval('MPU6050Gyro_Read', coder.wref(out)); */\r\n  MPU6050Gyro_Read(&out[0]);\r\n\r\n  /* DataTypeConversion: '<Root>/Data Type  Conversion1' incorporates:\r\n   *  MATLABSystem: '<Root>/Gyroscope'\r\n   */\r\n  /*  pull the data appart */\r\n  /* 'soMPU6050Gyro:68' xvel = out(1); */\r\n  /* 'soMPU6050Gyro:69' yvel = out(2); */\r\n  /* 'soMPU6050Gyro:70' zvel = out(3); */\r\n  LabB_TuneTheGyro_B.DataTypeConversion1 = out[0];\r\n\r\n  /* Outputs for Enabled SubSystem: '<Root>/measurement filter' incorporates:\r\n   *  EnablePort: '<S2>/enable the code below only when the external boolean input is true '\r\n   */\r\n  /* RelationalOperator: '<S1>/Compare' incorporates:\r\n   *  Clock: '<Root>/Clock'\r\n   *  Constant: '<S1>/Constant'\r\n   */\r\n  if (LabB_TuneTheGyro_M->Timing.t[0] >\r\n      LabB_TuneTheGyro_P.calibratethegyrobeforeXsecondss) {\r\n    srUpdateBC(LabB_TuneTheGyro_DWork.measurementfilter_SubsysRanBC);\r\n  }\r\n\r\n  /* End of RelationalOperator: '<S1>/Compare' */\r\n  /* End of Outputs for SubSystem: '<Root>/measurement filter' */\r\n  {                                    /* Sample time: [0.0s, 0.0s] */\r\n    extmodeErrorCode_T errorCode = EXTMODE_SUCCESS;\r\n    extmodeSimulationTime_T currentTime = (extmodeSimulationTime_T)\r\n      ((LabB_TuneTheGyro_M->Timing.clockTick0 * 1) + 0)\r\n      ;\r\n\r\n    /* Trigger External Mode event */\r\n    errorCode = extmodeEvent(0,currentTime);\r\n    if (errorCode != EXTMODE_SUCCESS) {\r\n      /* Code to handle External Mode event errors\r\n         may be added here */\r\n    }\r\n  }\r\n\r\n  {                                    /* Sample time: [0.01s, 0.0s] */\r\n    extmodeErrorCode_T errorCode = EXTMODE_SUCCESS;\r\n    extmodeSimulationTime_T currentTime = (extmodeSimulationTime_T)\r\n      ((LabB_TuneTheGyro_M->Timing.clockTick1 * 1) + 0)\r\n      ;\r\n\r\n    /* Trigger External Mode event */\r\n    errorCode = extmodeEvent(1,currentTime);\r\n    if (errorCode != EXTMODE_SUCCESS) {\r\n      /* Code to handle External Mode event errors\r\n         may be added here */\r\n    }\r\n  }\r\n\r\n  /* Update absolute time for base rate */\r\n  /* The \"clockTick0\" counts the number of times the code of this task has\r\n   * been executed. The absolute time is the multiplication of \"clockTick0\"\r\n   * and \"Timing.stepSize0\". Size of \"clockTick0\" ensures timer will not\r\n   * overflow during the application lifespan selected.\r\n   */\r\n  LabB_TuneTheGyro_M->Timing.t[0] =\r\n    ((time_T)(++LabB_TuneTheGyro_M->Timing.clockTick0)) *\r\n    LabB_TuneTheGyro_M->Timing.stepSize0;\r\n\r\n  {\r\n    /* Update absolute timer for sample time: [0.01s, 0.0s] */\r\n    /* The \"clockTick1\" counts the number of times the code of this task has\r\n     * been executed. The resolution of this integer timer is 0.01, which is the step size\r\n     * of the task. Size of \"clockTick1\" ensures timer will not overflow during the\r\n     * application lifespan selected.\r\n     */\r\n    LabB_TuneTheGyro_M->Timing.clockTick1++;\r\n  }\r\n}\r\n\r\n/* Model initialize function */\r\nvoid LabB_TuneTheGyro_initialize(void)\r\n{\r\n  /* Registration code */\r\n\r\n  /* initialize real-time model */\r\n  (void) memset((void *)LabB_TuneTheGyro_M, 0,\r\n                sizeof(RT_MODEL_LabB_TuneTheGyro));\r\n\r\n  {\r\n    /* Setup solver object */\r\n    rtsiSetSimTimeStepPtr(&LabB_TuneTheGyro_M->solverInfo,\r\n                          &LabB_TuneTheGyro_M->Timing.simTimeStep);\r\n    rtsiSetTPtr(&LabB_TuneTheGyro_M->solverInfo, &rtmGetTPtr(LabB_TuneTheGyro_M));\r\n    rtsiSetStepSizePtr(&LabB_TuneTheGyro_M->solverInfo,\r\n                       &LabB_TuneTheGyro_M->Timing.stepSize0);\r\n    rtsiSetErrorStatusPtr(&LabB_TuneTheGyro_M->solverInfo, (&rtmGetErrorStatus\r\n      (LabB_TuneTheGyro_M)));\r\n    rtsiSetRTModelPtr(&LabB_TuneTheGyro_M->solverInfo, LabB_TuneTheGyro_M);\r\n  }\r\n\r\n  rtsiSetSimTimeStep(&LabB_TuneTheGyro_M->solverInfo, MAJOR_TIME_STEP);\r\n  rtsiSetSolverName(&LabB_TuneTheGyro_M->solverInfo,\"FixedStepDiscrete\");\r\n  rtmSetTPtr(LabB_TuneTheGyro_M, &LabB_TuneTheGyro_M->Timing.tArray[0]);\r\n  rtmSetTFinal(LabB_TuneTheGyro_M, -1);\r\n  LabB_TuneTheGyro_M->Timing.stepSize0 = 0.01;\r\n\r\n  /* External mode info */\r\n  LabB_TuneTheGyro_M->Sizes.checksums[0] = (2599044792U);\r\n  LabB_TuneTheGyro_M->Sizes.checksums[1] = (2425558813U);\r\n  LabB_TuneTheGyro_M->Sizes.checksums[2] = (3143824661U);\r\n  LabB_TuneTheGyro_M->Sizes.checksums[3] = (3621963654U);\r\n\r\n  {\r\n    static const sysRanDType rtAlwaysEnabled = SUBSYS_RAN_BC_ENABLE;\r\n    static RTWExtModeInfo rt_ExtModeInfo;\r\n    static const sysRanDType *systemRan[3];\r\n    LabB_TuneTheGyro_M->extModeInfo = (&rt_ExtModeInfo);\r\n    rteiSetSubSystemActiveVectorAddresses(&rt_ExtModeInfo, systemRan);\r\n    systemRan[0] = &rtAlwaysEnabled;\r\n    systemRan[1] = &rtAlwaysEnabled;\r\n    systemRan[2] = (sysRanDType *)\r\n      &LabB_TuneTheGyro_DWork.measurementfilter_SubsysRanBC;\r\n    rteiSetModelMappingInfoPtr(LabB_TuneTheGyro_M->extModeInfo,\r\n      &LabB_TuneTheGyro_M->SpecialInfo.mappingInfo);\r\n    rteiSetChecksumsPtr(LabB_TuneTheGyro_M->extModeInfo,\r\n                        LabB_TuneTheGyro_M->Sizes.checksums);\r\n    rteiSetTPtr(LabB_TuneTheGyro_M->extModeInfo, rtmGetTPtr(LabB_TuneTheGyro_M));\r\n  }\r\n\r\n  /* block I/O */\r\n  (void) memset(((void *) &LabB_TuneTheGyro_B), 0,\r\n                sizeof(BlockIO_LabB_TuneTheGyro));\r\n\r\n  /* states (dwork) */\r\n  (void) memset((void *)&LabB_TuneTheGyro_DWork, 0,\r\n                sizeof(D_Work_LabB_TuneTheGyro));\r\n\r\n  /* Start for MATLABSystem: '<Root>/Gyroscope' */\r\n  /*  Constructor */\r\n  /* 'soMPU6050Gyro:27' coder.allowpcode('plain'); */\r\n  /* 'soMPU6050Gyro:1' matlab.System */\r\n  /* 'soMPU6050Gyro:1' coder.ExternalDependency */\r\n  /*  Support name-value pair arguments when constructing the object. */\r\n  /* 'soMPU6050Gyro:30' setProperties(obj,nargin,varargin{:}); */\r\n  LabB_TuneTheGyro_DWork.obj.matlabCodegenIsDeleted = false;\r\n\r\n  /* 'soMPU6050Gyro:34' coder.extrinsic('sprintf') */\r\n  /*  Do not generate code for sprintf */\r\n  /* 'soMPU6050Gyro:35' validateattributes(value,... */\r\n  /* 'soMPU6050Gyro:36'                 {'numeric'},... */\r\n  /* 'soMPU6050Gyro:37'                 {'real','nonnegative','integer','scalar'},... */\r\n  /* 'soMPU6050Gyro:38'                 '', ... */\r\n  /* 'soMPU6050Gyro:39'                 'DLPFmode'); */\r\n  /* 'soMPU6050Gyro:40' obj.DLPFmode = value; */\r\n  LabB_TuneTheGyro_DWork.obj.isInitialized = 1L;\r\n\r\n  /* 'soMPU6050Gyro:46' if coder.target('Rtw') */\r\n  /*  done only for code gen */\r\n  /* 'soMPU6050Gyro:47' coder.cinclude('MPU6050wrapper.h'); */\r\n  /*  initialize the sensor */\r\n  /*                  coder.ceval('MPU6050Accel_Init'); */\r\n  /* 'soMPU6050Gyro:51' coder.ceval('MPU6050Gyro_Init', obj.DLPFmode); */\r\n  MPU6050Gyro_Init(0.0);\r\n  LabB_TuneTheGyro_DWork.obj.isSetupComplete = true;\r\n}\r\n\r\n/* Model terminate function */\r\nvoid LabB_TuneTheGyro_terminate(void)\r\n{\r\n  /* Terminate for MATLABSystem: '<Root>/Gyroscope' */\r\n  if (!LabB_TuneTheGyro_DWork.obj.matlabCodegenIsDeleted) {\r\n    LabB_TuneTheGyro_DWork.obj.matlabCodegenIsDeleted = true;\r\n  }\r\n\r\n  /* End of Terminate for MATLABSystem: '<Root>/Gyroscope' */\r\n}\r\n\r\n/*\r\n * File trailer for generated code.\r\n *\r\n * [EOF]\r\n */\r\n"},{"name":"LabB_TuneTheGyro.h","type":"header","group":"model","path":"C:\\Users\\Jasminis\\OneDrive\\R7003E\\Viktor\\LAB_B\\LabB_TuneTheGyro_ert_rtw","tag":"","groupDisplay":"Model files","code":"/*\r\n * Academic License - for use in teaching, academic research, and meeting\r\n * course requirements at degree granting institutions only.  Not for\r\n * government, commercial, or other organizational use.\r\n *\r\n * File: LabB_TuneTheGyro.h\r\n *\r\n * Code generated for Simulink model 'LabB_TuneTheGyro'.\r\n *\r\n * Model version                  : 7.0\r\n * Simulink Coder version         : 9.9 (R2023a) 19-Nov-2022\r\n * C/C++ source code generated on : Fri Dec  1 22:12:55 2023\r\n *\r\n * Target selection: ert.tlc\r\n * Embedded hardware selection: Atmel->AVR\r\n * Code generation objectives: Unspecified\r\n * Validation result: Not run\r\n */\r\n\r\n#ifndef RTW_HEADER_LabB_TuneTheGyro_h_\r\n#define RTW_HEADER_LabB_TuneTheGyro_h_\r\n#ifndef LabB_TuneTheGyro_COMMON_INCLUDES_\r\n#define LabB_TuneTheGyro_COMMON_INCLUDES_\r\n#include \"rtwtypes.h\"\r\n#include \"rtw_extmode.h\"\r\n#include \"sysran_types.h\"\r\n#include \"rtw_continuous.h\"\r\n#include \"rtw_solver.h\"\r\n#include \"ext_mode.h\"\r\n#include \"MPU6050wrapper.h\"\r\n#endif                                 /* LabB_TuneTheGyro_COMMON_INCLUDES_ */\r\n\r\n#include \"LabB_TuneTheGyro_types.h\"\r\n#include <string.h>\r\n#include \"MW_target_hardware_resources.h\"\r\n\r\n/* Macros for accessing real-time model data structure */\r\n#ifndef rtmGetFinalTime\r\n#define rtmGetFinalTime(rtm)           ((rtm)->Timing.tFinal)\r\n#endif\r\n\r\n#ifndef rtmGetRTWExtModeInfo\r\n#define rtmGetRTWExtModeInfo(rtm)      ((rtm)->extModeInfo)\r\n#endif\r\n\r\n#ifndef rtmGetErrorStatus\r\n#define rtmGetErrorStatus(rtm)         ((rtm)->errorStatus)\r\n#endif\r\n\r\n#ifndef rtmSetErrorStatus\r\n#define rtmSetErrorStatus(rtm, val)    ((rtm)->errorStatus = (val))\r\n#endif\r\n\r\n#ifndef rtmGetStopRequested\r\n#define rtmGetStopRequested(rtm)       ((rtm)->Timing.stopRequestedFlag)\r\n#endif\r\n\r\n#ifndef rtmSetStopRequested\r\n#define rtmSetStopRequested(rtm, val)  ((rtm)->Timing.stopRequestedFlag = (val))\r\n#endif\r\n\r\n#ifndef rtmGetStopRequestedPtr\r\n#define rtmGetStopRequestedPtr(rtm)    (&((rtm)->Timing.stopRequestedFlag))\r\n#endif\r\n\r\n#ifndef rtmGetT\r\n#define rtmGetT(rtm)                   (rtmGetTPtr((rtm))[0])\r\n#endif\r\n\r\n#ifndef rtmGetTFinal\r\n#define rtmGetTFinal(rtm)              ((rtm)->Timing.tFinal)\r\n#endif\r\n\r\n#ifndef rtmGetTPtr\r\n#define rtmGetTPtr(rtm)                ((rtm)->Timing.t)\r\n#endif\r\n\r\n/* Block signals (default storage) */\r\ntypedef struct {\r\n  real_T DataTypeConversion1;          /* '<Root>/Data Type  Conversion1' */\r\n} BlockIO_LabB_TuneTheGyro;\r\n\r\n/* Block states (default storage) for system '<Root>' */\r\ntypedef struct {\r\n  soMPU6050Gyro_LabB_TuneTheGyro obj;  /* '<Root>/Gyroscope' */\r\n  struct {\r\n    void *LoggedData;\r\n  } Scope_PWORK;                       /* '<Root>/Scope' */\r\n\r\n  struct {\r\n    void *LoggedData;\r\n  } Scope_PWORK_o;                     /* '<S2>/Scope' */\r\n\r\n  int8_T measurementfilter_SubsysRanBC;/* '<Root>/measurement filter' */\r\n} D_Work_LabB_TuneTheGyro;\r\n\r\n/* Parameters (default storage) */\r\nstruct Parameters_LabB_TuneTheGyro_ {\r\n  real_T calibratethegyrobeforeXsecondss;\r\n                              /* Mask Parameter: calibratethegyrobeforeXsecondss\r\n                               * Referenced by: '<S1>/Constant'\r\n                               */\r\n};\r\n\r\n/* Real-time Model Data Structure */\r\nstruct tag_RTM_LabB_TuneTheGyro {\r\n  const char_T *errorStatus;\r\n  RTWExtModeInfo *extModeInfo;\r\n  RTWSolverInfo solverInfo;\r\n\r\n  /*\r\n   * Sizes:\r\n   * The following substructure contains sizes information\r\n   * for many of the model attributes such as inputs, outputs,\r\n   * dwork, sample times, etc.\r\n   */\r\n  struct {\r\n    uint32_T checksums[4];\r\n  } Sizes;\r\n\r\n  /*\r\n   * SpecialInfo:\r\n   * The following substructure contains special information\r\n   * related to other components that are dependent on RTW.\r\n   */\r\n  struct {\r\n    const void *mappingInfo;\r\n  } SpecialInfo;\r\n\r\n  /*\r\n   * Timing:\r\n   * The following substructure contains information regarding\r\n   * the timing information for the model.\r\n   */\r\n  struct {\r\n    uint32_T clockTick0;\r\n    time_T stepSize0;\r\n    uint32_T clockTick1;\r\n    time_T tFinal;\r\n    SimTimeStep simTimeStep;\r\n    boolean_T stopRequestedFlag;\r\n    time_T *t;\r\n    time_T tArray[2];\r\n  } Timing;\r\n};\r\n\r\n/* Block parameters (default storage) */\r\nextern Parameters_LabB_TuneTheGyro LabB_TuneTheGyro_P;\r\n\r\n/* Block signals (default storage) */\r\nextern BlockIO_LabB_TuneTheGyro LabB_TuneTheGyro_B;\r\n\r\n/* Block states (default storage) */\r\nextern D_Work_LabB_TuneTheGyro LabB_TuneTheGyro_DWork;\r\n\r\n/* Model entry point functions */\r\nextern void LabB_TuneTheGyro_initialize(void);\r\nextern void LabB_TuneTheGyro_step(void);\r\nextern void LabB_TuneTheGyro_terminate(void);\r\n\r\n/* Real-time Model object */\r\nextern RT_MODEL_LabB_TuneTheGyro *const LabB_TuneTheGyro_M;\r\nextern volatile boolean_T stopRequested;\r\nextern volatile boolean_T runModel;\r\n\r\n/*-\r\n * The generated code includes comments that allow you to trace directly\r\n * back to the appropriate location in the model.  The basic format\r\n * is <system>/block_name, where system is the system number (uniquely\r\n * assigned by Simulink) and block_name is the name of the block.\r\n *\r\n * Use the MATLAB hilite_system command to trace the generated code back\r\n * to the model.  For example,\r\n *\r\n * hilite_system('<S3>')    - opens system 3\r\n * hilite_system('<S3>/Kp') - opens and selects block Kp which resides in S3\r\n *\r\n * Here is the system hierarchy for this model\r\n *\r\n * '<Root>' : 'LabB_TuneTheGyro'\r\n * '<S1>'   : 'LabB_TuneTheGyro/calibrate the gyro before X seconds, start controlling after X seconds'\r\n * '<S2>'   : 'LabB_TuneTheGyro/measurement filter'\r\n */\r\n#endif                                 /* RTW_HEADER_LabB_TuneTheGyro_h_ */\r\n\r\n/*\r\n * File trailer for generated code.\r\n *\r\n * [EOF]\r\n */\r\n"},{"name":"LabB_TuneTheGyro_private.h","type":"header","group":"model","path":"C:\\Users\\Jasminis\\OneDrive\\R7003E\\Viktor\\LAB_B\\LabB_TuneTheGyro_ert_rtw","tag":"","groupDisplay":"Model files","code":"/*\r\n * Academic License - for use in teaching, academic research, and meeting\r\n * course requirements at degree granting institutions only.  Not for\r\n * government, commercial, or other organizational use.\r\n *\r\n * File: LabB_TuneTheGyro_private.h\r\n *\r\n * Code generated for Simulink model 'LabB_TuneTheGyro'.\r\n *\r\n * Model version                  : 7.0\r\n * Simulink Coder version         : 9.9 (R2023a) 19-Nov-2022\r\n * C/C++ source code generated on : Fri Dec  1 22:12:55 2023\r\n *\r\n * Target selection: ert.tlc\r\n * Embedded hardware selection: Atmel->AVR\r\n * Code generation objectives: Unspecified\r\n * Validation result: Not run\r\n */\r\n\r\n#ifndef RTW_HEADER_LabB_TuneTheGyro_private_h_\r\n#define RTW_HEADER_LabB_TuneTheGyro_private_h_\r\n#include \"rtwtypes.h\"\r\n#include \"multiword_types.h\"\r\n#include \"LabB_TuneTheGyro_types.h\"\r\n\r\n/* Private macros used by the generated code to access rtModel */\r\n#ifndef rtmIsMajorTimeStep\r\n#define rtmIsMajorTimeStep(rtm)        (((rtm)->Timing.simTimeStep) == MAJOR_TIME_STEP)\r\n#endif\r\n\r\n#ifndef rtmIsMinorTimeStep\r\n#define rtmIsMinorTimeStep(rtm)        (((rtm)->Timing.simTimeStep) == MINOR_TIME_STEP)\r\n#endif\r\n\r\n#ifndef rtmSetTFinal\r\n#define rtmSetTFinal(rtm, val)         ((rtm)->Timing.tFinal = (val))\r\n#endif\r\n\r\n#ifndef rtmSetTPtr\r\n#define rtmSetTPtr(rtm, val)           ((rtm)->Timing.t = (val))\r\n#endif\r\n#endif                              /* RTW_HEADER_LabB_TuneTheGyro_private_h_ */\r\n\r\n/*\r\n * File trailer for generated code.\r\n *\r\n * [EOF]\r\n */\r\n"},{"name":"LabB_TuneTheGyro_types.h","type":"header","group":"model","path":"C:\\Users\\Jasminis\\OneDrive\\R7003E\\Viktor\\LAB_B\\LabB_TuneTheGyro_ert_rtw","tag":"","groupDisplay":"Model files","code":"/*\r\n * Academic License - for use in teaching, academic research, and meeting\r\n * course requirements at degree granting institutions only.  Not for\r\n * government, commercial, or other organizational use.\r\n *\r\n * File: LabB_TuneTheGyro_types.h\r\n *\r\n * Code generated for Simulink model 'LabB_TuneTheGyro'.\r\n *\r\n * Model version                  : 7.0\r\n * Simulink Coder version         : 9.9 (R2023a) 19-Nov-2022\r\n * C/C++ source code generated on : Fri Dec  1 22:12:55 2023\r\n *\r\n * Target selection: ert.tlc\r\n * Embedded hardware selection: Atmel->AVR\r\n * Code generation objectives: Unspecified\r\n * Validation result: Not run\r\n */\r\n\r\n#ifndef RTW_HEADER_LabB_TuneTheGyro_types_h_\r\n#define RTW_HEADER_LabB_TuneTheGyro_types_h_\r\n#include \"rtwtypes.h\"\r\n#ifndef struct_tag_pYcsb98J6JO1Ji7woCUjNC\r\n#define struct_tag_pYcsb98J6JO1Ji7woCUjNC\r\n\r\nstruct tag_pYcsb98J6JO1Ji7woCUjNC\r\n{\r\n  boolean_T matlabCodegenIsDeleted;\r\n  int32_T isInitialized;\r\n  boolean_T isSetupComplete;\r\n};\r\n\r\n#endif                                 /* struct_tag_pYcsb98J6JO1Ji7woCUjNC */\r\n\r\n#ifndef typedef_soMPU6050Gyro_LabB_TuneTheGyro\r\n#define typedef_soMPU6050Gyro_LabB_TuneTheGyro\r\n\r\ntypedef struct tag_pYcsb98J6JO1Ji7woCUjNC soMPU6050Gyro_LabB_TuneTheGyro;\r\n\r\n#endif                              /* typedef_soMPU6050Gyro_LabB_TuneTheGyro */\r\n\r\n/* Parameters (default storage) */\r\ntypedef struct Parameters_LabB_TuneTheGyro_ Parameters_LabB_TuneTheGyro;\r\n\r\n/* Forward declaration for rtModel */\r\ntypedef struct tag_RTM_LabB_TuneTheGyro RT_MODEL_LabB_TuneTheGyro;\r\n\r\n#endif                                /* RTW_HEADER_LabB_TuneTheGyro_types_h_ */\r\n\r\n/*\r\n * File trailer for generated code.\r\n *\r\n * [EOF]\r\n */\r\n"},{"name":"LabB_TuneTheGyro_data.c","type":"source","group":"data","path":"C:\\Users\\Jasminis\\OneDrive\\R7003E\\Viktor\\LAB_B\\LabB_TuneTheGyro_ert_rtw","tag":"","groupDisplay":"Data files","code":"/*\r\n * Academic License - for use in teaching, academic research, and meeting\r\n * course requirements at degree granting institutions only.  Not for\r\n * government, commercial, or other organizational use.\r\n *\r\n * File: LabB_TuneTheGyro_data.c\r\n *\r\n * Code generated for Simulink model 'LabB_TuneTheGyro'.\r\n *\r\n * Model version                  : 7.0\r\n * Simulink Coder version         : 9.9 (R2023a) 19-Nov-2022\r\n * C/C++ source code generated on : Fri Dec  1 22:12:55 2023\r\n *\r\n * Target selection: ert.tlc\r\n * Embedded hardware selection: Atmel->AVR\r\n * Code generation objectives: Unspecified\r\n * Validation result: Not run\r\n */\r\n\r\n#include \"LabB_TuneTheGyro.h\"\r\n\r\n/* Block parameters (default storage) */\r\nParameters_LabB_TuneTheGyro LabB_TuneTheGyro_P = {\r\n  /* Mask Parameter: calibratethegyrobeforeXsecondss\r\n   * Referenced by: '<S1>/Constant'\r\n   */\r\n  3.0\r\n};\r\n\r\n/*\r\n * File trailer for generated code.\r\n *\r\n * [EOF]\r\n */\r\n"},{"name":"multiword_types.h","type":"header","group":"utility","path":"C:\\Users\\Jasminis\\OneDrive\\R7003E\\Viktor\\LAB_B\\LabB_TuneTheGyro_ert_rtw","tag":"","groupDisplay":"Utility files","code":"/*\r\n * Academic License - for use in teaching, academic research, and meeting\r\n * course requirements at degree granting institutions only.  Not for\r\n * government, commercial, or other organizational use.\r\n *\r\n * File: multiword_types.h\r\n *\r\n * Code generated for Simulink model 'LabB_TuneTheGyro'.\r\n *\r\n * Model version                  : 7.0\r\n * Simulink Coder version         : 9.9 (R2023a) 19-Nov-2022\r\n * C/C++ source code generated on : Fri Dec  1 22:12:55 2023\r\n *\r\n * Target selection: ert.tlc\r\n * Embedded hardware selection: Atmel->AVR\r\n * Code generation objectives: Unspecified\r\n * Validation result: Not run\r\n */\r\n\r\n#ifndef MULTIWORD_TYPES_H\r\n#define MULTIWORD_TYPES_H\r\n#include \"rtwtypes.h\"\r\n\r\n/*\r\n * Definitions supporting external data access\r\n */\r\ntypedef int32_T chunk_T;\r\ntypedef uint32_T uchunk_T;\r\n\r\n#endif                                 /* MULTIWORD_TYPES_H */\r\n\r\n/*\r\n * File trailer for generated code.\r\n *\r\n * [EOF]\r\n */\r\n"},{"name":"rtwtypes.h","type":"header","group":"utility","path":"C:\\Users\\Jasminis\\OneDrive\\R7003E\\Viktor\\LAB_B\\LabB_TuneTheGyro_ert_rtw","tag":"","groupDisplay":"Utility files","code":"/*\r\n * Academic License - for use in teaching, academic research, and meeting\r\n * course requirements at degree granting institutions only.  Not for\r\n * government, commercial, or other organizational use.\r\n *\r\n * File: rtwtypes.h\r\n *\r\n * Code generated for Simulink model 'LabB_TuneTheGyro'.\r\n *\r\n * Model version                  : 7.0\r\n * Simulink Coder version         : 9.9 (R2023a) 19-Nov-2022\r\n * C/C++ source code generated on : Fri Dec  1 22:12:55 2023\r\n *\r\n * Target selection: ert.tlc\r\n * Embedded hardware selection: Atmel->AVR\r\n * Code generation objectives: Unspecified\r\n * Validation result: Not run\r\n */\r\n\r\n#ifndef RTWTYPES_H\r\n#define RTWTYPES_H\r\n\r\n/* Logical type definitions */\r\n#if (!defined(__cplusplus))\r\n#ifndef false\r\n#define false                          (0U)\r\n#endif\r\n\r\n#ifndef true\r\n#define true                           (1U)\r\n#endif\r\n#endif\r\n\r\n/*=======================================================================*\r\n * Target hardware information\r\n *   Device type: Atmel->AVR\r\n *   Number of bits:     char:   8    short:   16    int:  16\r\n *                       long:  32\r\n *                       native word size:   8\r\n *   Byte ordering: LittleEndian\r\n *   Signed integer division rounds to: Zero\r\n *   Shift right on a signed integer as arithmetic shift: on\r\n *=======================================================================*/\r\n\r\n/*=======================================================================*\r\n * Fixed width word size data types:                                     *\r\n *   int8_T, int16_T, int32_T     - signed 8, 16, or 32 bit integers     *\r\n *   uint8_T, uint16_T, uint32_T  - unsigned 8, 16, or 32 bit integers   *\r\n *   real32_T, real64_T           - 32 and 64 bit floating point numbers *\r\n *=======================================================================*/\r\ntypedef signed char int8_T;\r\ntypedef unsigned char uint8_T;\r\ntypedef int int16_T;\r\ntypedef unsigned int uint16_T;\r\ntypedef long int32_T;\r\ntypedef unsigned long uint32_T;\r\ntypedef float real32_T;\r\ntypedef double real64_T;\r\n\r\n/*===========================================================================*\r\n * Generic type definitions: boolean_T, char_T, byte_T, int_T, uint_T,       *\r\n *                           real_T, time_T, ulong_T.                        *\r\n *===========================================================================*/\r\ntypedef double real_T;\r\ntypedef double time_T;\r\ntypedef unsigned char boolean_T;\r\ntypedef int int_T;\r\ntypedef unsigned int uint_T;\r\ntypedef unsigned long ulong_T;\r\ntypedef char char_T;\r\ntypedef unsigned char uchar_T;\r\ntypedef char_T byte_T;\r\n\r\n/*===========================================================================*\r\n * Complex number type definitions                                           *\r\n *===========================================================================*/\r\n#define CREAL_T\r\n\r\ntypedef struct {\r\n  real32_T re;\r\n  real32_T im;\r\n} creal32_T;\r\n\r\ntypedef struct {\r\n  real64_T re;\r\n  real64_T im;\r\n} creal64_T;\r\n\r\ntypedef struct {\r\n  real_T re;\r\n  real_T im;\r\n} creal_T;\r\n\r\n#define CINT8_T\r\n\r\ntypedef struct {\r\n  int8_T re;\r\n  int8_T im;\r\n} cint8_T;\r\n\r\n#define CUINT8_T\r\n\r\ntypedef struct {\r\n  uint8_T re;\r\n  uint8_T im;\r\n} cuint8_T;\r\n\r\n#define CINT16_T\r\n\r\ntypedef struct {\r\n  int16_T re;\r\n  int16_T im;\r\n} cint16_T;\r\n\r\n#define CUINT16_T\r\n\r\ntypedef struct {\r\n  uint16_T re;\r\n  uint16_T im;\r\n} cuint16_T;\r\n\r\n#define CINT32_T\r\n\r\ntypedef struct {\r\n  int32_T re;\r\n  int32_T im;\r\n} cint32_T;\r\n\r\n#define CUINT32_T\r\n\r\ntypedef struct {\r\n  uint32_T re;\r\n  uint32_T im;\r\n} cuint32_T;\r\n\r\n/*=======================================================================*\r\n * Min and Max:                                                          *\r\n *   int8_T, int16_T, int32_T     - signed 8, 16, or 32 bit integers     *\r\n *   uint8_T, uint16_T, uint32_T  - unsigned 8, 16, or 32 bit integers   *\r\n *=======================================================================*/\r\n#define MAX_int8_T                     ((int8_T)(127))\r\n#define MIN_int8_T                     ((int8_T)(-128))\r\n#define MAX_uint8_T                    ((uint8_T)(255U))\r\n#define MAX_int16_T                    ((int16_T)(32767))\r\n#define MIN_int16_T                    ((int16_T)(-32768))\r\n#define MAX_uint16_T                   ((uint16_T)(65535U))\r\n#define MAX_int32_T                    ((int32_T)(2147483647L))\r\n#define MIN_int32_T                    ((int32_T)(-2147483647L-1L))\r\n#define MAX_uint32_T                   ((uint32_T)(0xFFFFFFFFUL))\r\n\r\n/* Block D-Work pointer type */\r\ntypedef void * pointer_T;\r\n\r\n#endif                                 /* RTWTYPES_H */\r\n\r\n/*\r\n * File trailer for generated code.\r\n *\r\n * [EOF]\r\n */\r\n"},{"name":"ext_mode_types.h","type":"header","group":"interface","path":"C:\\Users\\Jasminis\\OneDrive\\R7003E\\Viktor\\LAB_B\\LabB_TuneTheGyro_ert_rtw","tag":"","groupDisplay":"Interface files","code":"/*\r\n * ext_mode_types.h\r\n *\r\n * Academic License - for use in teaching, academic research, and meeting\r\n * course requirements at degree granting institutions only.  Not for\r\n * government, commercial, or other organizational use.\r\n *\r\n * Code generation for model \"LabB_TuneTheGyro\".\r\n *\r\n * Model version              : 7.0\r\n * Simulink Coder version : 9.9 (R2023a) 19-Nov-2022\r\n * C source code generated on : Fri Dec  1 22:12:55 2023\r\n *\r\n * Target selection: ert.tlc\r\n * Embedded hardware selection: Atmel->AVR\r\n * Code generation objectives: Unspecified\r\n * Validation result: Not run\r\n */\r\n\r\n#ifndef EXT_MODE_TYPES_H\r\n#define EXT_MODE_TYPES_H\r\n#include \"rtwtypes.h\"\r\n\r\n/** External Mode Event ID */\r\ntypedef uint16_T extmodeEventId_T;\r\n\r\n/** External Mode real time, measured using the target's clock */\r\ntypedef uint32_T extmodeRealTime_T;\r\n\r\n/** External Mode simulation time */\r\ntypedef uint32_T extmodeSimulationTime_T;\r\n\r\n/** External Mode double data type */\r\ntypedef real_T extmodeDouble_T;\r\n\r\n/** External Mode classic trigger signal */\r\ntypedef real_T extmodeClassicTriggerSignal_T;\r\n\r\n/** Run the simulation forever (infinite simulation end time) */\r\n#define EXTMODE_SIMULATION_RUN_FOREVER ((extmodeSimulationTime_T) -1)\r\n\r\n/* Define max value of 32-bit unsigned type */\r\n#define XCP_UINT32_MAX                 0xFFFFFFFFU\r\n\r\n/** External Mode MAX simulation time */\r\n#define MAX_extmodeSimulationTime_T    XCP_UINT32_MAX\r\n\r\n/** External Mode MAX base rate simulation time */\r\n#define EXTMODE_MAX_BASE_RATE_SIMULATION_TIME MAX_uint32_T\r\n\r\n/** External Mode Step Size in microseconds */\r\n#define EXTMODE_STEP_SIZE_IN_MICROSECONDS 10000\r\n\r\n/** External Mode Base rate event id */\r\n#define EXTMODE_BASE_RATE_EVENT_ID     1\r\n\r\n/** External Mode Max Event Id */\r\n#define EXTMODE_MAX_EVENT_ID           0xFF\r\n#endif                                 /* EXT_MODE_TYPES_H */\r\n\r\n/* [EOF] ext_mode_types.h */\r\n"},{"name":"rtmodel.h","type":"header","group":"interface","path":"C:\\Users\\Jasminis\\OneDrive\\R7003E\\Viktor\\LAB_B\\LabB_TuneTheGyro_ert_rtw","tag":"","groupDisplay":"Interface files","code":"/*\r\n * Academic License - for use in teaching, academic research, and meeting\r\n * course requirements at degree granting institutions only.  Not for\r\n * government, commercial, or other organizational use.\r\n *\r\n * File: rtmodel.h\r\n *\r\n * Code generated for Simulink model 'LabB_TuneTheGyro'.\r\n *\r\n * Model version                  : 7.0\r\n * Simulink Coder version         : 9.9 (R2023a) 19-Nov-2022\r\n * C/C++ source code generated on : Fri Dec  1 22:12:55 2023\r\n *\r\n * Target selection: ert.tlc\r\n * Embedded hardware selection: Atmel->AVR\r\n * Code generation objectives: Unspecified\r\n * Validation result: Not run\r\n */\r\n\r\n#ifndef RTW_HEADER_rtmodel_h_\r\n#define RTW_HEADER_rtmodel_h_\r\n#include \"LabB_TuneTheGyro.h\"\r\n#endif                                 /* RTW_HEADER_rtmodel_h_ */\r\n\r\n/*\r\n * File trailer for generated code.\r\n *\r\n * [EOF]\r\n */\r\n"},{"name":"I2Cdev.cpp","type":"source","group":"legacy","path":"C:\\Users\\Jasminis\\OneDrive\\R7003E\\Viktor\\LAB_B\\LabB_TuneTheGyro_ert_rtw\\..\\..\\..\\..\\..\\Documents\\MATLAB\\RASPlib\\src","tag":"","groupDisplay":"Other files","code":"// I2Cdev library collection - Main I2C device class\n// Abstracts bit and byte I2C R/W functions into a convenient class\n// 6/9/2012 by Jeff Rowberg <jeff@rowberg.net>\n//\n// Changelog:\n//     2012-06-09 - fix major issue with reading > 32 bytes at a time with Arduino Wire\n//                - add compiler warnings when using outdated or IDE or limited I2Cdev implementation\n//     2011-11-01 - fix write*Bits mask calculation (thanks sasquatch @ Arduino forums)\n//     2011-10-03 - added automatic Arduino version detection for ease of use\n//     2011-10-02 - added Gene Knight's NBWire TwoWire class implementation with small modifications\n//     2011-08-31 - added support for Arduino 1.0 Wire library (methods are different from 0.x)\n//     2011-08-03 - added optional timeout parameter to read* methods to easily change from default\n//     2011-08-02 - added support for 16-bit registers\n//                - fixed incorrect Doxygen comments on some methods\n//                - added timeout value for read operations (thanks mem @ Arduino forums)\n//     2011-07-30 - changed read/write function structures to return success or byte counts\n//                - made all methods static for multi-device memory savings\n//     2011-07-28 - initial release\n\n/* ============================================\nI2Cdev device library code is placed under the MIT license\nCopyright (c) 2012 Jeff Rowberg\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n===============================================\n*/\n\n#include \"I2Cdev.h\"\n\n#if I2CDEV_IMPLEMENTATION == I2CDEV_ARDUINO_WIRE\n\n    #ifdef I2CDEV_IMPLEMENTATION_WARNINGS\n        #if ARDUINO < 100\n            #warning Using outdated Arduino IDE with Wire library is functionally limiting.\n            #warning Arduino IDE v1.0.1+ with I2Cdev Fastwire implementation is recommended.\n            #warning This I2Cdev implementation does not support:\n            #warning - Repeated starts conditions\n            #warning - Timeout detection (some Wire requests block forever)\n        #elif ARDUINO == 100\n            #warning Using outdated Arduino IDE with Wire library is functionally limiting.\n            #warning Arduino IDE v1.0.1+ with I2Cdev Fastwire implementation is recommended.\n            #warning This I2Cdev implementation does not support:\n            #warning - Repeated starts conditions\n            #warning - Timeout detection (some Wire requests block forever)\n        #elif ARDUINO > 100\n            /*\n            #warning Using current Arduino IDE with Wire library is functionally limiting.\n            #warning Arduino IDE v1.0.1+ with I2CDEV_BUILTIN_FASTWIRE implementation is recommended.\n            #warning This I2Cdev implementation does not support:\n            #warning - Timeout detection (some Wire requests block forever)\n            */\n        #endif\n    #endif\n\n#elif I2CDEV_IMPLEMENTATION == I2CDEV_BUILTIN_FASTWIRE\n\n    #error The I2CDEV_BUILTIN_FASTWIRE implementation is known to be broken right now. Patience, Iago!\n\n#elif I2CDEV_IMPLEMENTATION == I2CDEV_BUILTIN_NBWIRE\n\n    #ifdef I2CDEV_IMPLEMENTATION_WARNINGS\n        #warning Using I2CDEV_BUILTIN_NBWIRE implementation may adversely affect interrupt detection.\n        #warning This I2Cdev implementation does not support:\n        #warning - Repeated starts conditions\n    #endif\n\n    // NBWire implementation based heavily on code by Gene Knight <Gene@Telobot.com>\n    // Originally posted on the Arduino forum at http://arduino.cc/forum/index.php/topic,70705.0.html\n    // Originally offered to the i2cdevlib project at http://arduino.cc/forum/index.php/topic,68210.30.html\n    TwoWire Wire;\n\n#endif\n\n\n/** Default constructor.\n */\nI2Cdev::I2Cdev() {\n}\n\n/** Read a single bit from an 8-bit device register.\n * @param devAddr I2C slave device address\n * @param regAddr Register regAddr to read from\n * @param bitNum Bit position to read (0-7)\n * @param data Container for single bit value\n * @param timeout Optional read timeout in milliseconds (0 to disable, leave off to use default class value in I2Cdev::readTimeout)\n * @return Status of read operation (true = success)\n */\nint8_t I2Cdev::readBit(uint8_t devAddr, uint8_t regAddr, uint8_t bitNum, uint8_t *data, uint16_t timeout) {\n    uint8_t b;\n    uint8_t count = readByte(devAddr, regAddr, &b, timeout);\n    *data = b & (1 << bitNum);\n    return count;\n}\n\n/** Read a single bit from a 16-bit device register.\n * @param devAddr I2C slave device address\n * @param regAddr Register regAddr to read from\n * @param bitNum Bit position to read (0-15)\n * @param data Container for single bit value\n * @param timeout Optional read timeout in milliseconds (0 to disable, leave off to use default class value in I2Cdev::readTimeout)\n * @return Status of read operation (true = success)\n */\nint8_t I2Cdev::readBitW(uint8_t devAddr, uint8_t regAddr, uint8_t bitNum, uint16_t *data, uint16_t timeout) {\n    uint16_t b;\n    uint8_t count = readWord(devAddr, regAddr, &b, timeout);\n    *data = b & (1 << bitNum);\n    return count;\n}\n\n/** Read multiple bits from an 8-bit device register.\n * @param devAddr I2C slave device address\n * @param regAddr Register regAddr to read from\n * @param bitStart First bit position to read (0-7)\n * @param length Number of bits to read (not more than 8)\n * @param data Container for right-aligned value (i.e. '101' read from any bitStart position will equal 0x05)\n * @param timeout Optional read timeout in milliseconds (0 to disable, leave off to use default class value in I2Cdev::readTimeout)\n * @return Status of read operation (true = success)\n */\nint8_t I2Cdev::readBits(uint8_t devAddr, uint8_t regAddr, uint8_t bitStart, uint8_t length, uint8_t *data, uint16_t timeout) {\n    // 01101001 read byte\n    // 76543210 bit numbers\n    //    xxx   args: bitStart=4, length=3\n    //    010   masked\n    //   -> 010 shifted\n    uint8_t count, b;\n    if ((count = readByte(devAddr, regAddr, &b, timeout)) != 0) {\n        uint8_t mask = ((1 << length) - 1) << (bitStart - length + 1);\n        b &= mask;\n        b >>= (bitStart - length + 1);\n        *data = b;\n    }\n    return count;\n}\n\n/** Read multiple bits from a 16-bit device register.\n * @param devAddr I2C slave device address\n * @param regAddr Register regAddr to read from\n * @param bitStart First bit position to read (0-15)\n * @param length Number of bits to read (not more than 16)\n * @param data Container for right-aligned value (i.e. '101' read from any bitStart position will equal 0x05)\n * @param timeout Optional read timeout in milliseconds (0 to disable, leave off to use default class value in I2Cdev::readTimeout)\n * @return Status of read operation (1 = success, 0 = failure, -1 = timeout)\n */\nint8_t I2Cdev::readBitsW(uint8_t devAddr, uint8_t regAddr, uint8_t bitStart, uint8_t length, uint16_t *data, uint16_t timeout) {\n    // 1101011001101001 read byte\n    // fedcba9876543210 bit numbers\n    //    xxx           args: bitStart=12, length=3\n    //    010           masked\n    //           -> 010 shifted\n    uint8_t count;\n    uint16_t w;\n    if ((count = readWord(devAddr, regAddr, &w, timeout)) != 0) {\n        uint16_t mask = ((1 << length) - 1) << (bitStart - length + 1);\n        w &= mask;\n        w >>= (bitStart - length + 1);\n        *data = w;\n    }\n    return count;\n}\n\n/** Read single byte from an 8-bit device register.\n * @param devAddr I2C slave device address\n * @param regAddr Register regAddr to read from\n * @param data Container for byte value read from device\n * @param timeout Optional read timeout in milliseconds (0 to disable, leave off to use default class value in I2Cdev::readTimeout)\n * @return Status of read operation (true = success)\n */\nint8_t I2Cdev::readByte(uint8_t devAddr, uint8_t regAddr, uint8_t *data, uint16_t timeout) {\n    return readBytes(devAddr, regAddr, 1, data, timeout);\n}\n\n/** Read single word from a 16-bit device register.\n * @param devAddr I2C slave device address\n * @param regAddr Register regAddr to read from\n * @param data Container for word value read from device\n * @param timeout Optional read timeout in milliseconds (0 to disable, leave off to use default class value in I2Cdev::readTimeout)\n * @return Status of read operation (true = success)\n */\nint8_t I2Cdev::readWord(uint8_t devAddr, uint8_t regAddr, uint16_t *data, uint16_t timeout) {\n    return readWords(devAddr, regAddr, 1, data, timeout);\n}\n\n/** Read multiple bytes from an 8-bit device register.\n * @param devAddr I2C slave device address\n * @param regAddr First register regAddr to read from\n * @param length Number of bytes to read\n * @param data Buffer to store read data in\n * @param timeout Optional read timeout in milliseconds (0 to disable, leave off to use default class value in I2Cdev::readTimeout)\n * @return Number of bytes read (-1 indicates failure)\n */\nint8_t I2Cdev::readBytes(uint8_t devAddr, uint8_t regAddr, uint8_t length, uint8_t *data, uint16_t timeout) {\n    #ifdef I2CDEV_SERIAL_DEBUG\n        Serial.print(\"I2C (0x\");\n        Serial.print(devAddr, HEX);\n        Serial.print(\") reading \");\n        Serial.print(length, DEC);\n        Serial.print(\" bytes from 0x\");\n        Serial.print(regAddr, HEX);\n        Serial.print(\"...\");\n    #endif\n\n    int8_t count = 0;\n    uint32_t t1 = millis();\n\n    #if (I2CDEV_IMPLEMENTATION == I2CDEV_ARDUINO_WIRE)\n\n        #if (ARDUINO < 100)\n            // Arduino v00xx (before v1.0), Wire library\n\n            // I2C/TWI subsystem uses internal buffer that breaks with large data requests\n            // so if user requests more than BUFFER_LENGTH bytes, we have to do it in\n            // smaller chunks instead of all at once\n            for (uint8_t k = 0; k < length; k += min(length, BUFFER_LENGTH)) {\n                Wire.beginTransmission(devAddr);\n                Wire.send(regAddr);\n                Wire.endTransmission();\n                Wire.beginTransmission(devAddr);\n                Wire.requestFrom(devAddr, (uint8_t)min(length - k, BUFFER_LENGTH));\n\n                for (; Wire.available() && (timeout == 0 || millis() - t1 < timeout); count++) {\n                    data[count] = Wire.receive();\n                    #ifdef I2CDEV_SERIAL_DEBUG\n                        Serial.print(data[count], HEX);\n                        if (count + 1 < length) Serial.print(\" \");\n                    #endif\n                }\n\n                Wire.endTransmission();\n            }\n        #elif (ARDUINO == 100)\n            // Arduino v1.0.0, Wire library\n            // Adds standardized write() and read() stream methods instead of send() and receive()\n\n            // I2C/TWI subsystem uses internal buffer that breaks with large data requests\n            // so if user requests more than BUFFER_LENGTH bytes, we have to do it in\n            // smaller chunks instead of all at once\n            for (uint8_t k = 0; k < length; k += min(length, BUFFER_LENGTH)) {\n                Wire.beginTransmission(devAddr);\n                Wire.write(regAddr);\n                Wire.endTransmission();\n                Wire.beginTransmission(devAddr);\n                Wire.requestFrom(devAddr, (uint8_t)min(length - k, BUFFER_LENGTH));\n        \n                for (; Wire.available() && (timeout == 0 || millis() - t1 < timeout); count++) {\n                    data[count] = Wire.read();\n                    #ifdef I2CDEV_SERIAL_DEBUG\n                        Serial.print(data[count], HEX);\n                        if (count + 1 < length) Serial.print(\" \");\n                    #endif\n                }\n        \n                Wire.endTransmission();\n            }\n        #elif (ARDUINO > 100)\n            // Arduino v1.0.1+, Wire library\n            // Adds official support for repeated start condition, yay!\n\n            // I2C/TWI subsystem uses internal buffer that breaks with large data requests\n            // so if user requests more than BUFFER_LENGTH bytes, we have to do it in\n            // smaller chunks instead of all at once\n            for (uint8_t k = 0; k < length; k += min(length, BUFFER_LENGTH)) {\n                Wire.beginTransmission(devAddr);\n                Wire.write(regAddr);\n                Wire.endTransmission();\n                Wire.beginTransmission(devAddr);\n                Wire.requestFrom(devAddr, (uint8_t)min(length - k, BUFFER_LENGTH));\n        \n                for (; Wire.available() && (timeout == 0 || millis() - t1 < timeout); count++) {\n                    data[count] = Wire.read();\n                    #ifdef I2CDEV_SERIAL_DEBUG\n                        Serial.print(data[count], HEX);\n                        if (count + 1 < length) Serial.print(\" \");\n                    #endif\n                }\n        \n                Wire.endTransmission();\n            }\n        #endif\n\n    #elif (I2CDEV_IMPLEMENTATION == I2CDEV_BUILTIN_FASTWIRE)\n        // Fastwire library (STILL UNDER DEVELOPMENT, NON-FUNCTIONAL!)\n\n        // no loop required for fastwire\n        uint8_t status = Fastwire::readBuf(devAddr, regAddr, data, length);\n        if (status == 0) {\n            count = length; // success\n        } else {\n            count = -1; // error\n        }\n\n    #endif\n\n    // check for timeout\n    if (timeout > 0 && millis() - t1 >= timeout && count < length) count = -1; // timeout\n\n    #ifdef I2CDEV_SERIAL_DEBUG\n        Serial.print(\". Done (\");\n        Serial.print(count, DEC);\n        Serial.println(\" read).\");\n    #endif\n\n    return count;\n}\n\n/** Read multiple words from a 16-bit device register.\n * @param devAddr I2C slave device address\n * @param regAddr First register regAddr to read from\n * @param length Number of words to read\n * @param data Buffer to store read data in\n * @param timeout Optional read timeout in milliseconds (0 to disable, leave off to use default class value in I2Cdev::readTimeout)\n * @return Number of words read (0 indicates failure)\n */\nint8_t I2Cdev::readWords(uint8_t devAddr, uint8_t regAddr, uint8_t length, uint16_t *data, uint16_t timeout) {\n    #ifdef I2CDEV_SERIAL_DEBUG\n        Serial.print(\"I2C (0x\");\n        Serial.print(devAddr, HEX);\n        Serial.print(\") reading \");\n        Serial.print(length, DEC);\n        Serial.print(\" words from 0x\");\n        Serial.print(regAddr, HEX);\n        Serial.print(\"...\");\n    #endif\n\n    int8_t count = 0;\n    uint32_t t1 = millis();\n\n    #if (I2CDEV_IMPLEMENTATION == I2CDEV_ARDUINO_WIRE)\n\n        #if (ARDUINO < 100)\n            // Arduino v00xx (before v1.0), Wire library\n\n            // I2C/TWI subsystem uses internal buffer that breaks with large data requests\n            // so if user requests more than BUFFER_LENGTH bytes, we have to do it in\n            // smaller chunks instead of all at once\n            for (uint8_t k = 0; k < length * 2; k += min(length * 2, BUFFER_LENGTH)) {\n                Wire.beginTransmission(devAddr);\n                Wire.send(regAddr);\n                Wire.endTransmission();\n                Wire.beginTransmission(devAddr);\n                Wire.requestFrom(devAddr, (uint8_t)(length * 2)); // length=words, this wants bytes\n    \n                bool msb = true; // starts with MSB, then LSB\n                for (; Wire.available() && count < length && (timeout == 0 || millis() - t1 < timeout);) {\n                    if (msb) {\n                        // first byte is bits 15-8 (MSb=15)\n                        data[count] = Wire.receive() << 8;\n                    } else {\n                        // second byte is bits 7-0 (LSb=0)\n                        data[count] |= Wire.receive();\n                        #ifdef I2CDEV_SERIAL_DEBUG\n                            Serial.print(data[count], HEX);\n                            if (count + 1 < length) Serial.print(\" \");\n                        #endif\n                        count++;\n                    }\n                    msb = !msb;\n                }\n\n                Wire.endTransmission();\n            }\n        #elif (ARDUINO == 100)\n            // Arduino v1.0.0, Wire library\n            // Adds standardized write() and read() stream methods instead of send() and receive()\n    \n            // I2C/TWI subsystem uses internal buffer that breaks with large data requests\n            // so if user requests more than BUFFER_LENGTH bytes, we have to do it in\n            // smaller chunks instead of all at once\n            for (uint8_t k = 0; k < length * 2; k += min(length * 2, BUFFER_LENGTH)) {\n                Wire.beginTransmission(devAddr);\n                Wire.write(regAddr);\n                Wire.endTransmission();\n                Wire.beginTransmission(devAddr);\n                Wire.requestFrom(devAddr, (uint8_t)(length * 2)); // length=words, this wants bytes\n    \n                bool msb = true; // starts with MSB, then LSB\n                for (; Wire.available() && count < length && (timeout == 0 || millis() - t1 < timeout);) {\n                    if (msb) {\n                        // first byte is bits 15-8 (MSb=15)\n                        data[count] = Wire.read() << 8;\n                    } else {\n                        // second byte is bits 7-0 (LSb=0)\n                        data[count] |= Wire.read();\n                        #ifdef I2CDEV_SERIAL_DEBUG\n                            Serial.print(data[count], HEX);\n                            if (count + 1 < length) Serial.print(\" \");\n                        #endif\n                        count++;\n                    }\n                    msb = !msb;\n                }\n        \n                Wire.endTransmission();\n            }\n        #elif (ARDUINO > 100)\n            // Arduino v1.0.1+, Wire library\n            // Adds official support for repeated start condition, yay!\n\n            // I2C/TWI subsystem uses internal buffer that breaks with large data requests\n            // so if user requests more than BUFFER_LENGTH bytes, we have to do it in\n            // smaller chunks instead of all at once\n            for (uint8_t k = 0; k < length * 2; k += min(length * 2, BUFFER_LENGTH)) {\n                Wire.beginTransmission(devAddr);\n                Wire.write(regAddr);\n                Wire.endTransmission();\n                Wire.beginTransmission(devAddr);\n                Wire.requestFrom(devAddr, (uint8_t)(length * 2)); // length=words, this wants bytes\n        \n                bool msb = true; // starts with MSB, then LSB\n                for (; Wire.available() && count < length && (timeout == 0 || millis() - t1 < timeout);) {\n                    if (msb) {\n                        // first byte is bits 15-8 (MSb=15)\n                        data[count] = Wire.read() << 8;\n                    } else {\n                        // second byte is bits 7-0 (LSb=0)\n                        data[count] |= Wire.read();\n                        #ifdef I2CDEV_SERIAL_DEBUG\n                            Serial.print(data[count], HEX);\n                            if (count + 1 < length) Serial.print(\" \");\n                        #endif\n                        count++;\n                    }\n                    msb = !msb;\n                }\n        \n                Wire.endTransmission();\n            }\n        #endif\n\n    #elif (I2CDEV_IMPLEMENTATION == I2CDEV_BUILTIN_FASTWIRE)\n        // Fastwire library (STILL UNDER DEVELOPMENT, NON-FUNCTIONAL!)\n\n        // no loop required for fastwire\n        uint16_t intermediate[(uint8_t)length];\n        uint8_t status = Fastwire::readBuf(devAddr, regAddr, (uint8_t *)intermediate, (uint8_t)(length * 2));\n        if (status == 0) {\n            count = length; // success\n            for (uint8_t i = 0; i < length; i++) {\n                data[i] = (intermediate[2*i] << 8) | intermediate[2*i + 1];\n            }\n        } else {\n            count = -1; // error\n        }\n\n    #endif\n\n    if (timeout > 0 && millis() - t1 >= timeout && count < length) count = -1; // timeout\n\n    #ifdef I2CDEV_SERIAL_DEBUG\n        Serial.print(\". Done (\");\n        Serial.print(count, DEC);\n        Serial.println(\" read).\");\n    #endif\n    \n    return count;\n}\n\n/** write a single bit in an 8-bit device register.\n * @param devAddr I2C slave device address\n * @param regAddr Register regAddr to write to\n * @param bitNum Bit position to write (0-7)\n * @param value New bit value to write\n * @return Status of operation (true = success)\n */\nbool I2Cdev::writeBit(uint8_t devAddr, uint8_t regAddr, uint8_t bitNum, uint8_t data) {\n    uint8_t b;\n    readByte(devAddr, regAddr, &b);\n    b = (data != 0) ? (b | (1 << bitNum)) : (b & ~(1 << bitNum));\n    return writeByte(devAddr, regAddr, b);\n}\n\n/** write a single bit in a 16-bit device register.\n * @param devAddr I2C slave device address\n * @param regAddr Register regAddr to write to\n * @param bitNum Bit position to write (0-15)\n * @param value New bit value to write\n * @return Status of operation (true = success)\n */\nbool I2Cdev::writeBitW(uint8_t devAddr, uint8_t regAddr, uint8_t bitNum, uint16_t data) {\n    uint16_t w;\n    readWord(devAddr, regAddr, &w);\n    w = (data != 0) ? (w | (1 << bitNum)) : (w & ~(1 << bitNum));\n    return writeWord(devAddr, regAddr, w);\n}\n\n/** Write multiple bits in an 8-bit device register.\n * @param devAddr I2C slave device address\n * @param regAddr Register regAddr to write to\n * @param bitStart First bit position to write (0-7)\n * @param length Number of bits to write (not more than 8)\n * @param data Right-aligned value to write\n * @return Status of operation (true = success)\n */\nbool I2Cdev::writeBits(uint8_t devAddr, uint8_t regAddr, uint8_t bitStart, uint8_t length, uint8_t data) {\n    //      010 value to write\n    // 76543210 bit numbers\n    //    xxx   args: bitStart=4, length=3\n    // 00011100 mask byte\n    // 10101111 original value (sample)\n    // 10100011 original & ~mask\n    // 10101011 masked | value\n    uint8_t b;\n    if (readByte(devAddr, regAddr, &b) != 0) {\n        uint8_t mask = ((1 << length) - 1) << (bitStart - length + 1);\n        data <<= (bitStart - length + 1); // shift data into correct position\n        data &= mask; // zero all non-important bits in data\n        b &= ~(mask); // zero all important bits in existing byte\n        b |= data; // combine data with existing byte\n        return writeByte(devAddr, regAddr, b);\n    } else {\n        return false;\n    }\n}\n\n/** Write multiple bits in a 16-bit device register.\n * @param devAddr I2C slave device address\n * @param regAddr Register regAddr to write to\n * @param bitStart First bit position to write (0-15)\n * @param length Number of bits to write (not more than 16)\n * @param data Right-aligned value to write\n * @return Status of operation (true = success)\n */\nbool I2Cdev::writeBitsW(uint8_t devAddr, uint8_t regAddr, uint8_t bitStart, uint8_t length, uint16_t data) {\n    //              010 value to write\n    // fedcba9876543210 bit numbers\n    //    xxx           args: bitStart=12, length=3\n    // 0001110000000000 mask byte\n    // 1010111110010110 original value (sample)\n    // 1010001110010110 original & ~mask\n    // 1010101110010110 masked | value\n    uint16_t w;\n    if (readWord(devAddr, regAddr, &w) != 0) {\n        uint8_t mask = ((1 << length) - 1) << (bitStart - length + 1);\n        data <<= (bitStart - length + 1); // shift data into correct position\n        data &= mask; // zero all non-important bits in data\n        w &= ~(mask); // zero all important bits in existing word\n        w |= data; // combine data with existing word\n        return writeWord(devAddr, regAddr, w);\n    } else {\n        return false;\n    }\n}\n\n/** Write single byte to an 8-bit device register.\n * @param devAddr I2C slave device address\n * @param regAddr Register address to write to\n * @param data New byte value to write\n * @return Status of operation (true = success)\n */\nbool I2Cdev::writeByte(uint8_t devAddr, uint8_t regAddr, uint8_t data) {\n    return writeBytes(devAddr, regAddr, 1, &data);\n}\n\n/** Write single word to a 16-bit device register.\n * @param devAddr I2C slave device address\n * @param regAddr Register address to write to\n * @param data New word value to write\n * @return Status of operation (true = success)\n */\nbool I2Cdev::writeWord(uint8_t devAddr, uint8_t regAddr, uint16_t data) {\n    return writeWords(devAddr, regAddr, 1, &data);\n}\n\n/** Write multiple bytes to an 8-bit device register.\n * @param devAddr I2C slave device address\n * @param regAddr First register address to write to\n * @param length Number of bytes to write\n * @param data Buffer to copy new data from\n * @return Status of operation (true = success)\n */\nbool I2Cdev::writeBytes(uint8_t devAddr, uint8_t regAddr, uint8_t length, uint8_t* data) {\n    #ifdef I2CDEV_SERIAL_DEBUG\n        Serial.print(\"I2C (0x\");\n        Serial.print(devAddr, HEX);\n        Serial.print(\") writing \");\n        Serial.print(length, DEC);\n        Serial.print(\" bytes to 0x\");\n        Serial.print(regAddr, HEX);\n        Serial.print(\"...\");\n    #endif\n    uint8_t status = 0;\n    #if ((I2CDEV_IMPLEMENTATION == I2CDEV_ARDUINO_WIRE && ARDUINO < 100) || I2CDEV_IMPLEMENTATION == I2CDEV_BUILTIN_NBWIRE)\n        Wire.beginTransmission(devAddr);\n        Wire.send((uint8_t) regAddr); // send address\n    #elif (I2CDEV_IMPLEMENTATION == I2CDEV_ARDUINO_WIRE && ARDUINO >= 100)\n        Wire.beginTransmission(devAddr);\n        Wire.write((uint8_t) regAddr); // send address\n    #endif\n    for (uint8_t i = 0; i < length; i++) {\n        #if ((I2CDEV_IMPLEMENTATION == I2CDEV_ARDUINO_WIRE && ARDUINO < 100) || I2CDEV_IMPLEMENTATION == I2CDEV_BUILTIN_NBWIRE)\n            Wire.send((uint8_t) data[i]);\n        #elif (I2CDEV_IMPLEMENTATION == I2CDEV_ARDUINO_WIRE && ARDUINO >= 100)\n            Wire.write((uint8_t) data[i]);\n        #elif (I2CDEV_IMPLEMENTATION == I2CDEV_BUILTIN_FASTWIRE)\n            status = Fastwire::write(devAddr, regAddr, data[i]);\n            Serial.println(status);\n        #endif\n        #ifdef I2CDEV_SERIAL_DEBUG\n            Serial.print(data[i], HEX);\n            if (i + 1 < length) Serial.print(\" \");\n        #endif\n    }\n    #if ((I2CDEV_IMPLEMENTATION == I2CDEV_ARDUINO_WIRE && ARDUINO < 100) || I2CDEV_IMPLEMENTATION == I2CDEV_BUILTIN_NBWIRE)\n        Wire.endTransmission();\n    #elif (I2CDEV_IMPLEMENTATION == I2CDEV_ARDUINO_WIRE && ARDUINO >= 100)\n        status = Wire.endTransmission();\n    #endif\n    #ifdef I2CDEV_SERIAL_DEBUG\n        Serial.println(\". Done.\");\n    #endif\n    return status == 0;\n}\n\n/** Write multiple words to a 16-bit device register.\n * @param devAddr I2C slave device address\n * @param regAddr First register address to write to\n * @param length Number of words to write\n * @param data Buffer to copy new data from\n * @return Status of operation (true = success)\n */\nbool I2Cdev::writeWords(uint8_t devAddr, uint8_t regAddr, uint8_t length, uint16_t* data) {\n    #ifdef I2CDEV_SERIAL_DEBUG\n        Serial.print(\"I2C (0x\");\n        Serial.print(devAddr, HEX);\n        Serial.print(\") writing \");\n        Serial.print(length, DEC);\n        Serial.print(\" words to 0x\");\n        Serial.print(regAddr, HEX);\n        Serial.print(\"...\");\n    #endif\n    uint8_t status = 0;\n    #if ((I2CDEV_IMPLEMENTATION == I2CDEV_ARDUINO_WIRE && ARDUINO < 100) || I2CDEV_IMPLEMENTATION == I2CDEV_BUILTIN_NBWIRE)\n        Wire.beginTransmission(devAddr);\n        Wire.send(regAddr); // send address\n    #elif (I2CDEV_IMPLEMENTATION == I2CDEV_ARDUINO_WIRE && ARDUINO >= 100)\n        Wire.beginTransmission(devAddr);\n        Wire.write(regAddr); // send address\n    #endif\n    for (uint8_t i = 0; i < length * 2; i++) {\n        #if ((I2CDEV_IMPLEMENTATION == I2CDEV_ARDUINO_WIRE && ARDUINO < 100) || I2CDEV_IMPLEMENTATION == I2CDEV_BUILTIN_NBWIRE)\n            Wire.send((uint8_t)(data[i++] >> 8)); // send MSB\n            Wire.send((uint8_t)data[i]);          // send LSB\n        #elif (I2CDEV_IMPLEMENTATION == I2CDEV_ARDUINO_WIRE && ARDUINO >= 100)\n            Wire.write((uint8_t)(data[i++] >> 8)); // send MSB\n            Wire.write((uint8_t)data[i]);          // send LSB\n        #elif (I2CDEV_IMPLEMENTATION == I2CDEV_BUILTIN_FASTWIRE)\n            status = Fastwire::write(devAddr, regAddr, (uint8_t)(data[i++] >> 8));\n            status = Fastwire::write(devAddr, regAddr + 1, (uint8_t)data[i]);\n        #endif\n        #ifdef I2CDEV_SERIAL_DEBUG\n            Serial.print(data[i], HEX);\n            if (i + 1 < length) Serial.print(\" \");\n        #endif\n    }\n    #if ((I2CDEV_IMPLEMENTATION == I2CDEV_ARDUINO_WIRE && ARDUINO < 100) || I2CDEV_IMPLEMENTATION == I2CDEV_BUILTIN_NBWIRE)\n        Wire.endTransmission();\n    #elif (I2CDEV_IMPLEMENTATION == I2CDEV_ARDUINO_WIRE && ARDUINO >= 100)\n        status = Wire.endTransmission();\n    #endif\n    #ifdef I2CDEV_SERIAL_DEBUG\n        Serial.println(\". Done.\");\n    #endif\n    return status == 0;\n}\n\n/** Default timeout value for read operations.\n * Set this to 0 to disable timeout detection.\n */\nuint16_t I2Cdev::readTimeout = I2CDEV_DEFAULT_READ_TIMEOUT;\n\n#if I2CDEV_IMPLEMENTATION == I2CDEV_BUILTIN_FASTWIRE\n    /*\n    FastWire 0.2\n    This is a library to help faster programs to read I2C devices.\n    Copyright(C) 2011 Francesco Ferrara\n    occhiobello at gmail dot com\n    */\n\n    boolean Fastwire::waitInt() {\n        int l = 250;\n        while (!(TWCR & (1 << TWINT)) && l-- > 0);\n        return l > 0;\n    }\n\n    void Fastwire::setup(int khz, boolean pullup) {\n        TWCR = 0;\n        #if defined(__AVR_ATmega168__) || defined(__AVR_ATmega8__) || defined(__AVR_ATmega328P__)\n            // activate internal pull-ups for twi (PORTC bits 4 & 5)\n            // as per note from atmega8 manual pg167\n            if (pullup) PORTC |= ((1 << 4) | (1 << 5));\n            else        PORTC &= ~((1 << 4) | (1 << 5));\n        #elif defined(__AVR_ATmega644P__) || defined(__AVR_ATmega644__)\n            // activate internal pull-ups for twi (PORTC bits 0 & 1)\n            if (pullup) PORTC |= ((1 << 0) | (1 << 1));\n            else        PORTC &= ~((1 << 0) | (1 << 1));\n        #else\n            // activate internal pull-ups for twi (PORTD bits 0 & 1)\n            // as per note from atmega128 manual pg204\n            if (pullup) PORTD |= ((1 << 0) | (1 << 1));\n            else        PORTD &= ~((1 << 0) | (1 << 1));\n        #endif\n\n        TWSR = 0; // no prescaler => prescaler = 1\n        TWBR = ((16000L / khz) - 16) / 2; // change the I2C clock rate\n        TWCR = 1 << TWEN; // enable twi module, no interrupt\n    }\n\n    byte Fastwire::write(byte device, byte address, byte value) {\n        byte twst, retry;\n\n        retry = 2;\n        do {\n            TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWSTO) | (1 << TWSTA);\n            if (!waitInt()) return 1;\n            twst = TWSR & 0xF8;\n            if (twst != TW_START && twst != TW_REP_START) return 2;\n\n            TWDR = device & 0xFE; // send device address without read bit (1)\n            TWCR = (1 << TWINT) | (1 << TWEN);\n            if (!waitInt()) return 3;\n            twst = TWSR & 0xF8;\n        } while (twst == TW_MT_SLA_NACK && retry-- > 0);\n        if (twst != TW_MT_SLA_ACK) return 4;\n\n        TWDR = address; // send data to the previously addressed device\n        TWCR = (1 << TWINT) | (1 << TWEN);\n        if (!waitInt()) return 5;\n        twst = TWSR & 0xF8;\n        if (twst != TW_MT_DATA_ACK) return 6;\n\n        TWDR = value; // send data to the previously addressed device\n        TWCR = (1 << TWINT) | (1 << TWEN);\n        if (!waitInt()) return 7;\n        twst = TWSR & 0xF8;\n        if (twst != TW_MT_DATA_ACK) return 8;\n\n        return 0;\n    }\n\n    byte Fastwire::readBuf(byte device, byte address, byte *data, byte num) {\n        byte twst, retry;\n\n        retry = 2;\n        do {\n            TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWSTO) | (1 << TWSTA);\n            if (!waitInt()) return 16;\n            twst = TWSR & 0xF8;\n            if (twst != TW_START && twst != TW_REP_START) return 17;\n\n            TWDR = device & 0xfe; // send device address to write\n            TWCR = (1 << TWINT) | (1 << TWEN);\n            if (!waitInt()) return 18;\n            twst = TWSR & 0xF8;\n        } while (twst == TW_MT_SLA_NACK && retry-- > 0);\n        if (twst != TW_MT_SLA_ACK) return 19;\n\n        TWDR = address; // send data to the previously addressed device\n        TWCR = (1 << TWINT) | (1 << TWEN);\n        if (!waitInt()) return 20;\n        twst = TWSR & 0xF8;\n        if (twst != TW_MT_DATA_ACK) return 21;\n\n        /***/\n\n        retry = 2;\n        do {\n            TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWSTO) | (1 << TWSTA);\n            if (!waitInt()) return 22;\n            twst = TWSR & 0xF8;\n            if (twst != TW_START && twst != TW_REP_START) return 23;\n\n            TWDR = device | 0x01; // send device address with the read bit (1)\n            TWCR = (1 << TWINT) | (1 << TWEN);\n            if (!waitInt()) return 24;\n            twst = TWSR & 0xF8;\n        } while (twst == TW_MR_SLA_NACK && retry-- > 0);\n        if (twst != TW_MR_SLA_ACK) return 25;\n\n        for(uint8_t i = 0; i < num; i++) {\n            if (i == num - 1)\n               TWCR = (1 << TWINT) | (1 << TWEN);\n            else\n                TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWEA);\n            if (!waitInt()) return 26;\n            twst = TWSR & 0xF8;\n            if (twst != TW_MR_DATA_ACK && twst != TW_MR_DATA_NACK) return twst;\n            data[i] = TWDR;\n        }\n\n        return 0;\n   }\n#endif\n\n#if I2CDEV_IMPLEMENTATION == I2CDEV_BUILTIN_NBWIRE\n    // NBWire implementation based heavily on code by Gene Knight <Gene@Telobot.com>\n    // Originally posted on the Arduino forum at http://arduino.cc/forum/index.php/topic,70705.0.html\n    // Originally offered to the i2cdevlib project at http://arduino.cc/forum/index.php/topic,68210.30.html\n\n    /*\n    call this version 1.0\n    \n    Offhand, the only funky part that I can think of is in nbrequestFrom, where the buffer\n    length and index are set *before* the data is actually read. The problem is that these\n    are variables local to the TwoWire object, and by the time we actually have read the\n    data, and know what the length actually is, we have no simple access to the object's \n    variables. The actual bytes read *is* given to the callback function, though.\n    \n    The ISR code for a slave receiver is commented out. I don't have that setup, and can't\n    verify it at this time. Save it for 2.0!\n    \n    The handling of the read and write processes here is much like in the demo sketch code: \n    the process is broken down into sequential functions, where each registers the next as a\n    callback, essentially.\n    \n    For example, for the Read process, twi_read00 just returns if TWI is not yet in a \n    ready state. When there's another interrupt, and the interface *is* ready, then it\n    sets up the read, starts it, and registers twi_read01 as the function to call after\n    the *next* interrupt. twi_read01, then, just returns if the interface is still in a\n    \"reading\" state. When the reading is done, it copies the information to the buffer,\n    cleans up, and calls the user-requested callback function with the actual number of \n    bytes read.\n    \n    The writing is similar.\n    \n    Questions, comments and problems can go to Gene@Telobot.com.\n    \n    Thumbs Up!\n    Gene Knight\n    \n    */\n    \n    uint8_t TwoWire::rxBuffer[NBWIRE_BUFFER_LENGTH];\n    uint8_t TwoWire::rxBufferIndex = 0;\n    uint8_t TwoWire::rxBufferLength = 0;\n    \n    uint8_t TwoWire::txAddress = 0;\n    uint8_t TwoWire::txBuffer[NBWIRE_BUFFER_LENGTH];\n    uint8_t TwoWire::txBufferIndex = 0;\n    uint8_t TwoWire::txBufferLength = 0;\n    \n    //uint8_t TwoWire::transmitting = 0;\n    void (*TwoWire::user_onRequest)(void);\n    void (*TwoWire::user_onReceive)(int);\n    \n    static volatile uint8_t twi_transmitting;\n    static volatile uint8_t twi_state;\n    static uint8_t twi_slarw;\n    static volatile uint8_t twi_error;\n    static uint8_t twi_masterBuffer[TWI_BUFFER_LENGTH];\n    static volatile uint8_t twi_masterBufferIndex;\n    static uint8_t twi_masterBufferLength;\n    static uint8_t twi_rxBuffer[TWI_BUFFER_LENGTH];\n    static volatile uint8_t twi_rxBufferIndex;\n    //static volatile uint8_t twi_Interrupt_Continue_Command;\n    static volatile uint8_t twi_Return_Value;\n    static volatile uint8_t twi_Done;\n    void (*twi_cbendTransmissionDone)(int);\n    void (*twi_cbreadFromDone)(int);\n    \n    void twi_init() {\n        // initialize state\n        twi_state = TWI_READY;\n\n        // activate internal pull-ups for twi\n        // as per note from atmega8 manual pg167\n        sbi(PORTC, 4);\n        sbi(PORTC, 5);\n\n        // initialize twi prescaler and bit rate\n        cbi(TWSR, TWPS0); // TWI Status Register - Prescaler bits\n        cbi(TWSR, TWPS1);\n\n        /* twi bit rate formula from atmega128 manual pg 204\n        SCL Frequency = CPU Clock Frequency / (16 + (2 * TWBR))\n        note: TWBR should be 10 or higher for master mode\n        It is 72 for a 16mhz Wiring board with 100kHz TWI */\n\n        TWBR = ((CPU_FREQ / TWI_FREQ) - 16) / 2; // bitrate register\n        // enable twi module, acks, and twi interrupt\n\n        TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA);\n\n        /* TWEN - TWI Enable Bit\n        TWIE - TWI Interrupt Enable\n        TWEA - TWI Enable Acknowledge Bit\n        TWINT - TWI Interrupt Flag\n        TWSTA - TWI Start Condition\n        */\n    }\n    \n    typedef struct {\n        uint8_t address;\n        uint8_t* data;\n        uint8_t length;\n        uint8_t wait;\n        uint8_t i;\n    } twi_Write_Vars;\n\n    twi_Write_Vars *ptwv = 0;\n    static void (*fNextInterruptFunction)(void) = 0;\n    \n    void twi_Finish(byte bRetVal) {\n        if (ptwv) {\n            free(ptwv);\n            ptwv = 0;\n        }\n        twi_Done = 0xFF;\n        twi_Return_Value = bRetVal;\n        fNextInterruptFunction = 0;\n    }\n    \n    uint8_t twii_WaitForDone(uint16_t timeout) {\n        uint32_t endMillis = millis() + timeout;\n        while (!twi_Done && (timeout == 0 || millis() < endMillis)) continue;\n        return twi_Return_Value;\n    }\n    \n    void twii_SetState(uint8_t ucState) {\n        twi_state = ucState;\n    }\n\n    void twii_SetError(uint8_t ucError) {\n        twi_error = ucError ;\n    }\n\n    void twii_InitBuffer(uint8_t ucPos, uint8_t ucLength) {\n        twi_masterBufferIndex = 0;\n        twi_masterBufferLength = ucLength;\n    }\n\n    void twii_CopyToBuf(uint8_t* pData, uint8_t ucLength) {\n        uint8_t i;\n        for (i = 0; i < ucLength; ++i) {\n            twi_masterBuffer[i] = pData[i];\n        }\n    }\n\n    void twii_CopyFromBuf(uint8_t *pData, uint8_t ucLength) {\n        uint8_t i;\n        for (i = 0; i < ucLength; ++i) {\n            pData[i] = twi_masterBuffer[i];\n        }\n    }\n\n    void twii_SetSlaRW(uint8_t ucSlaRW) {\n        twi_slarw = ucSlaRW;\n    }\n\n    void twii_SetStart() {\n        TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTA);\n    }\n\n    void twi_write01() {\n        if (TWI_MTX == twi_state) return; // blocking test\n        twi_transmitting = 0 ;\n        if (twi_error == 0xFF)\n            twi_Finish (0);    // success\n        else if (twi_error == TW_MT_SLA_NACK)\n            twi_Finish (2);    // error: address send, nack received\n        else if (twi_error == TW_MT_DATA_NACK)\n            twi_Finish (3);    // error: data send, nack received\n        else\n            twi_Finish (4);    // other twi error\n        if (twi_cbendTransmissionDone) return twi_cbendTransmissionDone(twi_Return_Value);\n        return;\n    }\n    \n    \n    void twi_write00() {\n        if (TWI_READY != twi_state) return; // blocking test\n        if (TWI_BUFFER_LENGTH < ptwv -> length) {\n            twi_Finish(1); // end write with error 1\n            return;\n        }\n        twi_Done = 0x00; // show as working\n        twii_SetState(TWI_MTX); // to transmitting\n        twii_SetError(0xFF); // to No Error\n        twii_InitBuffer(0, ptwv -> length); // pointer and length\n        twii_CopyToBuf(ptwv -> data, ptwv -> length); // get the data\n        twii_SetSlaRW((ptwv -> address << 1) | TW_WRITE); // write command\n        twii_SetStart(); // start the cycle\n        fNextInterruptFunction = twi_write01; // next routine\n        return twi_write01();\n    }\n    \n    void twi_writeTo(uint8_t address, uint8_t* data, uint8_t length, uint8_t wait) {\n        uint8_t i;\n        ptwv = (twi_Write_Vars *)malloc(sizeof(twi_Write_Vars));\n        ptwv -> address = address;\n        ptwv -> data = data;\n        ptwv -> length = length;\n        ptwv -> wait = wait;\n        fNextInterruptFunction = twi_write00;\n        return twi_write00();\n    }\n\n    void twi_read01() {\n        if (TWI_MRX == twi_state) return; // blocking test\n        if (twi_masterBufferIndex < ptwv -> length) ptwv -> length = twi_masterBufferIndex;\n        twii_CopyFromBuf(ptwv -> data, ptwv -> length);\n        twi_Finish(ptwv -> length);\n        if (twi_cbreadFromDone) return twi_cbreadFromDone(twi_Return_Value);\n        return;\n    }\n    \n    void twi_read00() {\n        if (TWI_READY != twi_state) return; // blocking test\n        if (TWI_BUFFER_LENGTH < ptwv -> length) twi_Finish(0); // error return\n        twi_Done = 0x00; // show as working\n        twii_SetState(TWI_MRX); // reading\n        twii_SetError(0xFF); // reset error\n        twii_InitBuffer(0, ptwv -> length - 1); // init to one less than length\n        twii_SetSlaRW((ptwv -> address << 1) | TW_READ); // read command\n        twii_SetStart(); // start cycle\n        fNextInterruptFunction = twi_read01;\n        return twi_read01();\n    }\n\n    void twi_readFrom(uint8_t address, uint8_t* data, uint8_t length) {\n        uint8_t i;\n\n        ptwv = (twi_Write_Vars *)malloc(sizeof(twi_Write_Vars));\n        ptwv -> address = address;\n        ptwv -> data = data;\n        ptwv -> length = length;\n        fNextInterruptFunction = twi_read00;\n        return twi_read00();\n    }\n\n    void twi_reply(uint8_t ack) {\n        // transmit master read ready signal, with or without ack\n        if (ack){\n            TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);\n        } else {\n            TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);\n        }\n    }\n    \n    void twi_stop(void) {\n        // send stop condition\n        TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);\n    \n        // wait for stop condition to be exectued on bus\n        // TWINT is not set after a stop condition!\n        while (TWCR & _BV(TWSTO)) {\n            continue;\n        }\n    \n        // update twi state\n        twi_state = TWI_READY;\n    }\n\n    void twi_releaseBus(void) {\n        // release bus\n        TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT);\n    \n        // update twi state\n        twi_state = TWI_READY;\n    }\n    \n    SIGNAL(TWI_vect) {\n        switch (TW_STATUS) {\n            // All Master\n            case TW_START:     // sent start condition\n            case TW_REP_START: // sent repeated start condition\n                // copy device address and r/w bit to output register and ack\n                TWDR = twi_slarw;\n                twi_reply(1);\n                break;\n    \n            // Master Transmitter\n            case TW_MT_SLA_ACK:  // slave receiver acked address\n            case TW_MT_DATA_ACK: // slave receiver acked data\n                // if there is data to send, send it, otherwise stop\n                if (twi_masterBufferIndex < twi_masterBufferLength) {\n                    // copy data to output register and ack\n                    TWDR = twi_masterBuffer[twi_masterBufferIndex++];\n                    twi_reply(1);\n                } else {\n                    twi_stop();\n                }\n                break;\n\n            case TW_MT_SLA_NACK:  // address sent, nack received\n                twi_error = TW_MT_SLA_NACK;\n                twi_stop();\n                break;\n\n            case TW_MT_DATA_NACK: // data sent, nack received\n                twi_error = TW_MT_DATA_NACK;\n                twi_stop();\n                break;\n\n            case TW_MT_ARB_LOST: // lost bus arbitration\n                twi_error = TW_MT_ARB_LOST;\n                twi_releaseBus();\n                break;\n    \n            // Master Receiver\n            case TW_MR_DATA_ACK: // data received, ack sent\n                // put byte into buffer\n                twi_masterBuffer[twi_masterBufferIndex++] = TWDR;\n\n            case TW_MR_SLA_ACK:  // address sent, ack received\n                // ack if more bytes are expected, otherwise nack\n                if (twi_masterBufferIndex < twi_masterBufferLength) {\n                    twi_reply(1);\n                } else {\n                    twi_reply(0);\n                }\n                break;\n\n            case TW_MR_DATA_NACK: // data received, nack sent\n                // put final byte into buffer\n                twi_masterBuffer[twi_masterBufferIndex++] = TWDR;\n\n            case TW_MR_SLA_NACK: // address sent, nack received\n                twi_stop();\n                break;\n\n        // TW_MR_ARB_LOST handled by TW_MT_ARB_LOST case\n\n        // Slave Receiver (NOT IMPLEMENTED YET)\n        /*\n            case TW_SR_SLA_ACK:   // addressed, returned ack\n            case TW_SR_GCALL_ACK: // addressed generally, returned ack\n            case TW_SR_ARB_LOST_SLA_ACK:   // lost arbitration, returned ack\n            case TW_SR_ARB_LOST_GCALL_ACK: // lost arbitration, returned ack\n                // enter slave receiver mode\n                twi_state = TWI_SRX;\n\n                // indicate that rx buffer can be overwritten and ack\n                twi_rxBufferIndex = 0;\n                twi_reply(1);\n                break;\n\n            case TW_SR_DATA_ACK:       // data received, returned ack\n            case TW_SR_GCALL_DATA_ACK: // data received generally, returned ack\n                // if there is still room in the rx buffer\n                if (twi_rxBufferIndex < TWI_BUFFER_LENGTH) {\n                    // put byte in buffer and ack\n                    twi_rxBuffer[twi_rxBufferIndex++] = TWDR;\n                    twi_reply(1);\n                } else {\n                    // otherwise nack\n                    twi_reply(0);\n                }\n                break;\n\n            case TW_SR_STOP: // stop or repeated start condition received\n                // put a null char after data if there's room\n                if (twi_rxBufferIndex < TWI_BUFFER_LENGTH) {\n                    twi_rxBuffer[twi_rxBufferIndex] = 0;\n                }\n\n                // sends ack and stops interface for clock stretching\n                twi_stop();\n\n                // callback to user defined callback\n                twi_onSlaveReceive(twi_rxBuffer, twi_rxBufferIndex);\n\n                // since we submit rx buffer to \"wire\" library, we can reset it\n                twi_rxBufferIndex = 0;\n\n                // ack future responses and leave slave receiver state\n                twi_releaseBus();\n                break;\n\n            case TW_SR_DATA_NACK:       // data received, returned nack\n            case TW_SR_GCALL_DATA_NACK: // data received generally, returned nack\n                // nack back at master\n                twi_reply(0);\n                break;\n\n            // Slave Transmitter\n            case TW_ST_SLA_ACK:          // addressed, returned ack\n            case TW_ST_ARB_LOST_SLA_ACK: // arbitration lost, returned ack\n                // enter slave transmitter mode\n                twi_state = TWI_STX;\n\n                // ready the tx buffer index for iteration\n                twi_txBufferIndex = 0;\n\n                // set tx buffer length to be zero, to verify if user changes it\n                twi_txBufferLength = 0;\n\n                // request for txBuffer to be filled and length to be set\n                // note: user must call twi_transmit(bytes, length) to do this\n                twi_onSlaveTransmit();\n\n                // if they didn't change buffer & length, initialize it\n                if (0 == twi_txBufferLength) {\n                    twi_txBufferLength = 1;\n                    twi_txBuffer[0] = 0x00;\n                }\n                \n                // transmit first byte from buffer, fall through\n\n            case TW_ST_DATA_ACK: // byte sent, ack returned\n                // copy data to output register\n                TWDR = twi_txBuffer[twi_txBufferIndex++];\n\n                // if there is more to send, ack, otherwise nack\n                if (twi_txBufferIndex < twi_txBufferLength) {\n                    twi_reply(1);\n                } else {\n                    twi_reply(0);\n                }\n                break;\n\n            case TW_ST_DATA_NACK: // received nack, we are done\n            case TW_ST_LAST_DATA: // received ack, but we are done already!\n                // ack future responses\n                twi_reply(1);\n                // leave slave receiver state\n                twi_state = TWI_READY;\n                break;\n            */\n\n            // all\n            case TW_NO_INFO:   // no state information\n                break;\n\n            case TW_BUS_ERROR: // bus error, illegal stop/start\n                twi_error = TW_BUS_ERROR;\n                twi_stop();\n                break;\n        }\n\n        if (fNextInterruptFunction) return fNextInterruptFunction();\n    }\n\n    TwoWire::TwoWire() { }\n    \n    void TwoWire::begin(void) {\n        rxBufferIndex = 0;\n        rxBufferLength = 0;\n    \n        txBufferIndex = 0;\n        txBufferLength = 0;\n\n        twi_init();\n    }\n    \n    void TwoWire::beginTransmission(uint8_t address) {\n        //beginTransmission((uint8_t)address);\n\n        // indicate that we are transmitting\n        twi_transmitting = 1;\n        \n        // set address of targeted slave\n        txAddress = address;\n        \n        // reset tx buffer iterator vars\n        txBufferIndex = 0;\n        txBufferLength = 0;\n    }\n    \n    uint8_t TwoWire::endTransmission(uint16_t timeout) {\n        // transmit buffer (blocking)\n        //int8_t ret =\n        twi_cbendTransmissionDone = NULL;\n        twi_writeTo(txAddress, txBuffer, txBufferLength, 1);\n        int8_t ret = twii_WaitForDone(timeout);\n\n        // reset tx buffer iterator vars\n        txBufferIndex = 0;\n        txBufferLength = 0;\n\n        // indicate that we are done transmitting\n        // twi_transmitting = 0;\n        return ret;\n    }\n\n    void TwoWire::nbendTransmission(void (*function)(int)) {\n        twi_cbendTransmissionDone = function;\n        twi_writeTo(txAddress, txBuffer, txBufferLength, 1);\n        return;\n    }\n    \n    void TwoWire::send(uint8_t data) {\n        if (twi_transmitting) {\n            // in master transmitter mode\n            // don't bother if buffer is full\n            if (txBufferLength >= NBWIRE_BUFFER_LENGTH) {\n                return;\n            }\n\n            // put byte in tx buffer\n            txBuffer[txBufferIndex] = data;\n            ++txBufferIndex;\n\n            // update amount in buffer\n            txBufferLength = txBufferIndex;\n        } else {\n            // in slave send mode\n            // reply to master\n            //twi_transmit(&data, 1);\n        }\n    }\n    \n    uint8_t TwoWire::receive(void) {\n        // default to returning null char\n        // for people using with char strings\n        uint8_t value = 0;\n      \n        // get each successive byte on each call\n        if (rxBufferIndex < rxBufferLength) {\n            value = rxBuffer[rxBufferIndex];\n            ++rxBufferIndex;\n        }\n    \n        return value;\n    }\n    \n    uint8_t TwoWire::requestFrom(uint8_t address, int quantity, uint16_t timeout) {\n        // clamp to buffer length\n        if (quantity > NBWIRE_BUFFER_LENGTH) {\n            quantity = NBWIRE_BUFFER_LENGTH;\n        }\n\n        // perform blocking read into buffer\n        twi_cbreadFromDone = NULL;\n        twi_readFrom(address, rxBuffer, quantity);\n        uint8_t read = twii_WaitForDone(timeout);\n\n        // set rx buffer iterator vars\n        rxBufferIndex = 0;\n        rxBufferLength = read;\n    \n        return read;\n    }\n    \n    void TwoWire::nbrequestFrom(uint8_t address, int quantity, void (*function)(int)) {\n        // clamp to buffer length\n        if (quantity > NBWIRE_BUFFER_LENGTH) {\n            quantity = NBWIRE_BUFFER_LENGTH;\n        }\n\n        // perform blocking read into buffer\n        twi_cbreadFromDone = function;\n        twi_readFrom(address, rxBuffer, quantity);\n        //uint8_t read = twii_WaitForDone();\n\n        // set rx buffer iterator vars\n        //rxBufferIndex = 0;\n        //rxBufferLength = read;\n\n        rxBufferIndex = 0;\n        rxBufferLength = quantity; // this is a hack\n\n        return; //read;\n    }\n\n    uint8_t TwoWire::available(void) {\n        return rxBufferLength - rxBufferIndex;\n    }\n\n#endif\n"},{"name":"MPU6050.cpp","type":"source","group":"legacy","path":"C:\\Users\\Jasminis\\OneDrive\\R7003E\\Viktor\\LAB_B\\LabB_TuneTheGyro_ert_rtw\\..\\..\\..\\..\\..\\Documents\\MATLAB\\RASPlib\\src","tag":"","groupDisplay":"Other files","code":"// I2Cdev library collection - MPU6050 I2C device class\n// Based on InvenSense MPU-6050 register map document rev. 2.0, 5/19/2011 (RM-MPU-6000A-00)\n// 8/24/2011 by Jeff Rowberg <jeff@rowberg.net>\n// Updates should (hopefully) always be available at https://github.com/jrowberg/i2cdevlib\n//\n// Changelog:\n//     ... - ongoing debug release\n\n// NOTE: THIS IS ONLY A PARIAL RELEASE. THIS DEVICE CLASS IS CURRENTLY UNDERGOING ACTIVE\n// DEVELOPMENT AND IS STILL MISSING SOME IMPORTANT FEATURES. PLEASE KEEP THIS IN MIND IF\n// YOU DECIDE TO USE THIS PARTICULAR CODE FOR ANYTHING.\n\n/* ============================================\nI2Cdev device library code is placed under the MIT license\nCopyright (c) 2012 Jeff Rowberg\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n===============================================\n*/\n\n#include \"MPU6050.h\"\n\n/** Default constructor, uses default I2C address.\n * @see MPU6050_DEFAULT_ADDRESS\n */\nMPU6050::MPU6050() {\n    devAddr = MPU6050_DEFAULT_ADDRESS;\n}\n\n/** Specific address constructor.\n * @param address I2C address\n * @see MPU6050_DEFAULT_ADDRESS\n * @see MPU6050_ADDRESS_AD0_LOW\n * @see MPU6050_ADDRESS_AD0_HIGH\n */\nMPU6050::MPU6050(uint8_t address) {\n    devAddr = address;\n}\n\n/** Power on and prepare for general usage.\n * This will activate the device and take it out of sleep mode (which must be done\n * after start-up). This function also sets both the accelerometer and the gyroscope\n * to their most sensitive settings, namely +/- 2g and +/- 250 degrees/sec, and sets\n * the clock source to use the X Gyro for reference, which is slightly better than\n * the default internal clock source.\n */\nvoid MPU6050::initialize() {\n    setClockSource(MPU6050_CLOCK_PLL_XGYRO);\n    setFullScaleGyroRange(MPU6050_GYRO_FS_250); // JLH MPU6050_GYRO_FS_2000  MPU6050_GYRO_FS_250\n    setFullScaleAccelRange(MPU6050_ACCEL_FS_2);\n    setSleepEnabled(false); // thanks to Jack Elston for pointing this one out!\n}\n\n/** Verify the I2C connection.\n * Make sure the device is connected and responds as expected.\n * @return True if connection is valid, false otherwise\n */\nbool MPU6050::testConnection() {\n    return getDeviceID() == 0x34;\n}\n\n// AUX_VDDIO register (InvenSense demo code calls this RA_*G_OFFS_TC)\n\n/** Get the auxiliary I2C supply voltage level.\n * When set to 1, the auxiliary I2C bus high logic level is VDD. When cleared to\n * 0, the auxiliary I2C bus high logic level is VLOGIC. This does not apply to\n * the MPU-6000, which does not have a VLOGIC pin.\n * @return I2C supply voltage level (0=VLOGIC, 1=VDD)\n */\nuint8_t MPU6050::getAuxVDDIOLevel() {\n    I2Cdev::readBit(devAddr, MPU6050_RA_YG_OFFS_TC, MPU6050_TC_PWR_MODE_BIT, buffer);\n    return buffer[0];\n}\n/** Set the auxiliary I2C supply voltage level.\n * When set to 1, the auxiliary I2C bus high logic level is VDD. When cleared to\n * 0, the auxiliary I2C bus high logic level is VLOGIC. This does not apply to\n * the MPU-6000, which does not have a VLOGIC pin.\n * @param level I2C supply voltage level (0=VLOGIC, 1=VDD)\n */\nvoid MPU6050::setAuxVDDIOLevel(uint8_t level) {\n    I2Cdev::writeBit(devAddr, MPU6050_RA_YG_OFFS_TC, MPU6050_TC_PWR_MODE_BIT, level);\n}\n\n// SMPLRT_DIV register\n\n/** Get gyroscope output rate divider.\n * The sensor register output, FIFO output, DMP sampling, Motion detection, Zero\n * Motion detection, and Free Fall detection are all based on the Sample Rate.\n * The Sample Rate is generated by dividing the gyroscope output rate by\n * SMPLRT_DIV:\n *\n * Sample Rate = Gyroscope Output Rate / (1 + SMPLRT_DIV)\n *\n * where Gyroscope Output Rate = 8kHz when the DLPF is disabled (DLPF_CFG = 0 or\n * 7), and 1kHz when the DLPF is enabled (see Register 26).\n *\n * Note: The accelerometer output rate is 1kHz. This means that for a Sample\n * Rate greater than 1kHz, the same accelerometer sample may be output to the\n * FIFO, DMP, and sensor registers more than once.\n *\n * For a diagram of the gyroscope and accelerometer signal paths, see Section 8\n * of the MPU-6000/MPU-6050 Product Specification document.\n *\n * @return Current sample rate\n * @see MPU6050_RA_SMPLRT_DIV\n */\nuint8_t MPU6050::getRate() {\n    I2Cdev::readByte(devAddr, MPU6050_RA_SMPLRT_DIV, buffer);\n    return buffer[0];\n}\n/** Set gyroscope sample rate divider.\n * @param rate New sample rate divider\n * @see getRate()\n * @see MPU6050_RA_SMPLRT_DIV\n */\nvoid MPU6050::setRate(uint8_t rate) {\n    I2Cdev::writeByte(devAddr, MPU6050_RA_SMPLRT_DIV, rate);\n}\n\n// CONFIG register\n\n/** Get external FSYNC configuration.\n * Configures the external Frame Synchronization (FSYNC) pin sampling. An\n * external signal connected to the FSYNC pin can be sampled by configuring\n * EXT_SYNC_SET. Signal changes to the FSYNC pin are latched so that short\n * strobes may be captured. The latched FSYNC signal will be sampled at the\n * Sampling Rate, as defined in register 25. After sampling, the latch will\n * reset to the current FSYNC signal state.\n *\n * The sampled value will be reported in place of the least significant bit in\n * a sensor data register determined by the value of EXT_SYNC_SET according to\n * the following table.\n *\n * <pre>\n * EXT_SYNC_SET | FSYNC Bit Location\n * -------------+-------------------\n * 0            | Input disabled\n * 1            | TEMP_OUT_L[0]\n * 2            | GYRO_XOUT_L[0]\n * 3            | GYRO_YOUT_L[0]\n * 4            | GYRO_ZOUT_L[0]\n * 5            | ACCEL_XOUT_L[0]\n * 6            | ACCEL_YOUT_L[0]\n * 7            | ACCEL_ZOUT_L[0]\n * </pre>\n *\n * @return FSYNC configuration value\n */\nuint8_t MPU6050::getExternalFrameSync() {\n    I2Cdev::readBits(devAddr, MPU6050_RA_CONFIG, MPU6050_CFG_EXT_SYNC_SET_BIT, MPU6050_CFG_EXT_SYNC_SET_LENGTH, buffer);\n    return buffer[0];\n}\n/** Set external FSYNC configuration.\n * @see getExternalFrameSync()\n * @see MPU6050_RA_CONFIG\n * @param sync New FSYNC configuration value\n */\nvoid MPU6050::setExternalFrameSync(uint8_t sync) {\n    I2Cdev::writeBits(devAddr, MPU6050_RA_CONFIG, MPU6050_CFG_EXT_SYNC_SET_BIT, MPU6050_CFG_EXT_SYNC_SET_LENGTH, sync);\n}\n/** Get digital low-pass filter configuration.\n * The DLPF_CFG parameter sets the digital low pass filter configuration. It\n * also determines the internal sampling rate used by the device as shown in\n * the table below.\n *\n * Note: The accelerometer output rate is 1kHz. This means that for a Sample\n * Rate greater than 1kHz, the same accelerometer sample may be output to the\n * FIFO, DMP, and sensor registers more than once.\n *\n * <pre>\n *          |   ACCELEROMETER    |           GYROSCOPE\n * DLPF_CFG | Bandwidth | Delay  | Bandwidth | Delay  | Sample Rate\n * ---------+-----------+--------+-----------+--------+-------------\n * 0        | 260Hz     | 0ms    | 256Hz     | 0.98ms | 8kHz\n * 1        | 184Hz     | 2.0ms  | 188Hz     | 1.9ms  | 1kHz\n * 2        | 94Hz      | 3.0ms  | 98Hz      | 2.8ms  | 1kHz\n * 3        | 44Hz      | 4.9ms  | 42Hz      | 4.8ms  | 1kHz\n * 4        | 21Hz      | 8.5ms  | 20Hz      | 8.3ms  | 1kHz\n * 5        | 10Hz      | 13.8ms | 10Hz      | 13.4ms | 1kHz\n * 6        | 5Hz       | 19.0ms | 5Hz       | 18.6ms | 1kHz\n * 7        |   -- Reserved --   |   -- Reserved --   | Reserved\n * </pre>\n *\n * @return DLFP configuration\n * @see MPU6050_RA_CONFIG\n * @see MPU6050_CFG_DLPF_CFG_BIT\n * @see MPU6050_CFG_DLPF_CFG_LENGTH\n */\nuint8_t MPU6050::getDLPFMode() {\n    I2Cdev::readBits(devAddr, MPU6050_RA_CONFIG, MPU6050_CFG_DLPF_CFG_BIT, MPU6050_CFG_DLPF_CFG_LENGTH, buffer);\n    return buffer[0];\n}\n/** Set digital low-pass filter configuration.\n * @param mode New DLFP configuration setting\n * @see getDLPFBandwidth()\n * @see MPU6050_DLPF_BW_256\n * @see MPU6050_RA_CONFIG\n * @see MPU6050_CFG_DLPF_CFG_BIT\n * @see MPU6050_CFG_DLPF_CFG_LENGTH\n */\nvoid MPU6050::setDLPFMode(uint8_t mode) {\n    I2Cdev::writeBits(devAddr, MPU6050_RA_CONFIG, MPU6050_CFG_DLPF_CFG_BIT, MPU6050_CFG_DLPF_CFG_LENGTH, mode);\n}\n\n// GYRO_CONFIG register\n\n/** Get full-scale gyroscope range.\n * The FS_SEL parameter allows setting the full-scale range of the gyro sensors,\n * as described in the table below.\n *\n * <pre>\n * 0 = +/- 250 degrees/sec\n * 1 = +/- 500 degrees/sec\n * 2 = +/- 1000 degrees/sec\n * 3 = +/- 2000 degrees/sec\n * </pre>\n *\n * @return Current full-scale gyroscope range setting\n * @see MPU6050_GYRO_FS_250\n * @see MPU6050_RA_GYRO_CONFIG\n * @see MPU6050_GCONFIG_FS_SEL_BIT\n * @see MPU6050_GCONFIG_FS_SEL_LENGTH\n */\nuint8_t MPU6050::getFullScaleGyroRange() {\n    I2Cdev::readBits(devAddr, MPU6050_RA_GYRO_CONFIG, MPU6050_GCONFIG_FS_SEL_BIT, MPU6050_GCONFIG_FS_SEL_LENGTH, buffer);\n    return buffer[0];\n}\n/** Set full-scale gyroscope range.\n * @param range New full-scale gyroscope range value\n * @see getFullScaleRange()\n * @see MPU6050_GYRO_FS_250\n * @see MPU6050_RA_GYRO_CONFIG\n * @see MPU6050_GCONFIG_FS_SEL_BIT\n * @see MPU6050_GCONFIG_FS_SEL_LENGTH\n */\nvoid MPU6050::setFullScaleGyroRange(uint8_t range) {\n    I2Cdev::writeBits(devAddr, MPU6050_RA_GYRO_CONFIG, MPU6050_GCONFIG_FS_SEL_BIT, MPU6050_GCONFIG_FS_SEL_LENGTH, range);\n}\n\n// ACCEL_CONFIG register\n\n/** Get self-test enabled setting for accelerometer X axis.\n * @return Self-test enabled value\n * @see MPU6050_RA_ACCEL_CONFIG\n */\nbool MPU6050::getAccelXSelfTest() {\n    I2Cdev::readBit(devAddr, MPU6050_RA_ACCEL_CONFIG, MPU6050_ACONFIG_XA_ST_BIT, buffer);\n    return buffer[0];\n}\n/** Get self-test enabled setting for accelerometer X axis.\n * @param enabled Self-test enabled value\n * @see MPU6050_RA_ACCEL_CONFIG\n */\nvoid MPU6050::setAccelXSelfTest(bool enabled) {\n    I2Cdev::writeBit(devAddr, MPU6050_RA_ACCEL_CONFIG, MPU6050_ACONFIG_XA_ST_BIT, enabled);\n}\n/** Get self-test enabled value for accelerometer Y axis.\n * @return Self-test enabled value\n * @see MPU6050_RA_ACCEL_CONFIG\n */\nbool MPU6050::getAccelYSelfTest() {\n    I2Cdev::readBit(devAddr, MPU6050_RA_ACCEL_CONFIG, MPU6050_ACONFIG_YA_ST_BIT, buffer);\n    return buffer[0];\n}\n/** Get self-test enabled value for accelerometer Y axis.\n * @param enabled Self-test enabled value\n * @see MPU6050_RA_ACCEL_CONFIG\n */\nvoid MPU6050::setAccelYSelfTest(bool enabled) {\n    I2Cdev::writeBit(devAddr, MPU6050_RA_ACCEL_CONFIG, MPU6050_ACONFIG_YA_ST_BIT, enabled);\n}\n/** Get self-test enabled value for accelerometer Z axis.\n * @return Self-test enabled value\n * @see MPU6050_RA_ACCEL_CONFIG\n */\nbool MPU6050::getAccelZSelfTest() {\n    I2Cdev::readBit(devAddr, MPU6050_RA_ACCEL_CONFIG, MPU6050_ACONFIG_ZA_ST_BIT, buffer);\n    return buffer[0];\n}\n/** Set self-test enabled value for accelerometer Z axis.\n * @param enabled Self-test enabled value\n * @see MPU6050_RA_ACCEL_CONFIG\n */\nvoid MPU6050::setAccelZSelfTest(bool enabled) {\n    I2Cdev::writeBit(devAddr, MPU6050_RA_ACCEL_CONFIG, MPU6050_ACONFIG_ZA_ST_BIT, enabled);\n}\n/** Get full-scale accelerometer range.\n * The FS_SEL parameter allows setting the full-scale range of the accelerometer\n * sensors, as described in the table below.\n *\n * <pre>\n * 0 = +/- 2g\n * 1 = +/- 4g\n * 2 = +/- 8g\n * 3 = +/- 16g\n * </pre>\n *\n * @return Current full-scale accelerometer range setting\n * @see MPU6050_ACCEL_FS_2\n * @see MPU6050_RA_ACCEL_CONFIG\n * @see MPU6050_ACONFIG_AFS_SEL_BIT\n * @see MPU6050_ACONFIG_AFS_SEL_LENGTH\n */\nuint8_t MPU6050::getFullScaleAccelRange() {\n    I2Cdev::readBits(devAddr, MPU6050_RA_ACCEL_CONFIG, MPU6050_ACONFIG_AFS_SEL_BIT, MPU6050_ACONFIG_AFS_SEL_LENGTH, buffer);\n    return buffer[0];\n}\n/** Set full-scale accelerometer range.\n * @param range New full-scale accelerometer range setting\n * @see getFullScaleAccelRange()\n */\nvoid MPU6050::setFullScaleAccelRange(uint8_t range) {\n    I2Cdev::writeBits(devAddr, MPU6050_RA_ACCEL_CONFIG, MPU6050_ACONFIG_AFS_SEL_BIT, MPU6050_ACONFIG_AFS_SEL_LENGTH, range);\n}\n/** Get the high-pass filter configuration.\n * The DHPF is a filter module in the path leading to motion detectors (Free\n * Fall, Motion threshold, and Zero Motion). The high pass filter output is not\n * available to the data registers (see Figure in Section 8 of the MPU-6000/\n * MPU-6050 Product Specification document).\n *\n * The high pass filter has three modes:\n *\n * <pre>\n *    Reset: The filter output settles to zero within one sample. This\n *           effectively disables the high pass filter. This mode may be toggled\n *           to quickly settle the filter.\n *\n *    On:    The high pass filter will pass signals above the cut off frequency.\n *\n *    Hold:  When triggered, the filter holds the present sample. The filter\n *           output will be the difference between the input sample and the held\n *           sample.\n * </pre>\n *\n * <pre>\n * ACCEL_HPF | Filter Mode | Cut-off Frequency\n * ----------+-------------+------------------\n * 0         | Reset       | None\n * 1         | On          | 5Hz\n * 2         | On          | 2.5Hz\n * 3         | On          | 1.25Hz\n * 4         | On          | 0.63Hz\n * 7         | Hold        | None\n * </pre>\n *\n * @return Current high-pass filter configuration\n * @see MPU6050_DHPF_RESET\n * @see MPU6050_RA_ACCEL_CONFIG\n */\nuint8_t MPU6050::getDHPFMode() {\n    I2Cdev::readBits(devAddr, MPU6050_RA_ACCEL_CONFIG, MPU6050_ACONFIG_ACCEL_HPF_BIT, MPU6050_ACONFIG_ACCEL_HPF_LENGTH, buffer);\n    return buffer[0];\n}\n/** Set the high-pass filter configuration.\n * @param bandwidth New high-pass filter configuration\n * @see setDHPFMode()\n * @see MPU6050_DHPF_RESET\n * @see MPU6050_RA_ACCEL_CONFIG\n */\nvoid MPU6050::setDHPFMode(uint8_t bandwidth) {\n    I2Cdev::writeBits(devAddr, MPU6050_RA_ACCEL_CONFIG, MPU6050_ACONFIG_ACCEL_HPF_BIT, MPU6050_ACONFIG_ACCEL_HPF_LENGTH, bandwidth);\n}\n\n// FF_THR register\n\n/** Get free-fall event acceleration threshold.\n * This register configures the detection threshold for Free Fall event\n * detection. The unit of FF_THR is 1LSB = 2mg. Free Fall is detected when the\n * absolute value of the accelerometer measurements for the three axes are each\n * less than the detection threshold. This condition increments the Free Fall\n * duration counter (Register 30). The Free Fall interrupt is triggered when the\n * Free Fall duration counter reaches the time specified in FF_DUR.\n *\n * For more details on the Free Fall detection interrupt, see Section 8.2 of the\n * MPU-6000/MPU-6050 Product Specification document as well as Registers 56 and\n * 58 of this document.\n *\n * @return Current free-fall acceleration threshold value (LSB = 2mg)\n * @see MPU6050_RA_FF_THR\n */\nuint8_t MPU6050::getFreefallDetectionThreshold() {\n    I2Cdev::readByte(devAddr, MPU6050_RA_FF_THR, buffer);\n    return buffer[0];\n}\n/** Get free-fall event acceleration threshold.\n * @param threshold New free-fall acceleration threshold value (LSB = 2mg)\n * @see getFreefallDetectionThreshold()\n * @see MPU6050_RA_FF_THR\n */\nvoid MPU6050::setFreefallDetectionThreshold(uint8_t threshold) {\n    I2Cdev::writeByte(devAddr, MPU6050_RA_FF_THR, threshold);\n}\n\n// FF_DUR register\n\n/** Get free-fall event duration threshold.\n * This register configures the duration counter threshold for Free Fall event\n * detection. The duration counter ticks at 1kHz, therefore FF_DUR has a unit\n * of 1 LSB = 1 ms.\n *\n * The Free Fall duration counter increments while the absolute value of the\n * accelerometer measurements are each less than the detection threshold\n * (Register 29). The Free Fall interrupt is triggered when the Free Fall\n * duration counter reaches the time specified in this register.\n *\n * For more details on the Free Fall detection interrupt, see Section 8.2 of\n * the MPU-6000/MPU-6050 Product Specification document as well as Registers 56\n * and 58 of this document.\n *\n * @return Current free-fall duration threshold value (LSB = 1ms)\n * @see MPU6050_RA_FF_DUR\n */\nuint8_t MPU6050::getFreefallDetectionDuration() {\n    I2Cdev::readByte(devAddr, MPU6050_RA_FF_DUR, buffer);\n    return buffer[0];\n}\n/** Get free-fall event duration threshold.\n * @param duration New free-fall duration threshold value (LSB = 1ms)\n * @see getFreefallDetectionDuration()\n * @see MPU6050_RA_FF_DUR\n */\nvoid MPU6050::setFreefallDetectionDuration(uint8_t duration) {\n    I2Cdev::writeByte(devAddr, MPU6050_RA_FF_DUR, duration);\n}\n\n// MOT_THR register\n\n/** Get motion detection event acceleration threshold.\n * This register configures the detection threshold for Motion interrupt\n * generation. The unit of MOT_THR is 1LSB = 2mg. Motion is detected when the\n * absolute value of any of the accelerometer measurements exceeds this Motion\n * detection threshold. This condition increments the Motion detection duration\n * counter (Register 32). The Motion detection interrupt is triggered when the\n * Motion Detection counter reaches the time count specified in MOT_DUR\n * (Register 32).\n *\n * The Motion interrupt will indicate the axis and polarity of detected motion\n * in MOT_DETECT_STATUS (Register 97).\n *\n * For more details on the Motion detection interrupt, see Section 8.3 of the\n * MPU-6000/MPU-6050 Product Specification document as well as Registers 56 and\n * 58 of this document.\n *\n * @return Current motion detection acceleration threshold value (LSB = 2mg)\n * @see MPU6050_RA_MOT_THR\n */\nuint8_t MPU6050::getMotionDetectionThreshold() {\n    I2Cdev::readByte(devAddr, MPU6050_RA_MOT_THR, buffer);\n    return buffer[0];\n}\n/** Set free-fall event acceleration threshold.\n * @param threshold New motion detection acceleration threshold value (LSB = 2mg)\n * @see getMotionDetectionThreshold()\n * @see MPU6050_RA_MOT_THR\n */\nvoid MPU6050::setMotionDetectionThreshold(uint8_t threshold) {\n    I2Cdev::writeByte(devAddr, MPU6050_RA_MOT_THR, threshold);\n}\n\n// MOT_DUR register\n\n/** Get motion detection event duration threshold.\n * This register configures the duration counter threshold for Motion interrupt\n * generation. The duration counter ticks at 1 kHz, therefore MOT_DUR has a unit\n * of 1LSB = 1ms. The Motion detection duration counter increments when the\n * absolute value of any of the accelerometer measurements exceeds the Motion\n * detection threshold (Register 31). The Motion detection interrupt is\n * triggered when the Motion detection counter reaches the time count specified\n * in this register.\n *\n * For more details on the Motion detection interrupt, see Section 8.3 of the\n * MPU-6000/MPU-6050 Product Specification document.\n *\n * @return Current motion detection duration threshold value (LSB = 1ms)\n * @see MPU6050_RA_MOT_DUR\n */\nuint8_t MPU6050::getMotionDetectionDuration() {\n    I2Cdev::readByte(devAddr, MPU6050_RA_MOT_DUR, buffer);\n    return buffer[0];\n}\n/** Set motion detection event duration threshold.\n * @param duration New motion detection duration threshold value (LSB = 1ms)\n * @see getMotionDetectionDuration()\n * @see MPU6050_RA_MOT_DUR\n */\nvoid MPU6050::setMotionDetectionDuration(uint8_t duration) {\n    I2Cdev::writeByte(devAddr, MPU6050_RA_MOT_DUR, duration);\n}\n\n// ZRMOT_THR register\n\n/** Get zero motion detection event acceleration threshold.\n * This register configures the detection threshold for Zero Motion interrupt\n * generation. The unit of ZRMOT_THR is 1LSB = 2mg. Zero Motion is detected when\n * the absolute value of the accelerometer measurements for the 3 axes are each\n * less than the detection threshold. This condition increments the Zero Motion\n * duration counter (Register 34). The Zero Motion interrupt is triggered when\n * the Zero Motion duration counter reaches the time count specified in\n * ZRMOT_DUR (Register 34).\n *\n * Unlike Free Fall or Motion detection, Zero Motion detection triggers an\n * interrupt both when Zero Motion is first detected and when Zero Motion is no\n * longer detected.\n *\n * When a zero motion event is detected, a Zero Motion Status will be indicated\n * in the MOT_DETECT_STATUS register (Register 97). When a motion-to-zero-motion\n * condition is detected, the status bit is set to 1. When a zero-motion-to-\n * motion condition is detected, the status bit is set to 0.\n *\n * For more details on the Zero Motion detection interrupt, see Section 8.4 of\n * the MPU-6000/MPU-6050 Product Specification document as well as Registers 56\n * and 58 of this document.\n *\n * @return Current zero motion detection acceleration threshold value (LSB = 2mg)\n * @see MPU6050_RA_ZRMOT_THR\n */\nuint8_t MPU6050::getZeroMotionDetectionThreshold() {\n    I2Cdev::readByte(devAddr, MPU6050_RA_ZRMOT_THR, buffer);\n    return buffer[0];\n}\n/** Set zero motion detection event acceleration threshold.\n * @param threshold New zero motion detection acceleration threshold value (LSB = 2mg)\n * @see getZeroMotionDetectionThreshold()\n * @see MPU6050_RA_ZRMOT_THR\n */\nvoid MPU6050::setZeroMotionDetectionThreshold(uint8_t threshold) {\n    I2Cdev::writeByte(devAddr, MPU6050_RA_ZRMOT_THR, threshold);\n}\n\n// ZRMOT_DUR register\n\n/** Get zero motion detection event duration threshold.\n * This register configures the duration counter threshold for Zero Motion\n * interrupt generation. The duration counter ticks at 16 Hz, therefore\n * ZRMOT_DUR has a unit of 1 LSB = 64 ms. The Zero Motion duration counter\n * increments while the absolute value of the accelerometer measurements are\n * each less than the detection threshold (Register 33). The Zero Motion\n * interrupt is triggered when the Zero Motion duration counter reaches the time\n * count specified in this register.\n *\n * For more details on the Zero Motion detection interrupt, see Section 8.4 of\n * the MPU-6000/MPU-6050 Product Specification document, as well as Registers 56\n * and 58 of this document.\n *\n * @return Current zero motion detection duration threshold value (LSB = 64ms)\n * @see MPU6050_RA_ZRMOT_DUR\n */\nuint8_t MPU6050::getZeroMotionDetectionDuration() {\n    I2Cdev::readByte(devAddr, MPU6050_RA_ZRMOT_DUR, buffer);\n    return buffer[0];\n}\n/** Set zero motion detection event duration threshold.\n * @param duration New zero motion detection duration threshold value (LSB = 1ms)\n * @see getZeroMotionDetectionDuration()\n * @see MPU6050_RA_ZRMOT_DUR\n */\nvoid MPU6050::setZeroMotionDetectionDuration(uint8_t duration) {\n    I2Cdev::writeByte(devAddr, MPU6050_RA_ZRMOT_DUR, duration);\n}\n\n// FIFO_EN register\n\n/** Get temperature FIFO enabled value.\n * When set to 1, this bit enables TEMP_OUT_H and TEMP_OUT_L (Registers 65 and\n * 66) to be written into the FIFO buffer.\n * @return Current temperature FIFO enabled value\n * @see MPU6050_RA_FIFO_EN\n */\nbool MPU6050::getTempFIFOEnabled() {\n    I2Cdev::readBit(devAddr, MPU6050_RA_FIFO_EN, MPU6050_TEMP_FIFO_EN_BIT, buffer);\n    return buffer[0];\n}\n/** Set temperature FIFO enabled value.\n * @param enabled New temperature FIFO enabled value\n * @see getTempFIFOEnabled()\n * @see MPU6050_RA_FIFO_EN\n */\nvoid MPU6050::setTempFIFOEnabled(bool enabled) {\n    I2Cdev::writeBit(devAddr, MPU6050_RA_FIFO_EN, MPU6050_TEMP_FIFO_EN_BIT, enabled);\n}\n/** Get gyroscope X-axis FIFO enabled value.\n * When set to 1, this bit enables GYRO_XOUT_H and GYRO_XOUT_L (Registers 67 and\n * 68) to be written into the FIFO buffer.\n * @return Current gyroscope X-axis FIFO enabled value\n * @see MPU6050_RA_FIFO_EN\n */\nbool MPU6050::getXGyroFIFOEnabled() {\n    I2Cdev::readBit(devAddr, MPU6050_RA_FIFO_EN, MPU6050_XG_FIFO_EN_BIT, buffer);\n    return buffer[0];\n}\n/** Set gyroscope X-axis FIFO enabled value.\n * @param enabled New gyroscope X-axis FIFO enabled value\n * @see getXGyroFIFOEnabled()\n * @see MPU6050_RA_FIFO_EN\n */\nvoid MPU6050::setXGyroFIFOEnabled(bool enabled) {\n    I2Cdev::writeBit(devAddr, MPU6050_RA_FIFO_EN, MPU6050_XG_FIFO_EN_BIT, enabled);\n}\n/** Get gyroscope Y-axis FIFO enabled value.\n * When set to 1, this bit enables GYRO_YOUT_H and GYRO_YOUT_L (Registers 69 and\n * 70) to be written into the FIFO buffer.\n * @return Current gyroscope Y-axis FIFO enabled value\n * @see MPU6050_RA_FIFO_EN\n */\nbool MPU6050::getYGyroFIFOEnabled() {\n    I2Cdev::readBit(devAddr, MPU6050_RA_FIFO_EN, MPU6050_YG_FIFO_EN_BIT, buffer);\n    return buffer[0];\n}\n/** Set gyroscope Y-axis FIFO enabled value.\n * @param enabled New gyroscope Y-axis FIFO enabled value\n * @see getYGyroFIFOEnabled()\n * @see MPU6050_RA_FIFO_EN\n */\nvoid MPU6050::setYGyroFIFOEnabled(bool enabled) {\n    I2Cdev::writeBit(devAddr, MPU6050_RA_FIFO_EN, MPU6050_YG_FIFO_EN_BIT, enabled);\n}\n/** Get gyroscope Z-axis FIFO enabled value.\n * When set to 1, this bit enables GYRO_ZOUT_H and GYRO_ZOUT_L (Registers 71 and\n * 72) to be written into the FIFO buffer.\n * @return Current gyroscope Z-axis FIFO enabled value\n * @see MPU6050_RA_FIFO_EN\n */\nbool MPU6050::getZGyroFIFOEnabled() {\n    I2Cdev::readBit(devAddr, MPU6050_RA_FIFO_EN, MPU6050_ZG_FIFO_EN_BIT, buffer);\n    return buffer[0];\n}\n/** Set gyroscope Z-axis FIFO enabled value.\n * @param enabled New gyroscope Z-axis FIFO enabled value\n * @see getZGyroFIFOEnabled()\n * @see MPU6050_RA_FIFO_EN\n */\nvoid MPU6050::setZGyroFIFOEnabled(bool enabled) {\n    I2Cdev::writeBit(devAddr, MPU6050_RA_FIFO_EN, MPU6050_ZG_FIFO_EN_BIT, enabled);\n}\n/** Get accelerometer FIFO enabled value.\n * When set to 1, this bit enables ACCEL_XOUT_H, ACCEL_XOUT_L, ACCEL_YOUT_H,\n * ACCEL_YOUT_L, ACCEL_ZOUT_H, and ACCEL_ZOUT_L (Registers 59 to 64) to be\n * written into the FIFO buffer.\n * @return Current accelerometer FIFO enabled value\n * @see MPU6050_RA_FIFO_EN\n */\nbool MPU6050::getAccelFIFOEnabled() {\n    I2Cdev::readBit(devAddr, MPU6050_RA_FIFO_EN, MPU6050_ACCEL_FIFO_EN_BIT, buffer);\n    return buffer[0];\n}\n/** Set accelerometer FIFO enabled value.\n * @param enabled New accelerometer FIFO enabled value\n * @see getAccelFIFOEnabled()\n * @see MPU6050_RA_FIFO_EN\n */\nvoid MPU6050::setAccelFIFOEnabled(bool enabled) {\n    I2Cdev::writeBit(devAddr, MPU6050_RA_FIFO_EN, MPU6050_ACCEL_FIFO_EN_BIT, enabled);\n}\n/** Get Slave 2 FIFO enabled value.\n * When set to 1, this bit enables EXT_SENS_DATA registers (Registers 73 to 96)\n * associated with Slave 2 to be written into the FIFO buffer.\n * @return Current Slave 2 FIFO enabled value\n * @see MPU6050_RA_FIFO_EN\n */\nbool MPU6050::getSlave2FIFOEnabled() {\n    I2Cdev::readBit(devAddr, MPU6050_RA_FIFO_EN, MPU6050_SLV2_FIFO_EN_BIT, buffer);\n    return buffer[0];\n}\n/** Set Slave 2 FIFO enabled value.\n * @param enabled New Slave 2 FIFO enabled value\n * @see getSlave2FIFOEnabled()\n * @see MPU6050_RA_FIFO_EN\n */\nvoid MPU6050::setSlave2FIFOEnabled(bool enabled) {\n    I2Cdev::writeBit(devAddr, MPU6050_RA_FIFO_EN, MPU6050_SLV2_FIFO_EN_BIT, enabled);\n}\n/** Get Slave 1 FIFO enabled value.\n * When set to 1, this bit enables EXT_SENS_DATA registers (Registers 73 to 96)\n * associated with Slave 1 to be written into the FIFO buffer.\n * @return Current Slave 1 FIFO enabled value\n * @see MPU6050_RA_FIFO_EN\n */\nbool MPU6050::getSlave1FIFOEnabled() {\n    I2Cdev::readBit(devAddr, MPU6050_RA_FIFO_EN, MPU6050_SLV1_FIFO_EN_BIT, buffer);\n    return buffer[0];\n}\n/** Set Slave 1 FIFO enabled value.\n * @param enabled New Slave 1 FIFO enabled value\n * @see getSlave1FIFOEnabled()\n * @see MPU6050_RA_FIFO_EN\n */\nvoid MPU6050::setSlave1FIFOEnabled(bool enabled) {\n    I2Cdev::writeBit(devAddr, MPU6050_RA_FIFO_EN, MPU6050_SLV1_FIFO_EN_BIT, enabled);\n}\n/** Get Slave 0 FIFO enabled value.\n * When set to 1, this bit enables EXT_SENS_DATA registers (Registers 73 to 96)\n * associated with Slave 0 to be written into the FIFO buffer.\n * @return Current Slave 0 FIFO enabled value\n * @see MPU6050_RA_FIFO_EN\n */\nbool MPU6050::getSlave0FIFOEnabled() {\n    I2Cdev::readBit(devAddr, MPU6050_RA_FIFO_EN, MPU6050_SLV0_FIFO_EN_BIT, buffer);\n    return buffer[0];\n}\n/** Set Slave 0 FIFO enabled value.\n * @param enabled New Slave 0 FIFO enabled value\n * @see getSlave0FIFOEnabled()\n * @see MPU6050_RA_FIFO_EN\n */\nvoid MPU6050::setSlave0FIFOEnabled(bool enabled) {\n    I2Cdev::writeBit(devAddr, MPU6050_RA_FIFO_EN, MPU6050_SLV0_FIFO_EN_BIT, enabled);\n}\n\n// I2C_MST_CTRL register\n\n/** Get multi-master enabled value.\n * Multi-master capability allows multiple I2C masters to operate on the same\n * bus. In circuits where multi-master capability is required, set MULT_MST_EN\n * to 1. This will increase current drawn by approximately 30uA.\n *\n * In circuits where multi-master capability is required, the state of the I2C\n * bus must always be monitored by each separate I2C Master. Before an I2C\n * Master can assume arbitration of the bus, it must first confirm that no other\n * I2C Master has arbitration of the bus. When MULT_MST_EN is set to 1, the\n * MPU-60X0's bus arbitration detection logic is turned on, enabling it to\n * detect when the bus is available.\n *\n * @return Current multi-master enabled value\n * @see MPU6050_RA_I2C_MST_CTRL\n */\nbool MPU6050::getMultiMasterEnabled() {\n    I2Cdev::readBit(devAddr, MPU6050_RA_I2C_MST_CTRL, MPU6050_MULT_MST_EN_BIT, buffer);\n    return buffer[0];\n}\n/** Set multi-master enabled value.\n * @param enabled New multi-master enabled value\n * @see getMultiMasterEnabled()\n * @see MPU6050_RA_I2C_MST_CTRL\n */\nvoid MPU6050::setMultiMasterEnabled(bool enabled) {\n    I2Cdev::writeBit(devAddr, MPU6050_RA_I2C_MST_CTRL, MPU6050_MULT_MST_EN_BIT, enabled);\n}\n/** Get wait-for-external-sensor-data enabled value.\n * When the WAIT_FOR_ES bit is set to 1, the Data Ready interrupt will be\n * delayed until External Sensor data from the Slave Devices are loaded into the\n * EXT_SENS_DATA registers. This is used to ensure that both the internal sensor\n * data (i.e. from gyro and accel) and external sensor data have been loaded to\n * their respective data registers (i.e. the data is synced) when the Data Ready\n * interrupt is triggered.\n *\n * @return Current wait-for-external-sensor-data enabled value\n * @see MPU6050_RA_I2C_MST_CTRL\n */\nbool MPU6050::getWaitForExternalSensorEnabled() {\n    I2Cdev::readBit(devAddr, MPU6050_RA_I2C_MST_CTRL, MPU6050_WAIT_FOR_ES_BIT, buffer);\n    return buffer[0];\n}\n/** Set wait-for-external-sensor-data enabled value.\n * @param enabled New wait-for-external-sensor-data enabled value\n * @see getWaitForExternalSensorEnabled()\n * @see MPU6050_RA_I2C_MST_CTRL\n */\nvoid MPU6050::setWaitForExternalSensorEnabled(bool enabled) {\n    I2Cdev::writeBit(devAddr, MPU6050_RA_I2C_MST_CTRL, MPU6050_WAIT_FOR_ES_BIT, enabled);\n}\n/** Get Slave 3 FIFO enabled value.\n * When set to 1, this bit enables EXT_SENS_DATA registers (Registers 73 to 96)\n * associated with Slave 3 to be written into the FIFO buffer.\n * @return Current Slave 3 FIFO enabled value\n * @see MPU6050_RA_MST_CTRL\n */\nbool MPU6050::getSlave3FIFOEnabled() {\n    I2Cdev::readBit(devAddr, MPU6050_RA_I2C_MST_CTRL, MPU6050_SLV_3_FIFO_EN_BIT, buffer);\n    return buffer[0];\n}\n/** Set Slave 3 FIFO enabled value.\n * @param enabled New Slave 3 FIFO enabled value\n * @see getSlave3FIFOEnabled()\n * @see MPU6050_RA_MST_CTRL\n */\nvoid MPU6050::setSlave3FIFOEnabled(bool enabled) {\n    I2Cdev::writeBit(devAddr, MPU6050_RA_I2C_MST_CTRL, MPU6050_SLV_3_FIFO_EN_BIT, enabled);\n}\n/** Get slave read/write transition enabled value.\n * The I2C_MST_P_NSR bit configures the I2C Master's transition from one slave\n * read to the next slave read. If the bit equals 0, there will be a restart\n * between reads. If the bit equals 1, there will be a stop followed by a start\n * of the following read. When a write transaction follows a read transaction,\n * the stop followed by a start of the successive write will be always used.\n *\n * @return Current slave read/write transition enabled value\n * @see MPU6050_RA_I2C_MST_CTRL\n */\nbool MPU6050::getSlaveReadWriteTransitionEnabled() {\n    I2Cdev::readBit(devAddr, MPU6050_RA_I2C_MST_CTRL, MPU6050_I2C_MST_P_NSR_BIT, buffer);\n    return buffer[0];\n}\n/** Set slave read/write transition enabled value.\n * @param enabled New slave read/write transition enabled value\n * @see getSlaveReadWriteTransitionEnabled()\n * @see MPU6050_RA_I2C_MST_CTRL\n */\nvoid MPU6050::setSlaveReadWriteTransitionEnabled(bool enabled) {\n    I2Cdev::writeBit(devAddr, MPU6050_RA_I2C_MST_CTRL, MPU6050_I2C_MST_P_NSR_BIT, enabled);\n}\n/** Get I2C master clock speed.\n * I2C_MST_CLK is a 4 bit unsigned value which configures a divider on the\n * MPU-60X0 internal 8MHz clock. It sets the I2C master clock speed according to\n * the following table:\n *\n * <pre>\n * I2C_MST_CLK | I2C Master Clock Speed | 8MHz Clock Divider\n * ------------+------------------------+-------------------\n * 0           | 348kHz                 | 23\n * 1           | 333kHz                 | 24\n * 2           | 320kHz                 | 25\n * 3           | 308kHz                 | 26\n * 4           | 296kHz                 | 27\n * 5           | 286kHz                 | 28\n * 6           | 276kHz                 | 29\n * 7           | 267kHz                 | 30\n * 8           | 258kHz                 | 31\n * 9           | 500kHz                 | 16\n * 10          | 471kHz                 | 17\n * 11          | 444kHz                 | 18\n * 12          | 421kHz                 | 19\n * 13          | 400kHz                 | 20\n * 14          | 381kHz                 | 21\n * 15          | 364kHz                 | 22\n * </pre>\n *\n * @return Current I2C master clock speed\n * @see MPU6050_RA_I2C_MST_CTRL\n */\nuint8_t MPU6050::getMasterClockSpeed() {\n    I2Cdev::readBits(devAddr, MPU6050_RA_I2C_MST_CTRL, MPU6050_I2C_MST_CLK_BIT, MPU6050_I2C_MST_CLK_LENGTH, buffer);\n    return buffer[0];\n}\n/** Set I2C master clock speed.\n * @reparam speed Current I2C master clock speed\n * @see MPU6050_RA_I2C_MST_CTRL\n */\nvoid MPU6050::setMasterClockSpeed(uint8_t speed) {\n    I2Cdev::writeBits(devAddr, MPU6050_RA_I2C_MST_CTRL, MPU6050_I2C_MST_CLK_BIT, MPU6050_I2C_MST_CLK_LENGTH, speed);\n}\n\n// I2C_SLV* registers (Slave 0-3)\n\n/** Get the I2C address of the specified slave (0-3).\n * Note that Bit 7 (MSB) controls read/write mode. If Bit 7 is set, it's a read\n * operation, and if it is cleared, then it's a write operation. The remaining\n * bits (6-0) are the 7-bit device address of the slave device.\n *\n * In read mode, the result of the read is placed in the lowest available \n * EXT_SENS_DATA register. For further information regarding the allocation of\n * read results, please refer to the EXT_SENS_DATA register description\n * (Registers 73 - 96).\n *\n * The MPU-6050 supports a total of five slaves, but Slave 4 has unique\n * characteristics, and so it has its own functions (getSlave4* and setSlave4*).\n *\n * I2C data transactions are performed at the Sample Rate, as defined in\n * Register 25. The user is responsible for ensuring that I2C data transactions\n * to and from each enabled Slave can be completed within a single period of the\n * Sample Rate.\n *\n * The I2C slave access rate can be reduced relative to the Sample Rate. This\n * reduced access rate is determined by I2C_MST_DLY (Register 52). Whether a\n * slave's access rate is reduced relative to the Sample Rate is determined by\n * I2C_MST_DELAY_CTRL (Register 103).\n *\n * The processing order for the slaves is fixed. The sequence followed for\n * processing the slaves is Slave 0, Slave 1, Slave 2, Slave 3 and Slave 4. If a\n * particular Slave is disabled it will be skipped.\n *\n * Each slave can either be accessed at the sample rate or at a reduced sample\n * rate. In a case where some slaves are accessed at the Sample Rate and some\n * slaves are accessed at the reduced rate, the sequence of accessing the slaves\n * (Slave 0 to Slave 4) is still followed. However, the reduced rate slaves will\n * be skipped if their access rate dictates that they should not be accessed\n * during that particular cycle. For further information regarding the reduced\n * access rate, please refer to Register 52. Whether a slave is accessed at the\n * Sample Rate or at the reduced rate is determined by the Delay Enable bits in\n * Register 103.\n *\n * @param num Slave number (0-3)\n * @return Current address for specified slave\n * @see MPU6050_RA_I2C_SLV0_ADDR\n */\nuint8_t MPU6050::getSlaveAddress(uint8_t num) {\n    if (num > 3) return 0;\n    I2Cdev::readByte(devAddr, MPU6050_RA_I2C_SLV0_ADDR + num*3, buffer);\n    return buffer[0];\n}\n/** Set the I2C address of the specified slave (0-3).\n * @param num Slave number (0-3)\n * @param address New address for specified slave\n * @see getSlaveAddress()\n * @see MPU6050_RA_I2C_SLV0_ADDR\n */\nvoid MPU6050::setSlaveAddress(uint8_t num, uint8_t address) {\n    if (num > 3) return;\n    I2Cdev::writeByte(devAddr, MPU6050_RA_I2C_SLV0_ADDR + num*3, address);\n}\n/** Get the active internal register for the specified slave (0-3).\n * Read/write operations for this slave will be done to whatever internal\n * register address is stored in this MPU register.\n *\n * The MPU-6050 supports a total of five slaves, but Slave 4 has unique\n * characteristics, and so it has its own functions.\n *\n * @param num Slave number (0-3)\n * @return Current active register for specified slave\n * @see MPU6050_RA_I2C_SLV0_REG\n */\nuint8_t MPU6050::getSlaveRegister(uint8_t num) {\n    if (num > 3) return 0;\n    I2Cdev::readByte(devAddr, MPU6050_RA_I2C_SLV0_REG + num*3, buffer);\n    return buffer[0];\n}\n/** Set the active internal register for the specified slave (0-3).\n * @param num Slave number (0-3)\n * @param reg New active register for specified slave\n * @see getSlaveRegister()\n * @see MPU6050_RA_I2C_SLV0_REG\n */\nvoid MPU6050::setSlaveRegister(uint8_t num, uint8_t reg) {\n    if (num > 3) return;\n    I2Cdev::writeByte(devAddr, MPU6050_RA_I2C_SLV0_REG + num*3, reg);\n}\n/** Get the enabled value for the specified slave (0-3).\n * When set to 1, this bit enables Slave 0 for data transfer operations. When\n * cleared to 0, this bit disables Slave 0 from data transfer operations.\n * @param num Slave number (0-3)\n * @return Current enabled value for specified slave\n * @see MPU6050_RA_I2C_SLV0_CTRL\n */\nbool MPU6050::getSlaveEnabled(uint8_t num) {\n    if (num > 3) return 0;\n    I2Cdev::readBit(devAddr, MPU6050_RA_I2C_SLV0_CTRL + num*3, MPU6050_I2C_SLV_EN_BIT, buffer);\n    return buffer[0];\n}\n/** Set the enabled value for the specified slave (0-3).\n * @param num Slave number (0-3)\n * @param enabled New enabled value for specified slave\n * @see getSlaveEnabled()\n * @see MPU6050_RA_I2C_SLV0_CTRL\n */\nvoid MPU6050::setSlaveEnabled(uint8_t num, bool enabled) {\n    if (num > 3) return;\n    I2Cdev::writeBit(devAddr, MPU6050_RA_I2C_SLV0_CTRL + num*3, MPU6050_I2C_SLV_EN_BIT, enabled);\n}\n/** Get word pair byte-swapping enabled for the specified slave (0-3).\n * When set to 1, this bit enables byte swapping. When byte swapping is enabled,\n * the high and low bytes of a word pair are swapped. Please refer to\n * I2C_SLV0_GRP for the pairing convention of the word pairs. When cleared to 0,\n * bytes transferred to and from Slave 0 will be written to EXT_SENS_DATA\n * registers in the order they were transferred.\n *\n * @param num Slave number (0-3)\n * @return Current word pair byte-swapping enabled value for specified slave\n * @see MPU6050_RA_I2C_SLV0_CTRL\n */\nbool MPU6050::getSlaveWordByteSwap(uint8_t num) {\n    if (num > 3) return 0;\n    I2Cdev::readBit(devAddr, MPU6050_RA_I2C_SLV0_CTRL + num*3, MPU6050_I2C_SLV_BYTE_SW_BIT, buffer);\n    return buffer[0];\n}\n/** Set word pair byte-swapping enabled for the specified slave (0-3).\n * @param num Slave number (0-3)\n * @param enabled New word pair byte-swapping enabled value for specified slave\n * @see getSlaveWordByteSwap()\n * @see MPU6050_RA_I2C_SLV0_CTRL\n */\nvoid MPU6050::setSlaveWordByteSwap(uint8_t num, bool enabled) {\n    if (num > 3) return;\n    I2Cdev::writeBit(devAddr, MPU6050_RA_I2C_SLV0_CTRL + num*3, MPU6050_I2C_SLV_BYTE_SW_BIT, enabled);\n}\n/** Get write mode for the specified slave (0-3).\n * When set to 1, the transaction will read or write data only. When cleared to\n * 0, the transaction will write a register address prior to reading or writing\n * data. This should equal 0 when specifying the register address within the\n * Slave device to/from which the ensuing data transaction will take place.\n *\n * @param num Slave number (0-3)\n * @return Current write mode for specified slave (0 = register address + data, 1 = data only)\n * @see MPU6050_RA_I2C_SLV0_CTRL\n */\nbool MPU6050::getSlaveWriteMode(uint8_t num) {\n    if (num > 3) return 0;\n    I2Cdev::readBit(devAddr, MPU6050_RA_I2C_SLV0_CTRL + num*3, MPU6050_I2C_SLV_REG_DIS_BIT, buffer);\n    return buffer[0];\n}\n/** Set write mode for the specified slave (0-3).\n * @param num Slave number (0-3)\n * @param mode New write mode for specified slave (0 = register address + data, 1 = data only)\n * @see getSlaveWriteMode()\n * @see MPU6050_RA_I2C_SLV0_CTRL\n */\nvoid MPU6050::setSlaveWriteMode(uint8_t num, bool mode) {\n    if (num > 3) return;\n    I2Cdev::writeBit(devAddr, MPU6050_RA_I2C_SLV0_CTRL + num*3, MPU6050_I2C_SLV_REG_DIS_BIT, mode);\n}\n/** Get word pair grouping order offset for the specified slave (0-3).\n * This sets specifies the grouping order of word pairs received from registers.\n * When cleared to 0, bytes from register addresses 0 and 1, 2 and 3, etc (even,\n * then odd register addresses) are paired to form a word. When set to 1, bytes\n * from register addresses are paired 1 and 2, 3 and 4, etc. (odd, then even\n * register addresses) are paired to form a word.\n *\n * @param num Slave number (0-3)\n * @return Current word pair grouping order offset for specified slave\n * @see MPU6050_RA_I2C_SLV0_CTRL\n */\nbool MPU6050::getSlaveWordGroupOffset(uint8_t num) {\n    if (num > 3) return 0;\n    I2Cdev::readBit(devAddr, MPU6050_RA_I2C_SLV0_CTRL + num*3, MPU6050_I2C_SLV_GRP_BIT, buffer);\n    return buffer[0];\n}\n/** Set word pair grouping order offset for the specified slave (0-3).\n * @param num Slave number (0-3)\n * @param enabled New word pair grouping order offset for specified slave\n * @see getSlaveWordGroupOffset()\n * @see MPU6050_RA_I2C_SLV0_CTRL\n */\nvoid MPU6050::setSlaveWordGroupOffset(uint8_t num, bool enabled) {\n    if (num > 3) return;\n    I2Cdev::writeBit(devAddr, MPU6050_RA_I2C_SLV0_CTRL + num*3, MPU6050_I2C_SLV_GRP_BIT, enabled);\n}\n/** Get number of bytes to read for the specified slave (0-3).\n * Specifies the number of bytes transferred to and from Slave 0. Clearing this\n * bit to 0 is equivalent to disabling the register by writing 0 to I2C_SLV0_EN.\n * @param num Slave number (0-3)\n * @return Number of bytes to read for specified slave\n * @see MPU6050_RA_I2C_SLV0_CTRL\n */\nuint8_t MPU6050::getSlaveDataLength(uint8_t num) {\n    if (num > 3) return 0;\n    I2Cdev::readBits(devAddr, MPU6050_RA_I2C_SLV0_CTRL + num*3, MPU6050_I2C_SLV_LEN_BIT, MPU6050_I2C_SLV_LEN_LENGTH, buffer);\n    return buffer[0];\n}\n/** Set number of bytes to read for the specified slave (0-3).\n * @param num Slave number (0-3)\n * @param length Number of bytes to read for specified slave\n * @see getSlaveDataLength()\n * @see MPU6050_RA_I2C_SLV0_CTRL\n */\nvoid MPU6050::setSlaveDataLength(uint8_t num, uint8_t length) {\n    if (num > 3) return;\n    I2Cdev::writeBits(devAddr, MPU6050_RA_I2C_SLV0_CTRL + num*3, MPU6050_I2C_SLV_LEN_BIT, MPU6050_I2C_SLV_LEN_LENGTH, length);\n}\n\n// I2C_SLV* registers (Slave 4)\n\n/** Get the I2C address of Slave 4.\n * Note that Bit 7 (MSB) controls read/write mode. If Bit 7 is set, it's a read\n * operation, and if it is cleared, then it's a write operation. The remaining\n * bits (6-0) are the 7-bit device address of the slave device.\n *\n * @return Current address for Slave 4\n * @see getSlaveAddress()\n * @see MPU6050_RA_I2C_SLV4_ADDR\n */\nuint8_t MPU6050::getSlave4Address() {\n    I2Cdev::readByte(devAddr, MPU6050_RA_I2C_SLV4_ADDR, buffer);\n    return buffer[0];\n}\n/** Set the I2C address of Slave 4.\n * @param address New address for Slave 4\n * @see getSlave4Address()\n * @see MPU6050_RA_I2C_SLV4_ADDR\n */\nvoid MPU6050::setSlave4Address(uint8_t address) {\n    I2Cdev::writeByte(devAddr, MPU6050_RA_I2C_SLV4_ADDR, address);\n}\n/** Get the active internal register for the Slave 4.\n * Read/write operations for this slave will be done to whatever internal\n * register address is stored in this MPU register.\n *\n * @return Current active register for Slave 4\n * @see MPU6050_RA_I2C_SLV4_REG\n */\nuint8_t MPU6050::getSlave4Register() {\n    I2Cdev::readByte(devAddr, MPU6050_RA_I2C_SLV4_REG, buffer);\n    return buffer[0];\n}\n/** Set the active internal register for Slave 4.\n * @param reg New active register for Slave 4\n * @see getSlave4Register()\n * @see MPU6050_RA_I2C_SLV4_REG\n */\nvoid MPU6050::setSlave4Register(uint8_t reg) {\n    I2Cdev::writeByte(devAddr, MPU6050_RA_I2C_SLV4_REG, reg);\n}\n/** Set new byte to write to Slave 4.\n * This register stores the data to be written into the Slave 4. If I2C_SLV4_RW\n * is set 1 (set to read), this register has no effect.\n * @param data New byte to write to Slave 4\n * @see MPU6050_RA_I2C_SLV4_DO\n */\nvoid MPU6050::setSlave4OutputByte(uint8_t data) {\n    I2Cdev::writeByte(devAddr, MPU6050_RA_I2C_SLV4_DO, data);\n}\n/** Get the enabled value for the Slave 4.\n * When set to 1, this bit enables Slave 4 for data transfer operations. When\n * cleared to 0, this bit disables Slave 4 from data transfer operations.\n * @return Current enabled value for Slave 4\n * @see MPU6050_RA_I2C_SLV4_CTRL\n */\nbool MPU6050::getSlave4Enabled() {\n    I2Cdev::readBit(devAddr, MPU6050_RA_I2C_SLV4_CTRL, MPU6050_I2C_SLV4_EN_BIT, buffer);\n    return buffer[0];\n}\n/** Set the enabled value for Slave 4.\n * @param enabled New enabled value for Slave 4\n * @see getSlave4Enabled()\n * @see MPU6050_RA_I2C_SLV4_CTRL\n */\nvoid MPU6050::setSlave4Enabled(bool enabled) {\n    I2Cdev::writeBit(devAddr, MPU6050_RA_I2C_SLV4_CTRL, MPU6050_I2C_SLV4_EN_BIT, enabled);\n}\n/** Get the enabled value for Slave 4 transaction interrupts.\n * When set to 1, this bit enables the generation of an interrupt signal upon\n * completion of a Slave 4 transaction. When cleared to 0, this bit disables the\n * generation of an interrupt signal upon completion of a Slave 4 transaction.\n * The interrupt status can be observed in Register 54.\n *\n * @return Current enabled value for Slave 4 transaction interrupts.\n * @see MPU6050_RA_I2C_SLV4_CTRL\n */\nbool MPU6050::getSlave4InterruptEnabled() {\n    I2Cdev::readBit(devAddr, MPU6050_RA_I2C_SLV4_CTRL, MPU6050_I2C_SLV4_INT_EN_BIT, buffer);\n    return buffer[0];\n}\n/** Set the enabled value for Slave 4 transaction interrupts.\n * @param enabled New enabled value for Slave 4 transaction interrupts.\n * @see getSlave4InterruptEnabled()\n * @see MPU6050_RA_I2C_SLV4_CTRL\n */\nvoid MPU6050::setSlave4InterruptEnabled(bool enabled) {\n    I2Cdev::writeBit(devAddr, MPU6050_RA_I2C_SLV4_CTRL, MPU6050_I2C_SLV4_INT_EN_BIT, enabled);\n}\n/** Get write mode for Slave 4.\n * When set to 1, the transaction will read or write data only. When cleared to\n * 0, the transaction will write a register address prior to reading or writing\n * data. This should equal 0 when specifying the register address within the\n * Slave device to/from which the ensuing data transaction will take place.\n *\n * @return Current write mode for Slave 4 (0 = register address + data, 1 = data only)\n * @see MPU6050_RA_I2C_SLV4_CTRL\n */\nbool MPU6050::getSlave4WriteMode() {\n    I2Cdev::readBit(devAddr, MPU6050_RA_I2C_SLV4_CTRL, MPU6050_I2C_SLV4_REG_DIS_BIT, buffer);\n    return buffer[0];\n}\n/** Set write mode for the Slave 4.\n * @param mode New write mode for Slave 4 (0 = register address + data, 1 = data only)\n * @see getSlave4WriteMode()\n * @see MPU6050_RA_I2C_SLV4_CTRL\n */\nvoid MPU6050::setSlave4WriteMode(bool mode) {\n    I2Cdev::writeBit(devAddr, MPU6050_RA_I2C_SLV4_CTRL, MPU6050_I2C_SLV4_REG_DIS_BIT, mode);\n}\n/** Get Slave 4 master delay value.\n * This configures the reduced access rate of I2C slaves relative to the Sample\n * Rate. When a slave's access rate is decreased relative to the Sample Rate,\n * the slave is accessed every:\n *\n *     1 / (1 + I2C_MST_DLY) samples\n *\n * This base Sample Rate in turn is determined by SMPLRT_DIV (register 25) and\n * DLPF_CFG (register 26). Whether a slave's access rate is reduced relative to\n * the Sample Rate is determined by I2C_MST_DELAY_CTRL (register 103). For\n * further information regarding the Sample Rate, please refer to register 25.\n *\n * @return Current Slave 4 master delay value\n * @see MPU6050_RA_I2C_SLV4_CTRL\n */\nuint8_t MPU6050::getSlave4MasterDelay() {\n    I2Cdev::readBits(devAddr, MPU6050_RA_I2C_SLV4_CTRL, MPU6050_I2C_SLV4_MST_DLY_BIT, MPU6050_I2C_SLV4_MST_DLY_LENGTH, buffer);\n    return buffer[0];\n}\n/** Set Slave 4 master delay value.\n * @param delay New Slave 4 master delay value\n * @see getSlave4MasterDelay()\n * @see MPU6050_RA_I2C_SLV4_CTRL\n */\nvoid MPU6050::setSlave4MasterDelay(uint8_t delay) {\n    I2Cdev::writeBits(devAddr, MPU6050_RA_I2C_SLV4_CTRL, MPU6050_I2C_SLV4_MST_DLY_BIT, MPU6050_I2C_SLV4_MST_DLY_LENGTH, delay);\n}\n/** Get last available byte read from Slave 4.\n * This register stores the data read from Slave 4. This field is populated\n * after a read transaction.\n * @return Last available byte read from to Slave 4\n * @see MPU6050_RA_I2C_SLV4_DI\n */\nuint8_t MPU6050::getSlate4InputByte() {\n    I2Cdev::readByte(devAddr, MPU6050_RA_I2C_SLV4_DI, buffer);\n    return buffer[0];\n}\n\n// I2C_MST_STATUS register\n\n/** Get FSYNC interrupt status.\n * This bit reflects the status of the FSYNC interrupt from an external device\n * into the MPU-60X0. This is used as a way to pass an external interrupt\n * through the MPU-60X0 to the host application processor. When set to 1, this\n * bit will cause an interrupt if FSYNC_INT_EN is asserted in INT_PIN_CFG\n * (Register 55).\n * @return FSYNC interrupt status\n * @see MPU6050_RA_I2C_MST_STATUS\n */\nbool MPU6050::getPassthroughStatus() {\n    I2Cdev::readBit(devAddr, MPU6050_RA_I2C_MST_STATUS, MPU6050_MST_PASS_THROUGH_BIT, buffer);\n    return buffer[0];\n}\n/** Get Slave 4 transaction done status.\n * Automatically sets to 1 when a Slave 4 transaction has completed. This\n * triggers an interrupt if the I2C_MST_INT_EN bit in the INT_ENABLE register\n * (Register 56) is asserted and if the SLV_4_DONE_INT bit is asserted in the\n * I2C_SLV4_CTRL register (Register 52).\n * @return Slave 4 transaction done status\n * @see MPU6050_RA_I2C_MST_STATUS\n */\nbool MPU6050::getSlave4IsDone() {\n    I2Cdev::readBit(devAddr, MPU6050_RA_I2C_MST_STATUS, MPU6050_MST_I2C_SLV4_DONE_BIT, buffer);\n    return buffer[0];\n}\n/** Get master arbitration lost status.\n * This bit automatically sets to 1 when the I2C Master has lost arbitration of\n * the auxiliary I2C bus (an error condition). This triggers an interrupt if the\n * I2C_MST_INT_EN bit in the INT_ENABLE register (Register 56) is asserted.\n * @return Master arbitration lost status\n * @see MPU6050_RA_I2C_MST_STATUS\n */\nbool MPU6050::getLostArbitration() {\n    I2Cdev::readBit(devAddr, MPU6050_RA_I2C_MST_STATUS, MPU6050_MST_I2C_LOST_ARB_BIT, buffer);\n    return buffer[0];\n}\n/** Get Slave 4 NACK status.\n * This bit automatically sets to 1 when the I2C Master receives a NACK in a\n * transaction with Slave 4. This triggers an interrupt if the I2C_MST_INT_EN\n * bit in the INT_ENABLE register (Register 56) is asserted.\n * @return Slave 4 NACK interrupt status\n * @see MPU6050_RA_I2C_MST_STATUS\n */\nbool MPU6050::getSlave4Nack() {\n    I2Cdev::readBit(devAddr, MPU6050_RA_I2C_MST_STATUS, MPU6050_MST_I2C_SLV4_NACK_BIT, buffer);\n    return buffer[0];\n}\n/** Get Slave 3 NACK status.\n * This bit automatically sets to 1 when the I2C Master receives a NACK in a\n * transaction with Slave 3. This triggers an interrupt if the I2C_MST_INT_EN\n * bit in the INT_ENABLE register (Register 56) is asserted.\n * @return Slave 3 NACK interrupt status\n * @see MPU6050_RA_I2C_MST_STATUS\n */\nbool MPU6050::getSlave3Nack() {\n    I2Cdev::readBit(devAddr, MPU6050_RA_I2C_MST_STATUS, MPU6050_MST_I2C_SLV3_NACK_BIT, buffer);\n    return buffer[0];\n}\n/** Get Slave 2 NACK status.\n * This bit automatically sets to 1 when the I2C Master receives a NACK in a\n * transaction with Slave 2. This triggers an interrupt if the I2C_MST_INT_EN\n * bit in the INT_ENABLE register (Register 56) is asserted.\n * @return Slave 2 NACK interrupt status\n * @see MPU6050_RA_I2C_MST_STATUS\n */\nbool MPU6050::getSlave2Nack() {\n    I2Cdev::readBit(devAddr, MPU6050_RA_I2C_MST_STATUS, MPU6050_MST_I2C_SLV2_NACK_BIT, buffer);\n    return buffer[0];\n}\n/** Get Slave 1 NACK status.\n * This bit automatically sets to 1 when the I2C Master receives a NACK in a\n * transaction with Slave 1. This triggers an interrupt if the I2C_MST_INT_EN\n * bit in the INT_ENABLE register (Register 56) is asserted.\n * @return Slave 1 NACK interrupt status\n * @see MPU6050_RA_I2C_MST_STATUS\n */\nbool MPU6050::getSlave1Nack() {\n    I2Cdev::readBit(devAddr, MPU6050_RA_I2C_MST_STATUS, MPU6050_MST_I2C_SLV1_NACK_BIT, buffer);\n    return buffer[0];\n}\n/** Get Slave 0 NACK status.\n * This bit automatically sets to 1 when the I2C Master receives a NACK in a\n * transaction with Slave 0. This triggers an interrupt if the I2C_MST_INT_EN\n * bit in the INT_ENABLE register (Register 56) is asserted.\n * @return Slave 0 NACK interrupt status\n * @see MPU6050_RA_I2C_MST_STATUS\n */\nbool MPU6050::getSlave0Nack() {\n    I2Cdev::readBit(devAddr, MPU6050_RA_I2C_MST_STATUS, MPU6050_MST_I2C_SLV0_NACK_BIT, buffer);\n    return buffer[0];\n}\n\n// INT_PIN_CFG register\n\n/** Get interrupt logic level mode.\n * Will be set 0 for active-high, 1 for active-low.\n * @return Current interrupt mode (0=active-high, 1=active-low)\n * @see MPU6050_RA_INT_PIN_CFG\n * @see MPU6050_INTCFG_INT_LEVEL_BIT\n */\nbool MPU6050::getInterruptMode() {\n    I2Cdev::readBit(devAddr, MPU6050_RA_INT_PIN_CFG, MPU6050_INTCFG_INT_LEVEL_BIT, buffer);\n    return buffer[0];\n}\n/** Set interrupt logic level mode.\n * @param mode New interrupt mode (0=active-high, 1=active-low)\n * @see getInterruptMode()\n * @see MPU6050_RA_INT_PIN_CFG\n * @see MPU6050_INTCFG_INT_LEVEL_BIT\n */\nvoid MPU6050::setInterruptMode(bool mode) {\n   I2Cdev::writeBit(devAddr, MPU6050_RA_INT_PIN_CFG, MPU6050_INTCFG_INT_LEVEL_BIT, mode);\n}\n/** Get interrupt drive mode.\n * Will be set 0 for push-pull, 1 for open-drain.\n * @return Current interrupt drive mode (0=push-pull, 1=open-drain)\n * @see MPU6050_RA_INT_PIN_CFG\n * @see MPU6050_INTCFG_INT_OPEN_BIT\n */\nbool MPU6050::getInterruptDrive() {\n    I2Cdev::readBit(devAddr, MPU6050_RA_INT_PIN_CFG, MPU6050_INTCFG_INT_OPEN_BIT, buffer);\n    return buffer[0];\n}\n/** Set interrupt drive mode.\n * @param drive New interrupt drive mode (0=push-pull, 1=open-drain)\n * @see getInterruptDrive()\n * @see MPU6050_RA_INT_PIN_CFG\n * @see MPU6050_INTCFG_INT_OPEN_BIT\n */\nvoid MPU6050::setInterruptDrive(bool drive) {\n    I2Cdev::writeBit(devAddr, MPU6050_RA_INT_PIN_CFG, MPU6050_INTCFG_INT_OPEN_BIT, drive);\n}\n/** Get interrupt latch mode.\n * Will be set 0 for 50us-pulse, 1 for latch-until-int-cleared.\n * @return Current latch mode (0=50us-pulse, 1=latch-until-int-cleared)\n * @see MPU6050_RA_INT_PIN_CFG\n * @see MPU6050_INTCFG_LATCH_INT_EN_BIT\n */\nbool MPU6050::getInterruptLatch() {\n    I2Cdev::readBit(devAddr, MPU6050_RA_INT_PIN_CFG, MPU6050_INTCFG_LATCH_INT_EN_BIT, buffer);\n    return buffer[0];\n}\n/** Set interrupt latch mode.\n * @param latch New latch mode (0=50us-pulse, 1=latch-until-int-cleared)\n * @see getInterruptLatch()\n * @see MPU6050_RA_INT_PIN_CFG\n * @see MPU6050_INTCFG_LATCH_INT_EN_BIT\n */\nvoid MPU6050::setInterruptLatch(bool latch) {\n    I2Cdev::writeBit(devAddr, MPU6050_RA_INT_PIN_CFG, MPU6050_INTCFG_LATCH_INT_EN_BIT, latch);\n}\n/** Get interrupt latch clear mode.\n * Will be set 0 for status-read-only, 1 for any-register-read.\n * @return Current latch clear mode (0=status-read-only, 1=any-register-read)\n * @see MPU6050_RA_INT_PIN_CFG\n * @see MPU6050_INTCFG_INT_RD_CLEAR_BIT\n */\nbool MPU6050::getInterruptLatchClear() {\n    I2Cdev::readBit(devAddr, MPU6050_RA_INT_PIN_CFG, MPU6050_INTCFG_INT_RD_CLEAR_BIT, buffer);\n    return buffer[0];\n}\n/** Set interrupt latch clear mode.\n * @param clear New latch clear mode (0=status-read-only, 1=any-register-read)\n * @see getInterruptLatchClear()\n * @see MPU6050_RA_INT_PIN_CFG\n * @see MPU6050_INTCFG_INT_RD_CLEAR_BIT\n */\nvoid MPU6050::setInterruptLatchClear(bool clear) {\n    I2Cdev::writeBit(devAddr, MPU6050_RA_INT_PIN_CFG, MPU6050_INTCFG_INT_RD_CLEAR_BIT, clear);\n}\n/** Get FSYNC interrupt logic level mode.\n * @return Current FSYNC interrupt mode (0=active-high, 1=active-low)\n * @see getFSyncInterruptMode()\n * @see MPU6050_RA_INT_PIN_CFG\n * @see MPU6050_INTCFG_FSYNC_INT_LEVEL_BIT\n */\nbool MPU6050::getFSyncInterruptLevel() {\n    I2Cdev::readBit(devAddr, MPU6050_RA_INT_PIN_CFG, MPU6050_INTCFG_FSYNC_INT_LEVEL_BIT, buffer);\n    return buffer[0];\n}\n/** Set FSYNC interrupt logic level mode.\n * @param mode New FSYNC interrupt mode (0=active-high, 1=active-low)\n * @see getFSyncInterruptMode()\n * @see MPU6050_RA_INT_PIN_CFG\n * @see MPU6050_INTCFG_FSYNC_INT_LEVEL_BIT\n */\nvoid MPU6050::setFSyncInterruptLevel(bool level) {\n    I2Cdev::writeBit(devAddr, MPU6050_RA_INT_PIN_CFG, MPU6050_INTCFG_FSYNC_INT_LEVEL_BIT, level);\n}\n/** Get FSYNC pin interrupt enabled setting.\n * Will be set 0 for disabled, 1 for enabled.\n * @return Current interrupt enabled setting\n * @see MPU6050_RA_INT_PIN_CFG\n * @see MPU6050_INTCFG_FSYNC_INT_EN_BIT\n */\nbool MPU6050::getFSyncInterruptEnabled() {\n    I2Cdev::readBit(devAddr, MPU6050_RA_INT_PIN_CFG, MPU6050_INTCFG_FSYNC_INT_EN_BIT, buffer);\n    return buffer[0];\n}\n/** Set FSYNC pin interrupt enabled setting.\n * @param enabled New FSYNC pin interrupt enabled setting\n * @see getFSyncInterruptEnabled()\n * @see MPU6050_RA_INT_PIN_CFG\n * @see MPU6050_INTCFG_FSYNC_INT_EN_BIT\n */\nvoid MPU6050::setFSyncInterruptEnabled(bool enabled) {\n    I2Cdev::writeBit(devAddr, MPU6050_RA_INT_PIN_CFG, MPU6050_INTCFG_FSYNC_INT_EN_BIT, enabled);\n}\n/** Get I2C bypass enabled status.\n * When this bit is equal to 1 and I2C_MST_EN (Register 106 bit[5]) is equal to\n * 0, the host application processor will be able to directly access the\n * auxiliary I2C bus of the MPU-60X0. When this bit is equal to 0, the host\n * application processor will not be able to directly access the auxiliary I2C\n * bus of the MPU-60X0 regardless of the state of I2C_MST_EN (Register 106\n * bit[5]).\n * @return Current I2C bypass enabled status\n * @see MPU6050_RA_INT_PIN_CFG\n * @see MPU6050_INTCFG_I2C_BYPASS_EN_BIT\n */\nbool MPU6050::getI2CBypassEnabled() {\n    I2Cdev::readBit(devAddr, MPU6050_RA_INT_PIN_CFG, MPU6050_INTCFG_I2C_BYPASS_EN_BIT, buffer);\n    return buffer[0];\n}\n/** Set I2C bypass enabled status.\n * When this bit is equal to 1 and I2C_MST_EN (Register 106 bit[5]) is equal to\n * 0, the host application processor will be able to directly access the\n * auxiliary I2C bus of the MPU-60X0. When this bit is equal to 0, the host\n * application processor will not be able to directly access the auxiliary I2C\n * bus of the MPU-60X0 regardless of the state of I2C_MST_EN (Register 106\n * bit[5]).\n * @param enabled New I2C bypass enabled status\n * @see MPU6050_RA_INT_PIN_CFG\n * @see MPU6050_INTCFG_I2C_BYPASS_EN_BIT\n */\nvoid MPU6050::setI2CBypassEnabled(bool enabled) {\n    I2Cdev::writeBit(devAddr, MPU6050_RA_INT_PIN_CFG, MPU6050_INTCFG_I2C_BYPASS_EN_BIT, enabled);\n}\n/** Get reference clock output enabled status.\n * When this bit is equal to 1, a reference clock output is provided at the\n * CLKOUT pin. When this bit is equal to 0, the clock output is disabled. For\n * further information regarding CLKOUT, please refer to the MPU-60X0 Product\n * Specification document.\n * @return Current reference clock output enabled status\n * @see MPU6050_RA_INT_PIN_CFG\n * @see MPU6050_INTCFG_CLKOUT_EN_BIT\n */\nbool MPU6050::getClockOutputEnabled() {\n    I2Cdev::readBit(devAddr, MPU6050_RA_INT_PIN_CFG, MPU6050_INTCFG_CLKOUT_EN_BIT, buffer);\n    return buffer[0];\n}\n/** Set reference clock output enabled status.\n * When this bit is equal to 1, a reference clock output is provided at the\n * CLKOUT pin. When this bit is equal to 0, the clock output is disabled. For\n * further information regarding CLKOUT, please refer to the MPU-60X0 Product\n * Specification document.\n * @param enabled New reference clock output enabled status\n * @see MPU6050_RA_INT_PIN_CFG\n * @see MPU6050_INTCFG_CLKOUT_EN_BIT\n */\nvoid MPU6050::setClockOutputEnabled(bool enabled) {\n    I2Cdev::writeBit(devAddr, MPU6050_RA_INT_PIN_CFG, MPU6050_INTCFG_CLKOUT_EN_BIT, enabled);\n}\n\n// INT_ENABLE register\n\n/** Get full interrupt enabled status.\n * Full register byte for all interrupts, for quick reading. Each bit will be\n * set 0 for disabled, 1 for enabled.\n * @return Current interrupt enabled status\n * @see MPU6050_RA_INT_ENABLE\n * @see MPU6050_INTERRUPT_FF_BIT\n **/\nuint8_t MPU6050::getIntEnabled() {\n    I2Cdev::readByte(devAddr, MPU6050_RA_INT_ENABLE, buffer);\n    return buffer[0];\n}\n/** Set full interrupt enabled status.\n * Full register byte for all interrupts, for quick reading. Each bit should be\n * set 0 for disabled, 1 for enabled.\n * @param enabled New interrupt enabled status\n * @see getIntFreefallEnabled()\n * @see MPU6050_RA_INT_ENABLE\n * @see MPU6050_INTERRUPT_FF_BIT\n **/\nvoid MPU6050::setIntEnabled(uint8_t enabled) {\n    I2Cdev::writeByte(devAddr, MPU6050_RA_INT_ENABLE, enabled);\n}\n/** Get Free Fall interrupt enabled status.\n * Will be set 0 for disabled, 1 for enabled.\n * @return Current interrupt enabled status\n * @see MPU6050_RA_INT_ENABLE\n * @see MPU6050_INTERRUPT_FF_BIT\n **/\nbool MPU6050::getIntFreefallEnabled() {\n    I2Cdev::readBit(devAddr, MPU6050_RA_INT_ENABLE, MPU6050_INTERRUPT_FF_BIT, buffer);\n    return buffer[0];\n}\n/** Set Free Fall interrupt enabled status.\n * @param enabled New interrupt enabled status\n * @see getIntFreefallEnabled()\n * @see MPU6050_RA_INT_ENABLE\n * @see MPU6050_INTERRUPT_FF_BIT\n **/\nvoid MPU6050::setIntFreefallEnabled(bool enabled) {\n    I2Cdev::writeBit(devAddr, MPU6050_RA_INT_ENABLE, MPU6050_INTERRUPT_FF_BIT, enabled);\n}\n/** Get Motion Detection interrupt enabled status.\n * Will be set 0 for disabled, 1 for enabled.\n * @return Current interrupt enabled status\n * @see MPU6050_RA_INT_ENABLE\n * @see MPU6050_INTERRUPT_MOT_BIT\n **/\nbool MPU6050::getIntMotionEnabled() {\n    I2Cdev::readBit(devAddr, MPU6050_RA_INT_ENABLE, MPU6050_INTERRUPT_MOT_BIT, buffer);\n    return buffer[0];\n}\n/** Set Motion Detection interrupt enabled status.\n * @param enabled New interrupt enabled status\n * @see getIntMotionEnabled()\n * @see MPU6050_RA_INT_ENABLE\n * @see MPU6050_INTERRUPT_MOT_BIT\n **/\nvoid MPU6050::setIntMotionEnabled(bool enabled) {\n    I2Cdev::writeBit(devAddr, MPU6050_RA_INT_ENABLE, MPU6050_INTERRUPT_MOT_BIT, enabled);\n}\n/** Get Zero Motion Detection interrupt enabled status.\n * Will be set 0 for disabled, 1 for enabled.\n * @return Current interrupt enabled status\n * @see MPU6050_RA_INT_ENABLE\n * @see MPU6050_INTERRUPT_ZMOT_BIT\n **/\nbool MPU6050::getIntZeroMotionEnabled() {\n    I2Cdev::readBit(devAddr, MPU6050_RA_INT_ENABLE, MPU6050_INTERRUPT_ZMOT_BIT, buffer);\n    return buffer[0];\n}\n/** Set Zero Motion Detection interrupt enabled status.\n * @param enabled New interrupt enabled status\n * @see getIntZeroMotionEnabled()\n * @see MPU6050_RA_INT_ENABLE\n * @see MPU6050_INTERRUPT_ZMOT_BIT\n **/\nvoid MPU6050::setIntZeroMotionEnabled(bool enabled) {\n    I2Cdev::writeBit(devAddr, MPU6050_RA_INT_ENABLE, MPU6050_INTERRUPT_ZMOT_BIT, enabled);\n}\n/** Get FIFO Buffer Overflow interrupt enabled status.\n * Will be set 0 for disabled, 1 for enabled.\n * @return Current interrupt enabled status\n * @see MPU6050_RA_INT_ENABLE\n * @see MPU6050_INTERRUPT_FIFO_OFLOW_BIT\n **/\nbool MPU6050::getIntFIFOBufferOverflowEnabled() {\n    I2Cdev::readBit(devAddr, MPU6050_RA_INT_ENABLE, MPU6050_INTERRUPT_FIFO_OFLOW_BIT, buffer);\n    return buffer[0];\n}\n/** Set FIFO Buffer Overflow interrupt enabled status.\n * @param enabled New interrupt enabled status\n * @see getIntFIFOBufferOverflowEnabled()\n * @see MPU6050_RA_INT_ENABLE\n * @see MPU6050_INTERRUPT_FIFO_OFLOW_BIT\n **/\nvoid MPU6050::setIntFIFOBufferOverflowEnabled(bool enabled) {\n    I2Cdev::writeBit(devAddr, MPU6050_RA_INT_ENABLE, MPU6050_INTERRUPT_FIFO_OFLOW_BIT, enabled);\n}\n/** Get I2C Master interrupt enabled status.\n * This enables any of the I2C Master interrupt sources to generate an\n * interrupt. Will be set 0 for disabled, 1 for enabled.\n * @return Current interrupt enabled status\n * @see MPU6050_RA_INT_ENABLE\n * @see MPU6050_INTERRUPT_I2C_MST_INT_BIT\n **/\nbool MPU6050::getIntI2CMasterEnabled() {\n    I2Cdev::readBit(devAddr, MPU6050_RA_INT_ENABLE, MPU6050_INTERRUPT_I2C_MST_INT_BIT, buffer);\n    return buffer[0];\n}\n/** Set I2C Master interrupt enabled status.\n * @param enabled New interrupt enabled status\n * @see getIntI2CMasterEnabled()\n * @see MPU6050_RA_INT_ENABLE\n * @see MPU6050_INTERRUPT_I2C_MST_INT_BIT\n **/\nvoid MPU6050::setIntI2CMasterEnabled(bool enabled) {\n    I2Cdev::writeBit(devAddr, MPU6050_RA_INT_ENABLE, MPU6050_INTERRUPT_I2C_MST_INT_BIT, enabled);\n}\n/** Get Data Ready interrupt enabled setting.\n * This event occurs each time a write operation to all of the sensor registers\n * has been completed. Will be set 0 for disabled, 1 for enabled.\n * @return Current interrupt enabled status\n * @see MPU6050_RA_INT_ENABLE\n * @see MPU6050_INTERRUPT_DATA_RDY_BIT\n */\nbool MPU6050::getIntDataReadyEnabled() {\n    I2Cdev::readBit(devAddr, MPU6050_RA_INT_ENABLE, MPU6050_INTERRUPT_DATA_RDY_BIT, buffer);\n    return buffer[0];\n}\n/** Set Data Ready interrupt enabled status.\n * @param enabled New interrupt enabled status\n * @see getIntDataReadyEnabled()\n * @see MPU6050_RA_INT_CFG\n * @see MPU6050_INTERRUPT_DATA_RDY_BIT\n */\nvoid MPU6050::setIntDataReadyEnabled(bool enabled) {\n    I2Cdev::writeBit(devAddr, MPU6050_RA_INT_ENABLE, MPU6050_INTERRUPT_DATA_RDY_BIT, enabled);\n}\n\n// INT_STATUS register\n\n/** Get full set of interrupt status bits.\n * These bits clear to 0 after the register has been read. Very useful\n * for getting multiple INT statuses, since each single bit read clears\n * all of them because it has to read the whole byte.\n * @return Current interrupt status\n * @see MPU6050_RA_INT_STATUS\n */\nuint8_t MPU6050::getIntStatus() {\n    I2Cdev::readByte(devAddr, MPU6050_RA_INT_STATUS, buffer);\n    return buffer[0];\n}\n/** Get Free Fall interrupt status.\n * This bit automatically sets to 1 when a Free Fall interrupt has been\n * generated. The bit clears to 0 after the register has been read.\n * @return Current interrupt status\n * @see MPU6050_RA_INT_STATUS\n * @see MPU6050_INTERRUPT_FF_BIT\n */\nbool MPU6050::getIntFreefallStatus() {\n    I2Cdev::readBit(devAddr, MPU6050_RA_INT_STATUS, MPU6050_INTERRUPT_FF_BIT, buffer);\n    return buffer[0];\n}\n/** Get Motion Detection interrupt status.\n * This bit automatically sets to 1 when a Motion Detection interrupt has been\n * generated. The bit clears to 0 after the register has been read.\n * @return Current interrupt status\n * @see MPU6050_RA_INT_STATUS\n * @see MPU6050_INTERRUPT_MOT_BIT\n */\nbool MPU6050::getIntMotionStatus() {\n    I2Cdev::readBit(devAddr, MPU6050_RA_INT_STATUS, MPU6050_INTERRUPT_MOT_BIT, buffer);\n    return buffer[0];\n}\n/** Get Zero Motion Detection interrupt status.\n * This bit automatically sets to 1 when a Zero Motion Detection interrupt has\n * been generated. The bit clears to 0 after the register has been read.\n * @return Current interrupt status\n * @see MPU6050_RA_INT_STATUS\n * @see MPU6050_INTERRUPT_ZMOT_BIT\n */\nbool MPU6050::getIntZeroMotionStatus() {\n    I2Cdev::readBit(devAddr, MPU6050_RA_INT_STATUS, MPU6050_INTERRUPT_ZMOT_BIT, buffer);\n    return buffer[0];\n}\n/** Get FIFO Buffer Overflow interrupt status.\n * This bit automatically sets to 1 when a Free Fall interrupt has been\n * generated. The bit clears to 0 after the register has been read.\n * @return Current interrupt status\n * @see MPU6050_RA_INT_STATUS\n * @see MPU6050_INTERRUPT_FIFO_OFLOW_BIT\n */\nbool MPU6050::getIntFIFOBufferOverflowStatus() {\n    I2Cdev::readBit(devAddr, MPU6050_RA_INT_STATUS, MPU6050_INTERRUPT_FIFO_OFLOW_BIT, buffer);\n    return buffer[0];\n}\n/** Get I2C Master interrupt status.\n * This bit automatically sets to 1 when an I2C Master interrupt has been\n * generated. For a list of I2C Master interrupts, please refer to Register 54.\n * The bit clears to 0 after the register has been read.\n * @return Current interrupt status\n * @see MPU6050_RA_INT_STATUS\n * @see MPU6050_INTERRUPT_I2C_MST_INT_BIT\n */\nbool MPU6050::getIntI2CMasterStatus() {\n    I2Cdev::readBit(devAddr, MPU6050_RA_INT_STATUS, MPU6050_INTERRUPT_I2C_MST_INT_BIT, buffer);\n    return buffer[0];\n}\n/** Get Data Ready interrupt status.\n * This bit automatically sets to 1 when a Data Ready interrupt has been\n * generated. The bit clears to 0 after the register has been read.\n * @return Current interrupt status\n * @see MPU6050_RA_INT_STATUS\n * @see MPU6050_INTERRUPT_DATA_RDY_BIT\n */\nbool MPU6050::getIntDataReadyStatus() {\n    I2Cdev::readBit(devAddr, MPU6050_RA_INT_STATUS, MPU6050_INTERRUPT_DATA_RDY_BIT, buffer);\n    return buffer[0];\n}\n\n// ACCEL_*OUT_* registers\n\n/** Get raw 9-axis motion sensor readings (accel/gyro/compass).\n * FUNCTION NOT FULLY IMPLEMENTED YET.\n * @param ax 16-bit signed integer container for accelerometer X-axis value\n * @param ay 16-bit signed integer container for accelerometer Y-axis value\n * @param az 16-bit signed integer container for accelerometer Z-axis value\n * @param gx 16-bit signed integer container for gyroscope X-axis value\n * @param gy 16-bit signed integer container for gyroscope Y-axis value\n * @param gz 16-bit signed integer container for gyroscope Z-axis value\n * @param mx 16-bit signed integer container for magnetometer X-axis value\n * @param my 16-bit signed integer container for magnetometer Y-axis value\n * @param mz 16-bit signed integer container for magnetometer Z-axis value\n * @see getMotion6()\n * @see getAcceleration()\n * @see getRotation()\n * @see MPU6050_RA_ACCEL_XOUT_H\n */\nvoid MPU6050::getMotion9(int16_t* ax, int16_t* ay, int16_t* az, int16_t* gx, int16_t* gy, int16_t* gz, int16_t* mx, int16_t* my, int16_t* mz) {\n    getMotion6(ax, ay, az, gx, gy, gz);\n    // TODO: magnetometer integration\n}\n/** Get raw 6-axis motion sensor readings (accel/gyro).\n * Retrieves all currently available motion sensor values.\n * @param ax 16-bit signed integer container for accelerometer X-axis value\n * @param ay 16-bit signed integer container for accelerometer Y-axis value\n * @param az 16-bit signed integer container for accelerometer Z-axis value\n * @param gx 16-bit signed integer container for gyroscope X-axis value\n * @param gy 16-bit signed integer container for gyroscope Y-axis value\n * @param gz 16-bit signed integer container for gyroscope Z-axis value\n * @see getAcceleration()\n * @see getRotation()\n * @see MPU6050_RA_ACCEL_XOUT_H\n */\nvoid MPU6050::getMotion6(int16_t* ax, int16_t* ay, int16_t* az, int16_t* gx, int16_t* gy, int16_t* gz) {\n    I2Cdev::readBytes(devAddr, MPU6050_RA_ACCEL_XOUT_H, 14, buffer);\n    *ax = (((int16_t)buffer[0]) << 8) | buffer[1];\n    *ay = (((int16_t)buffer[2]) << 8) | buffer[3];\n    *az = (((int16_t)buffer[4]) << 8) | buffer[5];\n    *gx = (((int16_t)buffer[8]) << 8) | buffer[9];\n    *gy = (((int16_t)buffer[10]) << 8) | buffer[11];\n    *gz = (((int16_t)buffer[12]) << 8) | buffer[13];\n}\n/** Get 3-axis accelerometer readings.\n * These registers store the most recent accelerometer measurements.\n * Accelerometer measurements are written to these registers at the Sample Rate\n * as defined in Register 25.\n *\n * The accelerometer measurement registers, along with the temperature\n * measurement registers, gyroscope measurement registers, and external sensor\n * data registers, are composed of two sets of registers: an internal register\n * set and a user-facing read register set.\n *\n * The data within the accelerometer sensors' internal register set is always\n * updated at the Sample Rate. Meanwhile, the user-facing read register set\n * duplicates the internal register set's data values whenever the serial\n * interface is idle. This guarantees that a burst read of sensor registers will\n * read measurements from the same sampling instant. Note that if burst reads\n * are not used, the user is responsible for ensuring a set of single byte reads\n * correspond to a single sampling instant by checking the Data Ready interrupt.\n *\n * Each 16-bit accelerometer measurement has a full scale defined in ACCEL_FS\n * (Register 28). For each full scale setting, the accelerometers' sensitivity\n * per LSB in ACCEL_xOUT is shown in the table below:\n *\n * <pre>\n * AFS_SEL | Full Scale Range | LSB Sensitivity\n * --------+------------------+----------------\n * 0       | +/- 2g           | 8192 LSB/mg\n * 1       | +/- 4g           | 4096 LSB/mg\n * 2       | +/- 8g           | 2048 LSB/mg\n * 3       | +/- 16g          | 1024 LSB/mg\n * </pre>\n *\n * @param x 16-bit signed integer container for X-axis acceleration\n * @param y 16-bit signed integer container for Y-axis acceleration\n * @param z 16-bit signed integer container for Z-axis acceleration\n * @see MPU6050_RA_GYRO_XOUT_H\n */\nvoid MPU6050::getAcceleration(int16_t* x, int16_t* y, int16_t* z) {\n    I2Cdev::readBytes(devAddr, MPU6050_RA_ACCEL_XOUT_H, 6, buffer);\n    *x = (((int16_t)buffer[0]) << 8) | buffer[1];\n    *y = (((int16_t)buffer[2]) << 8) | buffer[3];\n    *z = (((int16_t)buffer[4]) << 8) | buffer[5];\n}\n/** Get X-axis accelerometer reading.\n * @return X-axis acceleration measurement in 16-bit 2's complement format\n * @see getMotion6()\n * @see MPU6050_RA_ACCEL_XOUT_H\n */\nint16_t MPU6050::getAccelerationX() {\n    I2Cdev::readBytes(devAddr, MPU6050_RA_ACCEL_XOUT_H, 2, buffer);\n    return (((int16_t)buffer[0]) << 8) | buffer[1];\n}\n/** Get Y-axis accelerometer reading.\n * @return Y-axis acceleration measurement in 16-bit 2's complement format\n * @see getMotion6()\n * @see MPU6050_RA_ACCEL_YOUT_H\n */\nint16_t MPU6050::getAccelerationY() {\n    I2Cdev::readBytes(devAddr, MPU6050_RA_ACCEL_YOUT_H, 2, buffer);\n    return (((int16_t)buffer[0]) << 8) | buffer[1];\n}\n/** Get Z-axis accelerometer reading.\n * @return Z-axis acceleration measurement in 16-bit 2's complement format\n * @see getMotion6()\n * @see MPU6050_RA_ACCEL_ZOUT_H\n */\nint16_t MPU6050::getAccelerationZ() {\n    I2Cdev::readBytes(devAddr, MPU6050_RA_ACCEL_ZOUT_H, 2, buffer);\n    return (((int16_t)buffer[0]) << 8) | buffer[1];\n}\n\n// TEMP_OUT_* registers\n\n/** Get current internal temperature.\n * @return Temperature reading in 16-bit 2's complement format\n * @see MPU6050_RA_TEMP_OUT_H\n */\nint16_t MPU6050::getTemperature() {\n    I2Cdev::readBytes(devAddr, MPU6050_RA_TEMP_OUT_H, 2, buffer);\n    return (((int16_t)buffer[0]) << 8) | buffer[1];\n}\n\n// GYRO_*OUT_* registers\n\n/** Get 3-axis gyroscope readings.\n * These gyroscope measurement registers, along with the accelerometer\n * measurement registers, temperature measurement registers, and external sensor\n * data registers, are composed of two sets of registers: an internal register\n * set and a user-facing read register set.\n * The data within the gyroscope sensors' internal register set is always\n * updated at the Sample Rate. Meanwhile, the user-facing read register set\n * duplicates the internal register set's data values whenever the serial\n * interface is idle. This guarantees that a burst read of sensor registers will\n * read measurements from the same sampling instant. Note that if burst reads\n * are not used, the user is responsible for ensuring a set of single byte reads\n * correspond to a single sampling instant by checking the Data Ready interrupt.\n *\n * Each 16-bit gyroscope measurement has a full scale defined in FS_SEL\n * (Register 27). For each full scale setting, the gyroscopes' sensitivity per\n * LSB in GYRO_xOUT is shown in the table below:\n *\n * <pre>\n * FS_SEL | Full Scale Range   | LSB Sensitivity\n * -------+--------------------+----------------\n * 0      | +/- 250 degrees/s  | 131 LSB/deg/s\n * 1      | +/- 500 degrees/s  | 65.5 LSB/deg/s\n * 2      | +/- 1000 degrees/s | 32.8 LSB/deg/s\n * 3      | +/- 2000 degrees/s | 16.4 LSB/deg/s\n * </pre>\n *\n * @param x 16-bit signed integer container for X-axis rotation\n * @param y 16-bit signed integer container for Y-axis rotation\n * @param z 16-bit signed integer container for Z-axis rotation\n * @see getMotion6()\n * @see MPU6050_RA_GYRO_XOUT_H\n */\nvoid MPU6050::getRotation(int16_t* x, int16_t* y, int16_t* z) {\n    I2Cdev::readBytes(devAddr, MPU6050_RA_GYRO_XOUT_H, 6, buffer);\n    *x = (((int16_t)buffer[0]) << 8) | buffer[1];\n    *y = (((int16_t)buffer[2]) << 8) | buffer[3];\n    *z = (((int16_t)buffer[4]) << 8) | buffer[5];\n}\n/** Get X-axis gyroscope reading.\n * @return X-axis rotation measurement in 16-bit 2's complement format\n * @see getMotion6()\n * @see MPU6050_RA_GYRO_XOUT_H\n */\nint16_t MPU6050::getRotationX() {\n    I2Cdev::readBytes(devAddr, MPU6050_RA_GYRO_XOUT_H, 2, buffer);\n    return (((int16_t)buffer[0]) << 8) | buffer[1];\n}\n/** Get Y-axis gyroscope reading.\n * @return Y-axis rotation measurement in 16-bit 2's complement format\n * @see getMotion6()\n * @see MPU6050_RA_GYRO_YOUT_H\n */\nint16_t MPU6050::getRotationY() {\n    I2Cdev::readBytes(devAddr, MPU6050_RA_GYRO_YOUT_H, 2, buffer);\n    return (((int16_t)buffer[0]) << 8) | buffer[1];\n}\n/** Get Z-axis gyroscope reading.\n * @return Z-axis rotation measurement in 16-bit 2's complement format\n * @see getMotion6()\n * @see MPU6050_RA_GYRO_ZOUT_H\n */\nint16_t MPU6050::getRotationZ() {\n    I2Cdev::readBytes(devAddr, MPU6050_RA_GYRO_ZOUT_H, 2, buffer);\n    return (((int16_t)buffer[0]) << 8) | buffer[1];\n}\n\n// EXT_SENS_DATA_* registers\n\n/** Read single byte from external sensor data register.\n * These registers store data read from external sensors by the Slave 0, 1, 2,\n * and 3 on the auxiliary I2C interface. Data read by Slave 4 is stored in\n * I2C_SLV4_DI (Register 53).\n *\n * External sensor data is written to these registers at the Sample Rate as\n * defined in Register 25. This access rate can be reduced by using the Slave\n * Delay Enable registers (Register 103).\n *\n * External sensor data registers, along with the gyroscope measurement\n * registers, accelerometer measurement registers, and temperature measurement\n * registers, are composed of two sets of registers: an internal register set\n * and a user-facing read register set.\n *\n * The data within the external sensors' internal register set is always updated\n * at the Sample Rate (or the reduced access rate) whenever the serial interface\n * is idle. This guarantees that a burst read of sensor registers will read\n * measurements from the same sampling instant. Note that if burst reads are not\n * used, the user is responsible for ensuring a set of single byte reads\n * correspond to a single sampling instant by checking the Data Ready interrupt.\n *\n * Data is placed in these external sensor data registers according to\n * I2C_SLV0_CTRL, I2C_SLV1_CTRL, I2C_SLV2_CTRL, and I2C_SLV3_CTRL (Registers 39,\n * 42, 45, and 48). When more than zero bytes are read (I2C_SLVx_LEN > 0) from\n * an enabled slave (I2C_SLVx_EN = 1), the slave is read at the Sample Rate (as\n * defined in Register 25) or delayed rate (if specified in Register 52 and\n * 103). During each Sample cycle, slave reads are performed in order of Slave\n * number. If all slaves are enabled with more than zero bytes to be read, the\n * order will be Slave 0, followed by Slave 1, Slave 2, and Slave 3.\n *\n * Each enabled slave will have EXT_SENS_DATA registers associated with it by\n * number of bytes read (I2C_SLVx_LEN) in order of slave number, starting from\n * EXT_SENS_DATA_00. Note that this means enabling or disabling a slave may\n * change the higher numbered slaves' associated registers. Furthermore, if\n * fewer total bytes are being read from the external sensors as a result of\n * such a change, then the data remaining in the registers which no longer have\n * an associated slave device (i.e. high numbered registers) will remain in\n * these previously allocated registers unless reset.\n *\n * If the sum of the read lengths of all SLVx transactions exceed the number of\n * available EXT_SENS_DATA registers, the excess bytes will be dropped. There\n * are 24 EXT_SENS_DATA registers and hence the total read lengths between all\n * the slaves cannot be greater than 24 or some bytes will be lost.\n *\n * Note: Slave 4's behavior is distinct from that of Slaves 0-3. For further\n * information regarding the characteristics of Slave 4, please refer to\n * Registers 49 to 53.\n *\n * EXAMPLE:\n * Suppose that Slave 0 is enabled with 4 bytes to be read (I2C_SLV0_EN = 1 and\n * I2C_SLV0_LEN = 4) while Slave 1 is enabled with 2 bytes to be read so that\n * I2C_SLV1_EN = 1 and I2C_SLV1_LEN = 2. In such a situation, EXT_SENS_DATA _00\n * through _03 will be associated with Slave 0, while EXT_SENS_DATA _04 and 05\n * will be associated with Slave 1. If Slave 2 is enabled as well, registers\n * starting from EXT_SENS_DATA_06 will be allocated to Slave 2.\n *\n * If Slave 2 is disabled while Slave 3 is enabled in this same situation, then\n * registers starting from EXT_SENS_DATA_06 will be allocated to Slave 3\n * instead.\n *\n * REGISTER ALLOCATION FOR DYNAMIC DISABLE VS. NORMAL DISABLE:\n * If a slave is disabled at any time, the space initially allocated to the\n * slave in the EXT_SENS_DATA register, will remain associated with that slave.\n * This is to avoid dynamic adjustment of the register allocation.\n *\n * The allocation of the EXT_SENS_DATA registers is recomputed only when (1) all\n * slaves are disabled, or (2) the I2C_MST_RST bit is set (Register 106).\n *\n * This above is also true if one of the slaves gets NACKed and stops\n * functioning.\n *\n * @param position Starting position (0-23)\n * @return Byte read from register\n */\nuint8_t MPU6050::getExternalSensorByte(int position) {\n    I2Cdev::readByte(devAddr, MPU6050_RA_EXT_SENS_DATA_00 + position, buffer);\n    return buffer[0];\n}\n/** Read word (2 bytes) from external sensor data registers.\n * @param position Starting position (0-21)\n * @return Word read from register\n * @see getExternalSensorByte()\n */\nuint16_t MPU6050::getExternalSensorWord(int position) {\n    I2Cdev::readBytes(devAddr, MPU6050_RA_EXT_SENS_DATA_00 + position, 2, buffer);\n    return (((uint16_t)buffer[0]) << 8) | buffer[1];\n}\n/** Read double word (4 bytes) from external sensor data registers.\n * @param position Starting position (0-20)\n * @return Double word read from registers\n * @see getExternalSensorByte()\n */\nuint32_t MPU6050::getExternalSensorDWord(int position) {\n    I2Cdev::readBytes(devAddr, MPU6050_RA_EXT_SENS_DATA_00 + position, 4, buffer);\n    return (((uint32_t)buffer[0]) << 24) | (((uint32_t)buffer[1]) << 16) | (((uint16_t)buffer[2]) << 8) | buffer[3];\n}\n\n// MOT_DETECT_STATUS register\n\n/** Get X-axis negative motion detection interrupt status.\n * @return Motion detection status\n * @see MPU6050_RA_MOT_DETECT_STATUS\n * @see MPU6050_MOTION_MOT_XNEG_BIT\n */\nbool MPU6050::getXNegMotionDetected() {\n    I2Cdev::readBit(devAddr, MPU6050_RA_MOT_DETECT_STATUS, MPU6050_MOTION_MOT_XNEG_BIT, buffer);\n    return buffer[0];\n}\n/** Get X-axis positive motion detection interrupt status.\n * @return Motion detection status\n * @see MPU6050_RA_MOT_DETECT_STATUS\n * @see MPU6050_MOTION_MOT_XPOS_BIT\n */\nbool MPU6050::getXPosMotionDetected() {\n    I2Cdev::readBit(devAddr, MPU6050_RA_MOT_DETECT_STATUS, MPU6050_MOTION_MOT_XPOS_BIT, buffer);\n    return buffer[0];\n}\n/** Get Y-axis negative motion detection interrupt status.\n * @return Motion detection status\n * @see MPU6050_RA_MOT_DETECT_STATUS\n * @see MPU6050_MOTION_MOT_YNEG_BIT\n */\nbool MPU6050::getYNegMotionDetected() {\n    I2Cdev::readBit(devAddr, MPU6050_RA_MOT_DETECT_STATUS, MPU6050_MOTION_MOT_YNEG_BIT, buffer);\n    return buffer[0];\n}\n/** Get Y-axis positive motion detection interrupt status.\n * @return Motion detection status\n * @see MPU6050_RA_MOT_DETECT_STATUS\n * @see MPU6050_MOTION_MOT_YPOS_BIT\n */\nbool MPU6050::getYPosMotionDetected() {\n    I2Cdev::readBit(devAddr, MPU6050_RA_MOT_DETECT_STATUS, MPU6050_MOTION_MOT_YPOS_BIT, buffer);\n    return buffer[0];\n}\n/** Get Z-axis negative motion detection interrupt status.\n * @return Motion detection status\n * @see MPU6050_RA_MOT_DETECT_STATUS\n * @see MPU6050_MOTION_MOT_ZNEG_BIT\n */\nbool MPU6050::getZNegMotionDetected() {\n    I2Cdev::readBit(devAddr, MPU6050_RA_MOT_DETECT_STATUS, MPU6050_MOTION_MOT_ZNEG_BIT, buffer);\n    return buffer[0];\n}\n/** Get Z-axis positive motion detection interrupt status.\n * @return Motion detection status\n * @see MPU6050_RA_MOT_DETECT_STATUS\n * @see MPU6050_MOTION_MOT_ZPOS_BIT\n */\nbool MPU6050::getZPosMotionDetected() {\n    I2Cdev::readBit(devAddr, MPU6050_RA_MOT_DETECT_STATUS, MPU6050_MOTION_MOT_ZPOS_BIT, buffer);\n    return buffer[0];\n}\n/** Get zero motion detection interrupt status.\n * @return Motion detection status\n * @see MPU6050_RA_MOT_DETECT_STATUS\n * @see MPU6050_MOTION_MOT_ZRMOT_BIT\n */\nbool MPU6050::getZeroMotionDetected() {\n    I2Cdev::readBit(devAddr, MPU6050_RA_MOT_DETECT_STATUS, MPU6050_MOTION_MOT_ZRMOT_BIT, buffer);\n    return buffer[0];\n}\n\n// I2C_SLV*_DO register\n\n/** Write byte to Data Output container for specified slave.\n * This register holds the output data written into Slave when Slave is set to\n * write mode. For further information regarding Slave control, please\n * refer to Registers 37 to 39 and immediately following.\n * @param num Slave number (0-3)\n * @param data Byte to write\n * @see MPU6050_RA_I2C_SLV0_DO\n */\nvoid MPU6050::setSlaveOutputByte(uint8_t num, uint8_t data) {\n    if (num > 3) return;\n    I2Cdev::writeByte(devAddr, MPU6050_RA_I2C_SLV0_DO + num, data);\n}\n\n// I2C_MST_DELAY_CTRL register\n\n/** Get external data shadow delay enabled status.\n * This register is used to specify the timing of external sensor data\n * shadowing. When DELAY_ES_SHADOW is set to 1, shadowing of external\n * sensor data is delayed until all data has been received.\n * @return Current external data shadow delay enabled status.\n * @see MPU6050_RA_I2C_MST_DELAY_CTRL\n * @see MPU6050_DELAYCTRL_DELAY_ES_SHADOW_BIT\n */\nbool MPU6050::getExternalShadowDelayEnabled() {\n    I2Cdev::readBit(devAddr, MPU6050_RA_I2C_MST_DELAY_CTRL, MPU6050_DELAYCTRL_DELAY_ES_SHADOW_BIT, buffer);\n    return buffer[0];\n}\n/** Set external data shadow delay enabled status.\n * @param enabled New external data shadow delay enabled status.\n * @see getExternalShadowDelayEnabled()\n * @see MPU6050_RA_I2C_MST_DELAY_CTRL\n * @see MPU6050_DELAYCTRL_DELAY_ES_SHADOW_BIT\n */\nvoid MPU6050::setExternalShadowDelayEnabled(bool enabled) {\n    I2Cdev::writeBit(devAddr, MPU6050_RA_I2C_MST_DELAY_CTRL, MPU6050_DELAYCTRL_DELAY_ES_SHADOW_BIT, enabled);\n}\n/** Get slave delay enabled status.\n * When a particular slave delay is enabled, the rate of access for the that\n * slave device is reduced. When a slave's access rate is decreased relative to\n * the Sample Rate, the slave is accessed every:\n *\n *     1 / (1 + I2C_MST_DLY) Samples\n *\n * This base Sample Rate in turn is determined by SMPLRT_DIV (register  * 25)\n * and DLPF_CFG (register 26).\n *\n * For further information regarding I2C_MST_DLY, please refer to register 52.\n * For further information regarding the Sample Rate, please refer to register 25.\n *\n * @param num Slave number (0-4)\n * @return Current slave delay enabled status.\n * @see MPU6050_RA_I2C_MST_DELAY_CTRL\n * @see MPU6050_DELAYCTRL_I2C_SLV0_DLY_EN_BIT\n */\nbool MPU6050::getSlaveDelayEnabled(uint8_t num) {\n    // MPU6050_DELAYCTRL_I2C_SLV4_DLY_EN_BIT is 4, SLV3 is 3, etc.\n    if (num > 4) return 0;\n    I2Cdev::readBit(devAddr, MPU6050_RA_I2C_MST_DELAY_CTRL, num, buffer);\n    return buffer[0];\n}\n/** Set slave delay enabled status.\n * @param num Slave number (0-4)\n * @param enabled New slave delay enabled status.\n * @see MPU6050_RA_I2C_MST_DELAY_CTRL\n * @see MPU6050_DELAYCTRL_I2C_SLV0_DLY_EN_BIT\n */\nvoid MPU6050::setSlaveDelayEnabled(uint8_t num, bool enabled) {\n    I2Cdev::writeBit(devAddr, MPU6050_RA_I2C_MST_DELAY_CTRL, num, enabled);\n}\n\n// SIGNAL_PATH_RESET register\n\n/** Reset gyroscope signal path.\n * The reset will revert the signal path analog to digital converters and\n * filters to their power up configurations.\n * @see MPU6050_RA_SIGNAL_PATH_RESET\n * @see MPU6050_PATHRESET_GYRO_RESET_BIT\n */\nvoid MPU6050::resetGyroscopePath() {\n    I2Cdev::writeBit(devAddr, MPU6050_RA_SIGNAL_PATH_RESET, MPU6050_PATHRESET_GYRO_RESET_BIT, true);\n}\n/** Reset accelerometer signal path.\n * The reset will revert the signal path analog to digital converters and\n * filters to their power up configurations.\n * @see MPU6050_RA_SIGNAL_PATH_RESET\n * @see MPU6050_PATHRESET_ACCEL_RESET_BIT\n */\nvoid MPU6050::resetAccelerometerPath() {\n    I2Cdev::writeBit(devAddr, MPU6050_RA_SIGNAL_PATH_RESET, MPU6050_PATHRESET_ACCEL_RESET_BIT, true);\n}\n/** Reset temperature sensor signal path.\n * The reset will revert the signal path analog to digital converters and\n * filters to their power up configurations.\n * @see MPU6050_RA_SIGNAL_PATH_RESET\n * @see MPU6050_PATHRESET_TEMP_RESET_BIT\n */\nvoid MPU6050::resetTemperaturePath() {\n    I2Cdev::writeBit(devAddr, MPU6050_RA_SIGNAL_PATH_RESET, MPU6050_PATHRESET_TEMP_RESET_BIT, true);\n}\n\n// MOT_DETECT_CTRL register\n\n/** Get accelerometer power-on delay.\n * The accelerometer data path provides samples to the sensor registers, Motion\n * detection, Zero Motion detection, and Free Fall detection modules. The\n * signal path contains filters which must be flushed on wake-up with new\n * samples before the detection modules begin operations. The default wake-up\n * delay, of 4ms can be lengthened by up to 3ms. This additional delay is\n * specified in ACCEL_ON_DELAY in units of 1 LSB = 1 ms. The user may select\n * any value above zero unless instructed otherwise by InvenSense. Please refer\n * to Section 8 of the MPU-6000/MPU-6050 Product Specification document for\n * further information regarding the detection modules.\n * @return Current accelerometer power-on delay\n * @see MPU6050_RA_MOT_DETECT_CTRL\n * @see MPU6050_DETECT_ACCEL_ON_DELAY_BIT\n */\nuint8_t MPU6050::getAccelerometerPowerOnDelay() {\n    I2Cdev::readBits(devAddr, MPU6050_RA_MOT_DETECT_CTRL, MPU6050_DETECT_ACCEL_ON_DELAY_BIT, MPU6050_DETECT_ACCEL_ON_DELAY_LENGTH, buffer);\n    return buffer[0];\n}\n/** Set accelerometer power-on delay.\n * @param delay New accelerometer power-on delay (0-3)\n * @see getAccelerometerPowerOnDelay()\n * @see MPU6050_RA_MOT_DETECT_CTRL\n * @see MPU6050_DETECT_ACCEL_ON_DELAY_BIT\n */\nvoid MPU6050::setAccelerometerPowerOnDelay(uint8_t delay) {\n    I2Cdev::writeBits(devAddr, MPU6050_RA_MOT_DETECT_CTRL, MPU6050_DETECT_ACCEL_ON_DELAY_BIT, MPU6050_DETECT_ACCEL_ON_DELAY_LENGTH, delay);\n}\n/** Get Free Fall detection counter decrement configuration.\n * Detection is registered by the Free Fall detection module after accelerometer\n * measurements meet their respective threshold conditions over a specified\n * number of samples. When the threshold conditions are met, the corresponding\n * detection counter increments by 1. The user may control the rate at which the\n * detection counter decrements when the threshold condition is not met by\n * configuring FF_COUNT. The decrement rate can be set according to the\n * following table:\n *\n * <pre>\n * FF_COUNT | Counter Decrement\n * ---------+------------------\n * 0        | Reset\n * 1        | 1\n * 2        | 2\n * 3        | 4\n * </pre>\n *\n * When FF_COUNT is configured to 0 (reset), any non-qualifying sample will\n * reset the counter to 0. For further information on Free Fall detection,\n * please refer to Registers 29 to 32.\n *\n * @return Current decrement configuration\n * @see MPU6050_RA_MOT_DETECT_CTRL\n * @see MPU6050_DETECT_FF_COUNT_BIT\n */\nuint8_t MPU6050::getFreefallDetectionCounterDecrement() {\n    I2Cdev::readBits(devAddr, MPU6050_RA_MOT_DETECT_CTRL, MPU6050_DETECT_FF_COUNT_BIT, MPU6050_DETECT_FF_COUNT_LENGTH, buffer);\n    return buffer[0];\n}\n/** Set Free Fall detection counter decrement configuration.\n * @param decrement New decrement configuration value\n * @see getFreefallDetectionCounterDecrement()\n * @see MPU6050_RA_MOT_DETECT_CTRL\n * @see MPU6050_DETECT_FF_COUNT_BIT\n */\nvoid MPU6050::setFreefallDetectionCounterDecrement(uint8_t decrement) {\n    I2Cdev::writeBits(devAddr, MPU6050_RA_MOT_DETECT_CTRL, MPU6050_DETECT_FF_COUNT_BIT, MPU6050_DETECT_FF_COUNT_LENGTH, decrement);\n}\n/** Get Motion detection counter decrement configuration.\n * Detection is registered by the Motion detection module after accelerometer\n * measurements meet their respective threshold conditions over a specified\n * number of samples. When the threshold conditions are met, the corresponding\n * detection counter increments by 1. The user may control the rate at which the\n * detection counter decrements when the threshold condition is not met by\n * configuring MOT_COUNT. The decrement rate can be set according to the\n * following table:\n *\n * <pre>\n * MOT_COUNT | Counter Decrement\n * ----------+------------------\n * 0         | Reset\n * 1         | 1\n * 2         | 2\n * 3         | 4\n * </pre>\n *\n * When MOT_COUNT is configured to 0 (reset), any non-qualifying sample will\n * reset the counter to 0. For further information on Motion detection,\n * please refer to Registers 29 to 32.\n *\n */\nuint8_t MPU6050::getMotionDetectionCounterDecrement() {\n    I2Cdev::readBits(devAddr, MPU6050_RA_MOT_DETECT_CTRL, MPU6050_DETECT_MOT_COUNT_BIT, MPU6050_DETECT_MOT_COUNT_LENGTH, buffer);\n    return buffer[0];\n}\n/** Set Motion detection counter decrement configuration.\n * @param decrement New decrement configuration value\n * @see getMotionDetectionCounterDecrement()\n * @see MPU6050_RA_MOT_DETECT_CTRL\n * @see MPU6050_DETECT_MOT_COUNT_BIT\n */\nvoid MPU6050::setMotionDetectionCounterDecrement(uint8_t decrement) {\n    I2Cdev::writeBits(devAddr, MPU6050_RA_MOT_DETECT_CTRL, MPU6050_DETECT_MOT_COUNT_BIT, MPU6050_DETECT_MOT_COUNT_LENGTH, decrement);\n}\n\n// USER_CTRL register\n\n/** Get FIFO enabled status.\n * When this bit is set to 0, the FIFO buffer is disabled. The FIFO buffer\n * cannot be written to or read from while disabled. The FIFO buffer's state\n * does not change unless the MPU-60X0 is power cycled.\n * @return Current FIFO enabled status\n * @see MPU6050_RA_USER_CTRL\n * @see MPU6050_USERCTRL_FIFO_EN_BIT\n */\nbool MPU6050::getFIFOEnabled() {\n    I2Cdev::readBit(devAddr, MPU6050_RA_USER_CTRL, MPU6050_USERCTRL_FIFO_EN_BIT, buffer);\n    return buffer[0];\n}\n/** Set FIFO enabled status.\n * @param enabled New FIFO enabled status\n * @see getFIFOEnabled()\n * @see MPU6050_RA_USER_CTRL\n * @see MPU6050_USERCTRL_FIFO_EN_BIT\n */\nvoid MPU6050::setFIFOEnabled(bool enabled) {\n    I2Cdev::writeBit(devAddr, MPU6050_RA_USER_CTRL, MPU6050_USERCTRL_FIFO_EN_BIT, enabled);\n}\n/** Get I2C Master Mode enabled status.\n * When this mode is enabled, the MPU-60X0 acts as the I2C Master to the\n * external sensor slave devices on the auxiliary I2C bus. When this bit is\n * cleared to 0, the auxiliary I2C bus lines (AUX_DA and AUX_CL) are logically\n * driven by the primary I2C bus (SDA and SCL). This is a precondition to\n * enabling Bypass Mode. For further information regarding Bypass Mode, please\n * refer to Register 55.\n * @return Current I2C Master Mode enabled status\n * @see MPU6050_RA_USER_CTRL\n * @see MPU6050_USERCTRL_I2C_MST_EN_BIT\n */\nbool MPU6050::getI2CMasterModeEnabled() {\n    I2Cdev::readBit(devAddr, MPU6050_RA_USER_CTRL, MPU6050_USERCTRL_I2C_MST_EN_BIT, buffer);\n    return buffer[0];\n}\n/** Set I2C Master Mode enabled status.\n * @param enabled New I2C Master Mode enabled status\n * @see getI2CMasterModeEnabled()\n * @see MPU6050_RA_USER_CTRL\n * @see MPU6050_USERCTRL_I2C_MST_EN_BIT\n */\nvoid MPU6050::setI2CMasterModeEnabled(bool enabled) {\n    I2Cdev::writeBit(devAddr, MPU6050_RA_USER_CTRL, MPU6050_USERCTRL_I2C_MST_EN_BIT, enabled);\n}\n/** Switch from I2C to SPI mode (MPU-6000 only)\n * If this is set, the primary SPI interface will be enabled in place of the\n * disabled primary I2C interface.\n */\nvoid MPU6050::switchSPIEnabled(bool enabled) {\n    I2Cdev::writeBit(devAddr, MPU6050_RA_USER_CTRL, MPU6050_USERCTRL_I2C_IF_DIS_BIT, enabled);\n}\n/** Reset the FIFO.\n * This bit resets the FIFO buffer when set to 1 while FIFO_EN equals 0. This\n * bit automatically clears to 0 after the reset has been triggered.\n * @see MPU6050_RA_USER_CTRL\n * @see MPU6050_USERCTRL_FIFO_RESET_BIT\n */\nvoid MPU6050::resetFIFO() {\n    I2Cdev::writeBit(devAddr, MPU6050_RA_USER_CTRL, MPU6050_USERCTRL_FIFO_RESET_BIT, true);\n}\n/** Reset the I2C Master.\n * This bit resets the I2C Master when set to 1 while I2C_MST_EN equals 0.\n * This bit automatically clears to 0 after the reset has been triggered.\n * @see MPU6050_RA_USER_CTRL\n * @see MPU6050_USERCTRL_I2C_MST_RESET_BIT\n */\nvoid MPU6050::resetI2CMaster() {\n    I2Cdev::writeBit(devAddr, MPU6050_RA_USER_CTRL, MPU6050_USERCTRL_I2C_MST_RESET_BIT, true);\n}\n/** Reset all sensor registers and signal paths.\n * When set to 1, this bit resets the signal paths for all sensors (gyroscopes,\n * accelerometers, and temperature sensor). This operation will also clear the\n * sensor registers. This bit automatically clears to 0 after the reset has been\n * triggered.\n *\n * When resetting only the signal path (and not the sensor registers), please\n * use Register 104, SIGNAL_PATH_RESET.\n *\n * @see MPU6050_RA_USER_CTRL\n * @see MPU6050_USERCTRL_SIG_COND_RESET_BIT\n */\nvoid MPU6050::resetSensors() {\n    I2Cdev::writeBit(devAddr, MPU6050_RA_USER_CTRL, MPU6050_USERCTRL_SIG_COND_RESET_BIT, true);\n}\n\n// PWR_MGMT_1 register\n\n/** Trigger a full device reset.\n * A small delay of ~50ms may be desirable after triggering a reset.\n * @see MPU6050_RA_PWR_MGMT_1\n * @see MPU6050_PWR1_DEVICE_RESET_BIT\n */\nvoid MPU6050::reset() {\n    I2Cdev::writeBit(devAddr, MPU6050_RA_PWR_MGMT_1, MPU6050_PWR1_DEVICE_RESET_BIT, true);\n}\n/** Get sleep mode status.\n * Setting the SLEEP bit in the register puts the device into very low power\n * sleep mode. In this mode, only the serial interface and internal registers\n * remain active, allowing for a very low standby current. Clearing this bit\n * puts the device back into normal mode. To save power, the individual standby\n * selections for each of the gyros should be used if any gyro axis is not used\n * by the application.\n * @return Current sleep mode enabled status\n * @see MPU6050_RA_PWR_MGMT_1\n * @see MPU6050_PWR1_SLEEP_BIT\n */\nbool MPU6050::getSleepEnabled() {\n    I2Cdev::readBit(devAddr, MPU6050_RA_PWR_MGMT_1, MPU6050_PWR1_SLEEP_BIT, buffer);\n    return buffer[0];\n}\n/** Set sleep mode status.\n * @param enabled New sleep mode enabled status\n * @see getSleepEnabled()\n * @see MPU6050_RA_PWR_MGMT_1\n * @see MPU6050_PWR1_SLEEP_BIT\n */\nvoid MPU6050::setSleepEnabled(bool enabled) {\n    I2Cdev::writeBit(devAddr, MPU6050_RA_PWR_MGMT_1, MPU6050_PWR1_SLEEP_BIT, enabled);\n}\n/** Get wake cycle enabled status.\n * When this bit is set to 1 and SLEEP is disabled, the MPU-60X0 will cycle\n * between sleep mode and waking up to take a single sample of data from active\n * sensors at a rate determined by LP_WAKE_CTRL (register 108).\n * @return Current sleep mode enabled status\n * @see MPU6050_RA_PWR_MGMT_1\n * @see MPU6050_PWR1_CYCLE_BIT\n */\nbool MPU6050::getWakeCycleEnabled() {\n    I2Cdev::readBit(devAddr, MPU6050_RA_PWR_MGMT_1, MPU6050_PWR1_CYCLE_BIT, buffer);\n    return buffer[0];\n}\n/** Set wake cycle enabled status.\n * @param enabled New sleep mode enabled status\n * @see getWakeCycleEnabled()\n * @see MPU6050_RA_PWR_MGMT_1\n * @see MPU6050_PWR1_CYCLE_BIT\n */\nvoid MPU6050::setWakeCycleEnabled(bool enabled) {\n    I2Cdev::writeBit(devAddr, MPU6050_RA_PWR_MGMT_1, MPU6050_PWR1_CYCLE_BIT, enabled);\n}\n/** Get temperature sensor enabled status.\n * Control the usage of the internal temperature sensor.\n *\n * Note: this register stores the *disabled* value, but for consistency with the\n * rest of the code, the function is named and used with standard true/false\n * values to indicate whether the sensor is enabled or disabled, respectively.\n *\n * @return Current temperature sensor enabled status\n * @see MPU6050_RA_PWR_MGMT_1\n * @see MPU6050_PWR1_TEMP_DIS_BIT\n */\nbool MPU6050::getTempSensorEnabled() {\n    I2Cdev::readBit(devAddr, MPU6050_RA_PWR_MGMT_1, MPU6050_PWR1_TEMP_DIS_BIT, buffer);\n    return buffer[0] == 0; // 1 is actually disabled here\n}\n/** Set temperature sensor enabled status.\n * Note: this register stores the *disabled* value, but for consistency with the\n * rest of the code, the function is named and used with standard true/false\n * values to indicate whether the sensor is enabled or disabled, respectively.\n *\n * @param enabled New temperature sensor enabled status\n * @see getTempSensorEnabled()\n * @see MPU6050_RA_PWR_MGMT_1\n * @see MPU6050_PWR1_TEMP_DIS_BIT\n */\nvoid MPU6050::setTempSensorEnabled(bool enabled) {\n    // 1 is actually disabled here\n    I2Cdev::writeBit(devAddr, MPU6050_RA_PWR_MGMT_1, MPU6050_PWR1_TEMP_DIS_BIT, !enabled);\n}\n/** Get clock source setting.\n * @return Current clock source setting\n * @see MPU6050_RA_PWR_MGMT_1\n * @see MPU6050_PWR1_CLKSEL_BIT\n * @see MPU6050_PWR1_CLKSEL_LENGTH\n */\nuint8_t MPU6050::getClockSource() {\n    I2Cdev::readBits(devAddr, MPU6050_RA_PWR_MGMT_1, MPU6050_PWR1_CLKSEL_BIT, MPU6050_PWR1_CLKSEL_LENGTH, buffer);\n    return buffer[0];\n}\n/** Set clock source setting.\n * An internal 8MHz oscillator, gyroscope based clock, or external sources can\n * be selected as the MPU-60X0 clock source. When the internal 8 MHz oscillator\n * or an external source is chosen as the clock source, the MPU-60X0 can operate\n * in low power modes with the gyroscopes disabled.\n *\n * Upon power up, the MPU-60X0 clock source defaults to the internal oscillator.\n * However, it is highly recommended that the device be configured to use one of\n * the gyroscopes (or an external clock source) as the clock reference for\n * improved stability. The clock source can be selected according to the following table:\n *\n * <pre>\n * CLK_SEL | Clock Source\n * --------+--------------------------------------\n * 0       | Internal oscillator\n * 1       | PLL with X Gyro reference\n * 2       | PLL with Y Gyro reference\n * 3       | PLL with Z Gyro reference\n * 4       | PLL with external 32.768kHz reference\n * 5       | PLL with external 19.2MHz reference\n * 6       | Reserved\n * 7       | Stops the clock and keeps the timing generator in reset\n * </pre>\n *\n * @param source New clock source setting\n * @see getClockSource()\n * @see MPU6050_RA_PWR_MGMT_1\n * @see MPU6050_PWR1_CLKSEL_BIT\n * @see MPU6050_PWR1_CLKSEL_LENGTH\n */\nvoid MPU6050::setClockSource(uint8_t source) {\n    I2Cdev::writeBits(devAddr, MPU6050_RA_PWR_MGMT_1, MPU6050_PWR1_CLKSEL_BIT, MPU6050_PWR1_CLKSEL_LENGTH, source);\n}\n\n// PWR_MGMT_2 register\n\n/** Get wake frequency in Accel-Only Low Power Mode.\n * The MPU-60X0 can be put into Accerlerometer Only Low Power Mode by setting\n * PWRSEL to 1 in the Power Management 1 register (Register 107). In this mode,\n * the device will power off all devices except for the primary I2C interface,\n * waking only the accelerometer at fixed intervals to take a single\n * measurement. The frequency of wake-ups can be configured with LP_WAKE_CTRL\n * as shown below:\n *\n * <pre>\n * LP_WAKE_CTRL | Wake-up Frequency\n * -------------+------------------\n * 0            | 1.25 Hz\n * 1            | 2.5 Hz\n * 2            | 5 Hz\n * 3            | 10 Hz\n * <pre>\n *\n * For further information regarding the MPU-60X0's power modes, please refer to\n * Register 107.\n *\n * @return Current wake frequency\n * @see MPU6050_RA_PWR_MGMT_2\n */\nuint8_t MPU6050::getWakeFrequency() {\n    I2Cdev::readBits(devAddr, MPU6050_RA_PWR_MGMT_2, MPU6050_PWR2_LP_WAKE_CTRL_BIT, MPU6050_PWR2_LP_WAKE_CTRL_LENGTH, buffer);\n    return buffer[0];\n}\n/** Set wake frequency in Accel-Only Low Power Mode.\n * @param frequency New wake frequency\n * @see MPU6050_RA_PWR_MGMT_2\n */\nvoid MPU6050::setWakeFrequency(uint8_t frequency) {\n    I2Cdev::writeBits(devAddr, MPU6050_RA_PWR_MGMT_2, MPU6050_PWR2_LP_WAKE_CTRL_BIT, MPU6050_PWR2_LP_WAKE_CTRL_LENGTH, frequency);\n}\n\n/** Get X-axis accelerometer standby enabled status.\n * If enabled, the X-axis will not gather or report data (or use power).\n * @return Current X-axis standby enabled status\n * @see MPU6050_RA_PWR_MGMT_2\n * @see MPU6050_PWR2_STBY_XA_BIT\n */\nbool MPU6050::getStandbyXAccelEnabled() {\n    I2Cdev::readBit(devAddr, MPU6050_RA_PWR_MGMT_2, MPU6050_PWR2_STBY_XA_BIT, buffer);\n    return buffer[0];\n}\n/** Set X-axis accelerometer standby enabled status.\n * @param New X-axis standby enabled status\n * @see getStandbyXAccelEnabled()\n * @see MPU6050_RA_PWR_MGMT_2\n * @see MPU6050_PWR2_STBY_XA_BIT\n */\nvoid MPU6050::setStandbyXAccelEnabled(bool enabled) {\n    I2Cdev::writeBit(devAddr, MPU6050_RA_PWR_MGMT_2, MPU6050_PWR2_STBY_XA_BIT, enabled);\n}\n/** Get Y-axis accelerometer standby enabled status.\n * If enabled, the Y-axis will not gather or report data (or use power).\n * @return Current Y-axis standby enabled status\n * @see MPU6050_RA_PWR_MGMT_2\n * @see MPU6050_PWR2_STBY_YA_BIT\n */\nbool MPU6050::getStandbyYAccelEnabled() {\n    I2Cdev::readBit(devAddr, MPU6050_RA_PWR_MGMT_2, MPU6050_PWR2_STBY_YA_BIT, buffer);\n    return buffer[0];\n}\n/** Set Y-axis accelerometer standby enabled status.\n * @param New Y-axis standby enabled status\n * @see getStandbyYAccelEnabled()\n * @see MPU6050_RA_PWR_MGMT_2\n * @see MPU6050_PWR2_STBY_YA_BIT\n */\nvoid MPU6050::setStandbyYAccelEnabled(bool enabled) {\n    I2Cdev::writeBit(devAddr, MPU6050_RA_PWR_MGMT_2, MPU6050_PWR2_STBY_YA_BIT, enabled);\n}\n/** Get Z-axis accelerometer standby enabled status.\n * If enabled, the Z-axis will not gather or report data (or use power).\n * @return Current Z-axis standby enabled status\n * @see MPU6050_RA_PWR_MGMT_2\n * @see MPU6050_PWR2_STBY_ZA_BIT\n */\nbool MPU6050::getStandbyZAccelEnabled() {\n    I2Cdev::readBit(devAddr, MPU6050_RA_PWR_MGMT_2, MPU6050_PWR2_STBY_ZA_BIT, buffer);\n    return buffer[0];\n}\n/** Set Z-axis accelerometer standby enabled status.\n * @param New Z-axis standby enabled status\n * @see getStandbyZAccelEnabled()\n * @see MPU6050_RA_PWR_MGMT_2\n * @see MPU6050_PWR2_STBY_ZA_BIT\n */\nvoid MPU6050::setStandbyZAccelEnabled(bool enabled) {\n    I2Cdev::writeBit(devAddr, MPU6050_RA_PWR_MGMT_2, MPU6050_PWR2_STBY_ZA_BIT, enabled);\n}\n/** Get X-axis gyroscope standby enabled status.\n * If enabled, the X-axis will not gather or report data (or use power).\n * @return Current X-axis standby enabled status\n * @see MPU6050_RA_PWR_MGMT_2\n * @see MPU6050_PWR2_STBY_XG_BIT\n */\nbool MPU6050::getStandbyXGyroEnabled() {\n    I2Cdev::readBit(devAddr, MPU6050_RA_PWR_MGMT_2, MPU6050_PWR2_STBY_XG_BIT, buffer);\n    return buffer[0];\n}\n/** Set X-axis gyroscope standby enabled status.\n * @param New X-axis standby enabled status\n * @see getStandbyXGyroEnabled()\n * @see MPU6050_RA_PWR_MGMT_2\n * @see MPU6050_PWR2_STBY_XG_BIT\n */\nvoid MPU6050::setStandbyXGyroEnabled(bool enabled) {\n    I2Cdev::writeBit(devAddr, MPU6050_RA_PWR_MGMT_2, MPU6050_PWR2_STBY_XG_BIT, enabled);\n}\n/** Get Y-axis gyroscope standby enabled status.\n * If enabled, the Y-axis will not gather or report data (or use power).\n * @return Current Y-axis standby enabled status\n * @see MPU6050_RA_PWR_MGMT_2\n * @see MPU6050_PWR2_STBY_YG_BIT\n */\nbool MPU6050::getStandbyYGyroEnabled() {\n    I2Cdev::readBit(devAddr, MPU6050_RA_PWR_MGMT_2, MPU6050_PWR2_STBY_YG_BIT, buffer);\n    return buffer[0];\n}\n/** Set Y-axis gyroscope standby enabled status.\n * @param New Y-axis standby enabled status\n * @see getStandbyYGyroEnabled()\n * @see MPU6050_RA_PWR_MGMT_2\n * @see MPU6050_PWR2_STBY_YG_BIT\n */\nvoid MPU6050::setStandbyYGyroEnabled(bool enabled) {\n    I2Cdev::writeBit(devAddr, MPU6050_RA_PWR_MGMT_2, MPU6050_PWR2_STBY_YG_BIT, enabled);\n}\n/** Get Z-axis gyroscope standby enabled status.\n * If enabled, the Z-axis will not gather or report data (or use power).\n * @return Current Z-axis standby enabled status\n * @see MPU6050_RA_PWR_MGMT_2\n * @see MPU6050_PWR2_STBY_ZG_BIT\n */\nbool MPU6050::getStandbyZGyroEnabled() {\n    I2Cdev::readBit(devAddr, MPU6050_RA_PWR_MGMT_2, MPU6050_PWR2_STBY_ZG_BIT, buffer);\n    return buffer[0];\n}\n/** Set Z-axis gyroscope standby enabled status.\n * @param New Z-axis standby enabled status\n * @see getStandbyZGyroEnabled()\n * @see MPU6050_RA_PWR_MGMT_2\n * @see MPU6050_PWR2_STBY_ZG_BIT\n */\nvoid MPU6050::setStandbyZGyroEnabled(bool enabled) {\n    I2Cdev::writeBit(devAddr, MPU6050_RA_PWR_MGMT_2, MPU6050_PWR2_STBY_ZG_BIT, enabled);\n}\n\n// FIFO_COUNT* registers\n\n/** Get current FIFO buffer size.\n * This value indicates the number of bytes stored in the FIFO buffer. This\n * number is in turn the number of bytes that can be read from the FIFO buffer\n * and it is directly proportional to the number of samples available given the\n * set of sensor data bound to be stored in the FIFO (register 35 and 36).\n * @return Current FIFO buffer size\n */\nuint16_t MPU6050::getFIFOCount() {\n    I2Cdev::readBytes(devAddr, MPU6050_RA_FIFO_COUNTH, 2, buffer);\n    return (((uint16_t)buffer[0]) << 8) | buffer[1];\n}\n\n// FIFO_R_W register\n\n/** Get byte from FIFO buffer.\n * This register is used to read and write data from the FIFO buffer. Data is\n * written to the FIFO in order of register number (from lowest to highest). If\n * all the FIFO enable flags (see below) are enabled and all External Sensor\n * Data registers (Registers 73 to 96) are associated with a Slave device, the\n * contents of registers 59 through 96 will be written in order at the Sample\n * Rate.\n *\n * The contents of the sensor data registers (Registers 59 to 96) are written\n * into the FIFO buffer when their corresponding FIFO enable flags are set to 1\n * in FIFO_EN (Register 35). An additional flag for the sensor data registers\n * associated with I2C Slave 3 can be found in I2C_MST_CTRL (Register 36).\n *\n * If the FIFO buffer has overflowed, the status bit FIFO_OFLOW_INT is\n * automatically set to 1. This bit is located in INT_STATUS (Register 58).\n * When the FIFO buffer has overflowed, the oldest data will be lost and new\n * data will be written to the FIFO.\n *\n * If the FIFO buffer is empty, reading this register will return the last byte\n * that was previously read from the FIFO until new data is available. The user\n * should check FIFO_COUNT to ensure that the FIFO buffer is not read when\n * empty.\n *\n * @return Byte from FIFO buffer\n */\nuint8_t MPU6050::getFIFOByte() {\n    I2Cdev::readByte(devAddr, MPU6050_RA_FIFO_R_W, buffer);\n    return buffer[0];\n}\nvoid MPU6050::getFIFOBytes(uint8_t *data, uint8_t length) {\n    I2Cdev::readBytes(devAddr, MPU6050_RA_FIFO_R_W, length, data);\n}\n/** Write byte to FIFO buffer.\n * @see getFIFOByte()\n * @see MPU6050_RA_FIFO_R_W\n */\nvoid MPU6050::setFIFOByte(uint8_t data) {\n    I2Cdev::writeByte(devAddr, MPU6050_RA_FIFO_R_W, data);\n}\n\n// WHO_AM_I register\n\n/** Get Device ID.\n * This register is used to verify the identity of the device (0b110100, 0x34).\n * @return Device ID (6 bits only! should be 0x34)\n * @see MPU6050_RA_WHO_AM_I\n * @see MPU6050_WHO_AM_I_BIT\n * @see MPU6050_WHO_AM_I_LENGTH\n */\nuint8_t MPU6050::getDeviceID() {\n    I2Cdev::readBits(devAddr, MPU6050_RA_WHO_AM_I, MPU6050_WHO_AM_I_BIT, MPU6050_WHO_AM_I_LENGTH, buffer);\n    return buffer[0];\n}\n/** Set Device ID.\n * Write a new ID into the WHO_AM_I register (no idea why this should ever be\n * necessary though).\n * @param id New device ID to set.\n * @see getDeviceID()\n * @see MPU6050_RA_WHO_AM_I\n * @see MPU6050_WHO_AM_I_BIT\n * @see MPU6050_WHO_AM_I_LENGTH\n */\nvoid MPU6050::setDeviceID(uint8_t id) {\n    I2Cdev::writeBits(devAddr, MPU6050_RA_WHO_AM_I, MPU6050_WHO_AM_I_BIT, MPU6050_WHO_AM_I_LENGTH, id);\n}\n\n// ======== UNDOCUMENTED/DMP REGISTERS/METHODS ========\n\n// XG_OFFS_TC register\n\nuint8_t MPU6050::getOTPBankValid() {\n    I2Cdev::readBit(devAddr, MPU6050_RA_XG_OFFS_TC, MPU6050_TC_OTP_BNK_VLD_BIT, buffer);\n    return buffer[0];\n}\nvoid MPU6050::setOTPBankValid(bool enabled) {\n    I2Cdev::writeBit(devAddr, MPU6050_RA_XG_OFFS_TC, MPU6050_TC_OTP_BNK_VLD_BIT, enabled);\n}\nint8_t MPU6050::getXGyroOffset() {\n    I2Cdev::readBits(devAddr, MPU6050_RA_XG_OFFS_TC, MPU6050_TC_OFFSET_BIT, MPU6050_TC_OFFSET_LENGTH, buffer);\n    return buffer[0];\n}\nvoid MPU6050::setXGyroOffset(int8_t offset) {\n    I2Cdev::writeBits(devAddr, MPU6050_RA_XG_OFFS_TC, MPU6050_TC_OFFSET_BIT, MPU6050_TC_OFFSET_LENGTH, offset);\n}\n\n// YG_OFFS_TC register\n\nint8_t MPU6050::getYGyroOffset() {\n    I2Cdev::readBits(devAddr, MPU6050_RA_YG_OFFS_TC, MPU6050_TC_OFFSET_BIT, MPU6050_TC_OFFSET_LENGTH, buffer);\n    return buffer[0];\n}\nvoid MPU6050::setYGyroOffset(int8_t offset) {\n    I2Cdev::writeBits(devAddr, MPU6050_RA_YG_OFFS_TC, MPU6050_TC_OFFSET_BIT, MPU6050_TC_OFFSET_LENGTH, offset);\n}\n\n// ZG_OFFS_TC register\n\nint8_t MPU6050::getZGyroOffset() {\n    I2Cdev::readBits(devAddr, MPU6050_RA_ZG_OFFS_TC, MPU6050_TC_OFFSET_BIT, MPU6050_TC_OFFSET_LENGTH, buffer);\n    return buffer[0];\n}\nvoid MPU6050::setZGyroOffset(int8_t offset) {\n    I2Cdev::writeBits(devAddr, MPU6050_RA_ZG_OFFS_TC, MPU6050_TC_OFFSET_BIT, MPU6050_TC_OFFSET_LENGTH, offset);\n}\n\n// X_FINE_GAIN register\n\nint8_t MPU6050::getXFineGain() {\n    I2Cdev::readByte(devAddr, MPU6050_RA_X_FINE_GAIN, buffer);\n    return buffer[0];\n}\nvoid MPU6050::setXFineGain(int8_t gain) {\n    I2Cdev::writeByte(devAddr, MPU6050_RA_X_FINE_GAIN, gain);\n}\n\n// Y_FINE_GAIN register\n\nint8_t MPU6050::getYFineGain() {\n    I2Cdev::readByte(devAddr, MPU6050_RA_Y_FINE_GAIN, buffer);\n    return buffer[0];\n}\nvoid MPU6050::setYFineGain(int8_t gain) {\n    I2Cdev::writeByte(devAddr, MPU6050_RA_Y_FINE_GAIN, gain);\n}\n\n// Z_FINE_GAIN register\n\nint8_t MPU6050::getZFineGain() {\n    I2Cdev::readByte(devAddr, MPU6050_RA_Z_FINE_GAIN, buffer);\n    return buffer[0];\n}\nvoid MPU6050::setZFineGain(int8_t gain) {\n    I2Cdev::writeByte(devAddr, MPU6050_RA_Z_FINE_GAIN, gain);\n}\n\n// XA_OFFS_* registers\n\nint16_t MPU6050::getXAccelOffset() {\n    I2Cdev::readBytes(devAddr, MPU6050_RA_XA_OFFS_H, 2, buffer);\n    return (((int16_t)buffer[0]) << 8) | buffer[1];\n}\nvoid MPU6050::setXAccelOffset(int16_t offset) {\n    I2Cdev::writeWord(devAddr, MPU6050_RA_XA_OFFS_H, offset);\n}\n\n// YA_OFFS_* register\n\nint16_t MPU6050::getYAccelOffset() {\n    I2Cdev::readBytes(devAddr, MPU6050_RA_YA_OFFS_H, 2, buffer);\n    return (((int16_t)buffer[0]) << 8) | buffer[1];\n}\nvoid MPU6050::setYAccelOffset(int16_t offset) {\n    I2Cdev::writeWord(devAddr, MPU6050_RA_YA_OFFS_H, offset);\n}\n\n// ZA_OFFS_* register\n\nint16_t MPU6050::getZAccelOffset() {\n    I2Cdev::readBytes(devAddr, MPU6050_RA_ZA_OFFS_H, 2, buffer);\n    return (((int16_t)buffer[0]) << 8) | buffer[1];\n}\nvoid MPU6050::setZAccelOffset(int16_t offset) {\n    I2Cdev::writeWord(devAddr, MPU6050_RA_ZA_OFFS_H, offset);\n}\n\n// XG_OFFS_USR* registers\n\nint16_t MPU6050::getXGyroOffsetUser() {\n    I2Cdev::readBytes(devAddr, MPU6050_RA_XG_OFFS_USRH, 2, buffer);\n    return (((int16_t)buffer[0]) << 8) | buffer[1];\n}\nvoid MPU6050::setXGyroOffsetUser(int16_t offset) {\n    I2Cdev::writeWord(devAddr, MPU6050_RA_XG_OFFS_USRH, offset);\n}\n\n// YG_OFFS_USR* register\n\nint16_t MPU6050::getYGyroOffsetUser() {\n    I2Cdev::readBytes(devAddr, MPU6050_RA_YG_OFFS_USRH, 2, buffer);\n    return (((int16_t)buffer[0]) << 8) | buffer[1];\n}\nvoid MPU6050::setYGyroOffsetUser(int16_t offset) {\n    I2Cdev::writeWord(devAddr, MPU6050_RA_YG_OFFS_USRH, offset);\n}\n\n// ZG_OFFS_USR* register\n\nint16_t MPU6050::getZGyroOffsetUser() {\n    I2Cdev::readBytes(devAddr, MPU6050_RA_ZG_OFFS_USRH, 2, buffer);\n    return (((int16_t)buffer[0]) << 8) | buffer[1];\n}\nvoid MPU6050::setZGyroOffsetUser(int16_t offset) {\n    I2Cdev::writeWord(devAddr, MPU6050_RA_ZG_OFFS_USRH, offset);\n}\n\n// INT_ENABLE register (DMP functions)\n\nbool MPU6050::getIntPLLReadyEnabled() {\n    I2Cdev::readBit(devAddr, MPU6050_RA_INT_ENABLE, MPU6050_INTERRUPT_PLL_RDY_INT_BIT, buffer);\n    return buffer[0];\n}\nvoid MPU6050::setIntPLLReadyEnabled(bool enabled) {\n    I2Cdev::writeBit(devAddr, MPU6050_RA_INT_ENABLE, MPU6050_INTERRUPT_PLL_RDY_INT_BIT, enabled);\n}\nbool MPU6050::getIntDMPEnabled() {\n    I2Cdev::readBit(devAddr, MPU6050_RA_INT_ENABLE, MPU6050_INTERRUPT_DMP_INT_BIT, buffer);\n    return buffer[0];\n}\nvoid MPU6050::setIntDMPEnabled(bool enabled) {\n    I2Cdev::writeBit(devAddr, MPU6050_RA_INT_ENABLE, MPU6050_INTERRUPT_DMP_INT_BIT, enabled);\n}\n\n// DMP_INT_STATUS\n\nbool MPU6050::getDMPInt5Status() {\n    I2Cdev::readBit(devAddr, MPU6050_RA_DMP_INT_STATUS, MPU6050_DMPINT_5_BIT, buffer);\n    return buffer[0];\n}\nbool MPU6050::getDMPInt4Status() {\n    I2Cdev::readBit(devAddr, MPU6050_RA_DMP_INT_STATUS, MPU6050_DMPINT_4_BIT, buffer);\n    return buffer[0];\n}\nbool MPU6050::getDMPInt3Status() {\n    I2Cdev::readBit(devAddr, MPU6050_RA_DMP_INT_STATUS, MPU6050_DMPINT_3_BIT, buffer);\n    return buffer[0];\n}\nbool MPU6050::getDMPInt2Status() {\n    I2Cdev::readBit(devAddr, MPU6050_RA_DMP_INT_STATUS, MPU6050_DMPINT_2_BIT, buffer);\n    return buffer[0];\n}\nbool MPU6050::getDMPInt1Status() {\n    I2Cdev::readBit(devAddr, MPU6050_RA_DMP_INT_STATUS, MPU6050_DMPINT_1_BIT, buffer);\n    return buffer[0];\n}\nbool MPU6050::getDMPInt0Status() {\n    I2Cdev::readBit(devAddr, MPU6050_RA_DMP_INT_STATUS, MPU6050_DMPINT_0_BIT, buffer);\n    return buffer[0];\n}\n\n// INT_STATUS register (DMP functions)\n\nbool MPU6050::getIntPLLReadyStatus() {\n    I2Cdev::readBit(devAddr, MPU6050_RA_INT_STATUS, MPU6050_INTERRUPT_PLL_RDY_INT_BIT, buffer);\n    return buffer[0];\n}\nbool MPU6050::getIntDMPStatus() {\n    I2Cdev::readBit(devAddr, MPU6050_RA_INT_STATUS, MPU6050_INTERRUPT_DMP_INT_BIT, buffer);\n    return buffer[0];\n}\n\n// USER_CTRL register (DMP functions)\n\nbool MPU6050::getDMPEnabled() {\n    I2Cdev::readBit(devAddr, MPU6050_RA_USER_CTRL, MPU6050_USERCTRL_DMP_EN_BIT, buffer);\n    return buffer[0];\n}\nvoid MPU6050::setDMPEnabled(bool enabled) {\n    I2Cdev::writeBit(devAddr, MPU6050_RA_USER_CTRL, MPU6050_USERCTRL_DMP_EN_BIT, enabled);\n}\nvoid MPU6050::resetDMP() {\n    I2Cdev::writeBit(devAddr, MPU6050_RA_USER_CTRL, MPU6050_USERCTRL_DMP_RESET_BIT, true);\n}\n\n// BANK_SEL register\n\nvoid MPU6050::setMemoryBank(uint8_t bank, bool prefetchEnabled, bool userBank) {\n    bank &= 0x1F;\n    if (userBank) bank |= 0x20;\n    if (prefetchEnabled) bank |= 0x40;\n    I2Cdev::writeByte(devAddr, MPU6050_RA_BANK_SEL, bank);\n}\n\n// MEM_START_ADDR register\n\nvoid MPU6050::setMemoryStartAddress(uint8_t address) {\n    I2Cdev::writeByte(devAddr, MPU6050_RA_MEM_START_ADDR, address);\n}\n\n// MEM_R_W register\n\nuint8_t MPU6050::readMemoryByte() {\n    I2Cdev::readByte(devAddr, MPU6050_RA_MEM_R_W, buffer);\n    return buffer[0];\n}\nvoid MPU6050::writeMemoryByte(uint8_t data) {\n    I2Cdev::writeByte(devAddr, MPU6050_RA_MEM_R_W, data);\n}\nvoid MPU6050::readMemoryBlock(uint8_t *data, uint16_t dataSize, uint8_t bank, uint8_t address) {\n    setMemoryBank(bank);\n    setMemoryStartAddress(address);\n    uint8_t chunkSize;\n    for (uint16_t i = 0; i < dataSize;) {\n        // determine correct chunk size according to bank position and data size\n        chunkSize = MPU6050_DMP_MEMORY_CHUNK_SIZE;\n\n        // make sure we don't go past the data size\n        if (i + chunkSize > dataSize) chunkSize = dataSize - i;\n\n        // make sure this chunk doesn't go past the bank boundary (256 bytes)\n        if (chunkSize > 256 - address) chunkSize = 256 - address;\n\n        // read the chunk of data as specified\n        I2Cdev::readBytes(devAddr, MPU6050_RA_MEM_R_W, chunkSize, data + i);\n        \n        // increase byte index by [chunkSize]\n        i += chunkSize;\n\n        // uint8_t automatically wraps to 0 at 256\n        address += chunkSize;\n\n        // if we aren't done, update bank (if necessary) and address\n        if (i < dataSize) {\n            if (address == 0) bank++;\n            setMemoryBank(bank);\n            setMemoryStartAddress(address);\n        }\n    }\n}\nbool MPU6050::writeMemoryBlock(const uint8_t *data, uint16_t dataSize, uint8_t bank, uint8_t address, bool verify, bool useProgMem) {\n    setMemoryBank(bank);\n    setMemoryStartAddress(address);\n    uint8_t chunkSize;\n    uint8_t *verifyBuffer;\n    uint8_t *progBuffer;\n    uint16_t i;\n    uint8_t j;\n    if (verify) verifyBuffer = (uint8_t *)malloc(MPU6050_DMP_MEMORY_CHUNK_SIZE);\n    if (useProgMem) progBuffer = (uint8_t *)malloc(MPU6050_DMP_MEMORY_CHUNK_SIZE);\n    for (i = 0; i < dataSize;) {\n        // determine correct chunk size according to bank position and data size\n        chunkSize = MPU6050_DMP_MEMORY_CHUNK_SIZE;\n\n        // make sure we don't go past the data size\n        if (i + chunkSize > dataSize) chunkSize = dataSize - i;\n\n        // make sure this chunk doesn't go past the bank boundary (256 bytes)\n        if (chunkSize > 256 - address) chunkSize = 256 - address;\n        \n        if (useProgMem) {\n            // write the chunk of data as specified\n            for (j = 0; j < chunkSize; j++) progBuffer[j] = pgm_read_byte(data + i + j);\n        } else {\n            // write the chunk of data as specified\n            progBuffer = (uint8_t *)data + i;\n        }\n\n        I2Cdev::writeBytes(devAddr, MPU6050_RA_MEM_R_W, chunkSize, progBuffer);\n\n        // verify data if needed\n        if (verify && verifyBuffer) {\n            setMemoryBank(bank);\n            setMemoryStartAddress(address);\n            I2Cdev::readBytes(devAddr, MPU6050_RA_MEM_R_W, chunkSize, verifyBuffer);\n            if (memcmp(progBuffer, verifyBuffer, chunkSize) != 0) {\n                /*Serial.print(\"Block write verification error, bank \");\n                Serial.print(bank, DEC);\n                Serial.print(\", address \");\n                Serial.print(address, DEC);\n                Serial.print(\"!\\nExpected:\");\n                for (j = 0; j < chunkSize; j++) {\n                    Serial.print(\" 0x\");\n                    if (progBuffer[j] < 16) Serial.print(\"0\");\n                    Serial.print(progBuffer[j], HEX);\n                }\n                Serial.print(\"\\nReceived:\");\n                for (uint8_t j = 0; j < chunkSize; j++) {\n                    Serial.print(\" 0x\");\n                    if (verifyBuffer[i + j] < 16) Serial.print(\"0\");\n                    Serial.print(verifyBuffer[i + j], HEX);\n                }\n                Serial.print(\"\\n\");*/\n                free(verifyBuffer);\n                if (useProgMem) free(progBuffer);\n                return false; // uh oh.\n            }\n        }\n\n        // increase byte index by [chunkSize]\n        i += chunkSize;\n\n        // uint8_t automatically wraps to 0 at 256\n        address += chunkSize;\n\n        // if we aren't done, update bank (if necessary) and address\n        if (i < dataSize) {\n            if (address == 0) bank++;\n            setMemoryBank(bank);\n            setMemoryStartAddress(address);\n        }\n    }\n    if (verify) free(verifyBuffer);\n    if (useProgMem) free(progBuffer);\n    return true;\n}\nbool MPU6050::writeProgMemoryBlock(const uint8_t *data, uint16_t dataSize, uint8_t bank, uint8_t address, bool verify) {\n    return writeMemoryBlock(data, dataSize, bank, address, verify, true);\n}\nbool MPU6050::writeDMPConfigurationSet(const uint8_t *data, uint16_t dataSize, bool useProgMem) {\n    uint8_t *progBuffer, success, special;\n    uint16_t i, j;\n    if (useProgMem) {\n        progBuffer = (uint8_t *)malloc(8); // assume 8-byte blocks, realloc later if necessary\n    }\n\n    // config set data is a long string of blocks with the following structure:\n    // [bank] [offset] [length] [byte[0], byte[1], ..., byte[length]]\n    uint8_t bank, offset, length;\n    for (i = 0; i < dataSize;) {\n        if (useProgMem) {\n            bank = pgm_read_byte(data + i++);\n            offset = pgm_read_byte(data + i++);\n            length = pgm_read_byte(data + i++);\n        } else {\n            bank = data[i++];\n            offset = data[i++];\n            length = data[i++];\n        }\n\n        // write data or perform special action\n        if (length > 0) {\n            // regular block of data to write\n            /*Serial.print(\"Writing config block to bank \");\n            Serial.print(bank);\n            Serial.print(\", offset \");\n            Serial.print(offset);\n            Serial.print(\", length=\");\n            Serial.println(length);*/\n            if (useProgMem) {\n                if (sizeof(progBuffer) < length) progBuffer = (uint8_t *)realloc(progBuffer, length);\n                for (j = 0; j < length; j++) progBuffer[j] = pgm_read_byte(data + i + j);\n            } else {\n                progBuffer = (uint8_t *)data + i;\n            }\n            success = writeMemoryBlock(progBuffer, length, bank, offset, true);\n            i += length;\n        } else {\n            // special instruction\n            // NOTE: this kind of behavior (what and when to do certain things)\n            // is totally undocumented. This code is in here based on observed\n            // behavior only, and exactly why (or even whether) it has to be here\n            // is anybody's guess for now.\n            if (useProgMem) {\n                special = pgm_read_byte(data + i++);\n            } else {\n                special = data[i++];\n            }\n            /*Serial.print(\"Special command code \");\n            Serial.print(special, HEX);\n            Serial.println(\" found...\");*/\n            if (special == 0x01) {\n                // enable DMP-related interrupts\n                \n                //setIntZeroMotionEnabled(true);\n                //setIntFIFOBufferOverflowEnabled(true);\n                //setIntDMPEnabled(true);\n                I2Cdev::writeByte(devAddr, MPU6050_RA_INT_ENABLE, 0x32);  // single operation\n\n                success = true;\n            } else {\n                // unknown special command\n                success = false;\n            }\n        }\n        \n        if (!success) {\n            if (useProgMem) free(progBuffer);\n            return false; // uh oh\n        }\n    }\n    if (useProgMem) free(progBuffer);\n    return true;\n}\nbool MPU6050::writeProgDMPConfigurationSet(const uint8_t *data, uint16_t dataSize) {\n    return writeDMPConfigurationSet(data, dataSize, true);\n}\n\n// DMP_CFG_1 register\n\nuint8_t MPU6050::getDMPConfig1() {\n    I2Cdev::readByte(devAddr, MPU6050_RA_DMP_CFG_1, buffer);\n    return buffer[0];\n}\nvoid MPU6050::setDMPConfig1(uint8_t config) {\n    I2Cdev::writeByte(devAddr, MPU6050_RA_DMP_CFG_1, config);\n}\n\n// DMP_CFG_2 register\n\nuint8_t MPU6050::getDMPConfig2() {\n    I2Cdev::readByte(devAddr, MPU6050_RA_DMP_CFG_2, buffer);\n    return buffer[0];\n}\nvoid MPU6050::setDMPConfig2(uint8_t config) {\n    I2Cdev::writeByte(devAddr, MPU6050_RA_DMP_CFG_2, config);\n}"},{"name":"MPU6050wrapper.cpp","type":"source","group":"legacy","path":"C:\\Users\\Jasminis\\OneDrive\\R7003E\\Viktor\\LAB_B\\LabB_TuneTheGyro_ert_rtw\\..\\..\\..\\..\\..\\Documents\\MATLAB\\RASPlib\\src","tag":"","groupDisplay":"Other files","code":"\n#include \"Wire.h\"\n#include \"twi.h\"\n#include \"I2Cdev.h\"\n#include \"MPU6050.h\"\n\nMPU6050 accelgyro;\n\nextern \"C\" void MPU6050Accel_Init(void)\n{\n    Wire.begin();\n    accelgyro.initialize();\n\t\n/* \t// Make devAddr public and add this line:\n\tif(!accelgyro.testConnection())\n\t{\n\t\t//Serial.println(\"Test Connection Failed Changing I2C addr to 0x69\");\n\t\taccelgyro.devAddr=0x69;\n\t} */\n\t\n\t\n\t//  Enable I2C bypass on MPU6050 so the compass can be accessed\n\tI2Cdev::writeBit(MPU6050_DEFAULT_ADDRESS, MPU6050_RA_USER_CTRL, MPU6050_USERCTRL_I2C_MST_EN_BIT, false);\n\tI2Cdev::writeBit(MPU6050_DEFAULT_ADDRESS, MPU6050_RA_INT_PIN_CFG, MPU6050_INTCFG_I2C_BYPASS_EN_BIT, true);\n\tI2Cdev::writeBit(MPU6050_DEFAULT_ADDRESS, MPU6050_RA_PWR_MGMT_1, MPU6050_PWR1_SLEEP_BIT, false);\n}\nextern \"C\" void MPU6050Accel_Read(int* pfData)\n{\n    pfData[0]=accelgyro.getAccelerationX();\n    pfData[1]=accelgyro.getAccelerationY();\n    pfData[2]=accelgyro.getAccelerationZ();\n}\n\nextern \"C\" void MPU6050Gyro_Init(int DLPFmode)\n{\n    Wire.begin();\n\taccelgyro.setDLPFMode(DLPFmode);\n    accelgyro.initialize();\n}\n\nextern \"C\" void MPU6050Gyro_Read(int* pfData)\n{\n    pfData[0]=accelgyro.getRotationX();\n    pfData[1]=accelgyro.getRotationY();\n    pfData[2]=accelgyro.getRotationZ();    \n}\n\nextern \"C\" void MPU6050Temp_Read(int* pfData)\n{\n    pfData[0]=accelgyro.getTemperature();\n}\n\n"},{"name":"MW_ArduinoHWInit.cpp","type":"source","group":"legacy","path":"C:\\Users\\Jasminis\\OneDrive\\R7003E\\Viktor\\LAB_B\\LabB_TuneTheGyro_ert_rtw\\..\\..\\..\\..\\..\\..\\..\\ProgramData\\MATLAB\\SupportPackages\\R2023a\\toolbox\\target\\supportpackages\\arduinotarget\\src","tag":"","groupDisplay":"Other files","code":"/* Arduino AVR Bareboard scheduler\n*\n* Copyright 2014-2022 The MathWorks, Inc.\n*/\n\n#include \"Arduino.h\"\n#include \"io_wrappers.h\"\n#if defined(ARDUINO_ARM_CORTEX_M0_PLUS)\n#include \"arduinoARM_M0plusScheduler.h\"\n#elif defined(ARDUINO_ARM_CORTEX_M3)\n#include \"arduinoARMScheduler.h\"\n#include \"watchdog.h\"\n#else\n#include \"arduinoAVRScheduler.h\"\n#endif\n\n#if defined(ESP_PLATFORM)\n#include \"esp_wpa2.h\" //wpa2 library for connections to Enterprise networks\n#endif\n\n#ifdef _RTT_NUMI2C_\n#include \"MW_arduinoI2C.h\"\n#endif\n\n#if defined(ARDUINO_ARDUINO_NANO33BLE)\n#include \"MW_PWM_NANO33BLE.h\"\n#endif\n\n#if (defined(_RTT_SPI_SSPIN_)) || (defined(_RTT_DUE_SPI_SSPIN4_)) || (defined(_RTT_DUE_SPI_SSPIN10_)) || (defined(_RTT_DUE_SPI_SSPIN52_))\n#include \"MW_SPIwriteRead.h\"\n#endif\n\n#if (defined(_RTT_RS485_INUSE_))\n#include \"ArduinoRS485.h\"\n#endif\n\n#if (defined(_RTT_MODBUS_MASTER_)) || (defined(_RTT_MODBUS_SLAVE_))\n#include \"ArduinoModbus.h\"\n#endif\n\n#ifdef NANO_MOTOR_CARRIER\n#include <Wire.h>\n#define PMIC_ADDRESS  0x6B\n#define PMIC_REG00    0x00\n#define PMIC_REG01    0x01\n#define PMIC_REG02    0x02\n#define PMIC_REG04    0x04\n#define PMIC_REG05    0x05\nvoid MW_EnableNanoCarrierBatteryCharging(void);\n#endif\n\n// Wifi init routines\n#include <inttypes.h>\n#if (defined(_RTT_WIFI_EXTMODE_) && (_RTT_WIFI_EXTMODE_ == 1)) || (defined(_RTT_WIFI_UDP_) && (_RTT_WIFI_UDP_ != 0)) || (defined(_RTT_WIFI_TCP_) && (_RTT_WIFI_TCP_ != 0))|| defined(_RTT_THINGSPEAK_WIFI_) || defined(_RTT_WEBSOCKET_PORT_) || defined(_RTT_MQTT_WIFI_) || defined(_RTT_HTTP_CLIENT_)\n#if defined(ARDUINO_WIFI_LIB_101)\n#include <WiFi101.h>\n#elif defined(ARDUINO_WIFI_LIB_NINA)\n#include <WiFiNINA.h>\n#else\n#include <WiFi.h>\n#endif\n#include <SPI.h>\n\n/*#define that helps to stringify build flags\n//Double evaluation is needed so that the double quotes can be derived out\n//of the build flag and can be assigned to a character array */\n#define RTT_StringifyBuildFlag(x) RTT_StringParamExpanded(x)\n#define RTT_StringParamExpanded(x)  #x\n\nIPAddress wifiLocalIpAddress(_RTT_WIFI_Local_IP1, _RTT_WIFI_Local_IP2, _RTT_WIFI_Local_IP3, _RTT_WIFI_Local_IP4);\n#ifdef ESP_PLATFORM\nIPAddress wifigateway(_RTT_WIFI_Local_IP1, _RTT_WIFI_Local_IP2, _RTT_WIFI_Local_IP3, uint8_t(1));\nIPAddress subnet(uint8_t(255),uint8_t(255),uint8_t(255),uint8_t(0));\nIPAddress dns1 = (uint32_t)0x00000000;\nIPAddress dns2 = (uint32_t)0x00000000;\n#endif\nchar ssid[] = RTT_StringifyBuildFlag(_RTT_WIFI_SSID);\nint configureSuccess = WL_IDLE_STATUS;\nint trialcount;\n\n#ifdef _RTT_WIFI_WEP\nchar key[] = RTT_StringifyBuildFlag(_RTT_WIFI_KEY);\nint keyIndex = _RTT_WIFI_KEY_INDEX;\n#endif //_RTT_WIFI_WEP\n\n#ifdef _RTT_WIFI_WPA\nchar wpapass[] = RTT_StringifyBuildFlag(_RTT_WIFI_WPA_PASSWORD);\n#endif //_RTT_WIFI_WPA\n\n#ifdef _RTT_WIFI_WPA2_ENTERPRISE\nchar wpa2username[] = RTT_StringifyBuildFlag(_RTT_WIFI_WPA2_USERNAME);\nchar wpa2password[] = RTT_StringifyBuildFlag(_RTT_WIFI_WPA2_PASSWORD);\n#endif //_RTT_WIFI_WPA2_ENTERPRISE\n#endif //(defined(_RTT_THINGSPEAK_WIFI_) || (_RTT_WIFI_TCP_ !=0) || defined(_RTT_WEBSOCKET_PORT_))\n\n#include \"MW_ArduinoHWInit.h\"\n#ifdef _MW_DASHBOARD_BLOCK_PRESENT_\n#include \"MW_graphicPrimitive.h\"\n#endif\n\n\n\nvoid MW_Modbus_Slave_Poll(void)\n{\n    #if defined(_RTT_MODBUS_SLAVE_)\n    ModbusRTUServer.poll();\n    #endif\n}\n\nvoid MW_ArduinoNano33BLESenseInit(void)\n{\n    #if (defined(ARDUINO_ARDUINO_NANO33BLE))\n    initVariant();\n    #if defined(SERIAL_CDC)\n    PluggableUSBD().begin();\n    SerialUSB.begin(115200);\n    #endif\n    #if defined(_RTT_PWM_NANO33BLE_INUSE)\n    MW_NANO33BLE_PWM_Setup();\n    #endif\n    #endif\n}\n\nvoid MW_Arduino_Init(void)\n{\n    //Hardware specific init for Arduino nano 33 ble sense\n    #if (defined(ARDUINO_ARDUINO_NANO33BLE))\n    MW_ArduinoNano33BLESenseInit();\n    #endif\n    //Disable watchdog for Arduino Due. watchdog\n    #if (defined(_ROTH_DUE_))\n    watchdogDisable();\n    #endif\n    //Disable watchdog for ESP32\n    #if (defined(ESP_PLATFORM))\n    initArduino();\n    disableCore0WDT();\n    #endif\n\n    /*\n    * Initialize Serial Peripheral\n    */\n    // Always Initialize Serial0\n    #if(defined(ESP_PLATFORM))\n    #else\n    Serial_begin(0, _RTT_BAUDRATE_SERIAL0_, _RTT_CONFIG_SERIAL0_);\n    #endif\n\n    /* Overrun Detection Initialization */\n    #ifdef _RTT_OVERRUN_DIGITAL_PIN_\n    pinMode(_RTT_OVERRUN_DIGITAL_PIN_, OUTPUT);\n\n    /* Init the overrun detection pin to zero or else the Pin is always in a\n    * high/tristate giving the user a wrong indication of overrun conditions */\n    digitalWrite(_RTT_OVERRUN_DIGITAL_PIN_, LOW);\n    #endif\n\n    /*\n    * Initialize Analog Reference Voltage\n    * Default - Due\n    * Default, Internal 1.1, Internal 2.56, External -  Mega 2560, Mega ADK\n    * Default, Internal, External - Other Arduino targets\n    */\n    #if (defined(_ROTH_MEGA2560_))\n    #if (defined(_RTT_ANALOG_REF_) && (_RTT_ANALOG_REF_ == 1))\n    analogReference(INTERNAL1V1);\n    #elif (defined(_RTT_ANALOG_REF_) && (_RTT_ANALOG_REF_ == 2))\n    analogReference(INTERNAL2V56);\n    #elif (defined(_RTT_ANALOG_REF_) && (_RTT_ANALOG_REF_ == 3))\n    analogReference(EXTERNAL);\n    #endif\n    #elif defined(ARDUINO_ARM_CORTEX_M0_PLUS)\n    #if (defined(_RTT_ANALOG_REF_) && (_RTT_ANALOG_REF_ == 1))\n    analogReference(AR_INTERNAL1V0);\n    #elif (defined(_RTT_ANALOG_REF_) && (_RTT_ANALOG_REF_ == 2))\n    analogReference(AR_INTERNAL1V65);\n    #elif (defined(_RTT_ANALOG_REF_) && (_RTT_ANALOG_REF_ == 3))\n    analogReference(AR_INTERNAL2V23);\n    #elif (defined(_RTT_ANALOG_REF_) && (_RTT_ANALOG_REF_ == 4))\n    analogReference(AR_EXTERNAL);\n    #endif\n    #else\n    #if (defined(_RTT_ANALOG_REF_) && (_RTT_ANALOG_REF_ == 1))\n    analogReference(INTERNAL);\n    #elif (defined(_RTT_ANALOG_REF_) && (_RTT_ANALOG_REF_ == 2))\n    analogReference(EXTERNAL);\n    #endif\n    #endif\n\n    /*\n    * Initialize SPI bus\n    */\n    //_RTT_SPI_SSPIN_ definition is applicable for all boards excluding Due\n    #if defined(_RTT_SPI_SSPIN_)\n    MW_SPIwriteReadSetup();\n    #endif\n\n    //Initialize Modbus\n    int modStatus;\n    #if defined(_RTT_MODBUS_MASTER_)\n    modStatus = ModbusRTUClient.begin(_RTT_RS485_BAUD_, _RTT_RS485_CONFIG_);\n    ModbusRTUClient.setTimeout(_RTT_MODBUS_MASTERTIMEOUT_/1000);\n    #endif\n\n    #if defined(_RTT_MODBUS_SLAVE_)\n    modStatus = ModbusRTUServer.begin(_RTT_MODBUS_SLAVEID_, _RTT_RS485_BAUD_, _RTT_RS485_CONFIG_);\n    #if defined(_RTT_MODBUS_CONFIGCOIL_)\n    ModbusRTUServer.configureCoils(_RTT_MODBUS_COILADDR_,_RTT_MODBUS_COILNUM_);\n    #endif\n    #if defined(_RTT_MODBUS_CONFIGINPUT_)\n    ModbusRTUServer.configureDiscreteInputs(_RTT_MODBUS_INPUPTADDR_,_RTT_MODBUS_INPUTNUM_);\n    #endif\n    #if defined(_RTT_MODBUS_CONFIGHOLDINGREG_)\n    ModbusRTUServer.configureHoldingRegisters(_RTT_MODBUS_HOLDINGREGADDR_,_RTT_MODBUS_HOLDINGREGNUM_);\n    #endif\n    #if defined(_RTT_MODBUS_CONFIGINPUTREG_)\n    ModbusRTUServer.configureInputRegisters(_RTT_MODBUS_INPUTREGADDR_,_RTT_MODBUS_INPUTREGNUM_);\n    #endif\n    #endif\n\n    /*\n    * Initialize wifi\n    */\n    #if (defined(_RTT_WIFI_UDP_) && (_RTT_WIFI_UDP_ != 0)) || (defined(_RTT_WIFI_TCP_) && (_RTT_WIFI_TCP_ != 0))|| defined(_RTT_THINGSPEAK_WIFI_) || defined(_RTT_WEBSOCKET_PORT_) || defined(_RTT_MQTT_WIFI_) || defined(_RTT_HTTP_CLIENT_)\n    /* Begin WiFi*/\n    while(configureSuccess!=WL_CONNECTED)\n    {\n        #if (defined(_RTT_DISABLE_Wifi_DHCP_) && (_RTT_DISABLE_Wifi_DHCP_ !=0))\n        #ifdef ESP_PLATFORM\n        WiFi.config(wifiLocalIpAddress, wifigateway, subnet, dns1, dns2);\n        #else\n        WiFi.config(wifiLocalIpAddress);\n        #endif\n        #endif\n\n        #ifdef _RTT_WIFI_WEP\n        configureSuccess=WiFi.begin(ssid,keyIndex,key);\n        #endif //_RTT_WIFI_WEP\n\n        #ifdef _RTT_WIFI_WPA\n        configureSuccess=WiFi.begin(ssid,wpapass);\n        #endif //_RTT_WIFI_WPA\n\n        #ifdef _RTT_WIFI_WPA2_ENTERPRISE\n        #if defined(ESP_PLATFORM)\n        WiFi.disconnect(true);  //disconnect form wifi to set new wifi connection\n        WiFi.mode(WIFI_STA); //init wifi mode\n        esp_wifi_sta_wpa2_ent_set_identity((uint8_t *)wpa2username, strlen(wpa2username)); //provide identity\n        esp_wifi_sta_wpa2_ent_set_username((uint8_t *)wpa2username, strlen(wpa2username)); //provide username --> identity and username is same\n        esp_wifi_sta_wpa2_ent_set_password((uint8_t *)wpa2password, strlen(wpa2password)); //provide password\n        esp_wpa2_config_t config = WPA2_CONFIG_INIT_DEFAULT(); //set config settings to default\n        esp_wifi_sta_wpa2_ent_enable(&config); //set config settings to enable function\n        configureSuccess = WiFi.begin(ssid); //connect to wifi\n        #elif defined(ARDUINO_WIFI_LIB_NINA)\n        configureSuccess=WiFi.beginEnterprise(ssid,wpa2username,wpa2password);\n        #endif\n        #endif //_RTT_WIFI_WPA2_ENTERPRISE\n\n        #ifdef _RTT_WIFI_NONE\n        configureSuccess=WiFi.begin(ssid);\n        #endif //_RTT_WIFI_NONE\n\n        #if (defined(ESP_PLATFORM))\n        while (WiFi.status() != WL_CONNECTED) {\n            delay(500);\n        }\n        configureSuccess=WL_CONNECTED;\n        #else\n        //Wait for 10 seconds for Wifi connection to happen\n        unsigned long startMillis  = millis();\n        while(millis()- startMillis < 1000)\n        {\n        };\n        #endif\n    }\n\n    /* Wait for Serial0 to be up*/\n    for(trialcount=0;trialcount<5;trialcount++)\n    {\n        if(Serial)\n        {\n            break;\n        }else\n        {\n            unsigned long startMillis  = millis();\n            while(millis()- startMillis < 1000)\n            {\n            };\n        }\n    }\n\n    #if (!(defined(_RTT_WIFI_EXTMODE_) && (_RTT_WIFI_EXTMODE_ == 1)))\n    if (configureSuccess==WL_CONNECTED)\n    {\n        // If the Configuration is successful, relay back the assigned IP address.\n        #if(defined(ESP_PLATFORM))\n        Serial_begin(0, _RTT_BAUDRATE_SERIAL0_, _RTT_CONFIG_SERIAL0_);\n        #endif\n        IPAddress ip = WiFi.localIP();\n        Serial.print(\"<<< IP address :\");\n        Serial.print(ip);\n        Serial.println(\" >>>\");\n    }\n    else\n    {\n        // If the Configuration failed,relay back the error message.\n        Serial.println(\"<<< IP address :Failed to configure. >>>\");\n    }\n    #endif //(!(defined(_RTT_WIFI_EXTMODE_) && (_RTT_WIFI_EXTMODE_ == 1)))\n\n    #endif /*Initialize wifi*/\n    #ifdef NANO_MOTOR_CARRIER\n    MW_EnableNanoCarrierBatteryCharging();\n    #endif\n    #ifdef _MW_DASHBOARD_BLOCK_PRESENT_\n    MW_initScreen();\n    #endif\n}\n/* Function: MW_Arduino_Terminate ================================================\n* For Arduino MKR/Leonardo and its variants, the Virtual COM port is handled\n* by the controller. In case the code running on the target exits main,\n* the COM port cannot be accessed until a hard reset is performed.\n* To over come this issue, a while loop is added to make sure that\n* upon getting a stop command from external mode, the code running on\n* the target stops but the code will not exit the main.\n* This will ensure that the COM port is accessible even after the\n* external mode has been stopped. */\nvoid MW_Arduino_Terminate(void){\n    #if defined(ARDUINO_VIRTUAL_COM_PORT) || (defined(ARDUINO_ARDUINO_NANO33BLE) && (!defined(USE_MBEDRTOS)))\n    disable_rt_OneStep();\n    while(1){};     /* To continue virtual COM port functionality */\n    #endif\n}\n\n#ifdef NANO_MOTOR_CARRIER\nvoid MW_EnableNanoCarrierBatteryCharging(void) {\n    Wire.begin();\n    Wire.beginTransmission(PMIC_ADDRESS);\n    Wire.write(PMIC_REG00);\n    Wire.write(0x06); // min sys voltage 3.88V + max input current 2.0 A\n    Wire.endTransmission();\n    Wire.beginTransmission(PMIC_ADDRESS);\n    Wire.write(PMIC_REG01);\n    Wire.write(0x1B); // Charge Battery + Minimum System Voltage 3.5V\n    Wire.endTransmission();\n    Wire.beginTransmission(PMIC_ADDRESS);\n    Wire.write(PMIC_REG02);\n    Wire.write(0x00); // Charge current  512 mA\n    Wire.endTransmission();\n    Wire.beginTransmission(PMIC_ADDRESS);\n    Wire.write(PMIC_REG04);\n    Wire.write(0x9E); // Charge Voltage Limit 4.128V\n    Wire.endTransmission();\n    Wire.beginTransmission(PMIC_ADDRESS);\n    Wire.write(PMIC_REG05);\n    Wire.write(0x8A); // Enable Battery Charge termination + disable watchdog\n    Wire.endTransmission();\n}\n#endif\n\n\n// Overrun detection function for ESP32\n#if defined(ESP_PLATFORM) && defined(_RTT_OVERRUN_DIGITAL_PIN_)\nvoid onOverrunDetect(int id)\n{\n    digitalWrite(_RTT_OVERRUN_DIGITAL_PIN_, HIGH);\n}\n#endif\n// LocalWords:  AVR Bareboard ADK SPI RTT SSPIN Modbus MKR"},{"name":"MW_target_hardware_resources.h","type":"header","group":"other","path":"C:\\Users\\Jasminis\\OneDrive\\R7003E\\Viktor\\LAB_B\\LabB_TuneTheGyro_ert_rtw","tag":"","groupDisplay":"Other files","code":"#ifndef PORTABLE_WORDSIZES\n#ifdef __MW_TARGET_USE_HARDWARE_RESOURCES_H__\n#ifndef __MW_TARGET_HARDWARE_RESOURCES_H__\n#define __MW_TARGET_HARDWARE_RESOURCES_H__\n\n#define MW_MULTI_TASKING_MODE 1\n#include \"MW_ArduinoHWInit.h\"\n#include \"arduinoAVRScheduler.h\"\n\n#define MW_USECODERTARGET 1\n#define MW_TARGETHARDWARE Arduino Mega 2560\n#define MW_CONNECTIONINFO_XCPONSERIAL_BAUDRATE codertarget.arduinobase.registry.getBaudRate\n#define MW_CONNECTIONINFO_XCPONSERIAL_COMPORT codertarget.arduinobase.internal.getExternalModeMexArgs('Serial')\n#define MW_CONNECTIONINFO_XCPONSERIAL_VERBOSE 0\n#define MW_CONNECTIONINFO_XCPONTCPIP_IPADDRESS codertarget.arduinobase.internal.getExternalModeMexArgs('Ethernet')\n#define MW_CONNECTIONINFO_XCPONTCPIP_PORT 17725\n#define MW_CONNECTIONINFO_XCPONTCPIP_VERBOSE 0\n#define MW_CONNECTIONINFO_XCPONWIFI_IPADDRESS codertarget.arduinobase.internal.getExternalModeMexArgs('Wifi')\n#define MW_CONNECTIONINFO_XCPONWIFI_PORT 17725\n#define MW_CONNECTIONINFO_XCPONWIFI_VERBOSE 0\n#define MW_EXTMODE_CONFIGURATION XCP on Serial\n#define MW_EXTMODE_COMPORTBAUD 921600\n#define MW_EXTMODE_RUNNING on\n#define MW_RTOS Baremetal\n#define MW_SCHEDULER_INTERRUPT_SOURCE 0\n#define MW_RUNTIME_BUILDACTION 1\n#define MW_RUNTIME_DISABLEPARALLELBUILD 0\n#define MW_RUNTIME_FORCEBUILDSTATICLIBRARY 0\n#define MW_OVERRUNDETECTION_ENABLE_OVERRUN_DETECTION 1\n#define MW_OVERRUNDETECTION_DIGITAL_OUTPUT_TO_SET_ON_OVERRUN 13\n#define MW_ANALOGINREFVOLTAGE_ANALOG_INPUT_REFERENCE_VOLTAGE 0.000000\n#define MW_SERIAL_SERIAL0_BAUD_RATE 1\n#define MW_SERIAL_SERIAL1_BAUD_RATE 8\n#define MW_SERIAL_SERIAL2_BAUD_RATE 8\n#define MW_SERIAL_SERIAL3_BAUD_RATE 8\n#define MW_SERIAL_SERIAL0_BAUD_SPECIFY 921600\n#define MW_SERIAL_SERIAL0_CONFIG 3\n#define MW_SERIAL_SERIAL1_BAUD_SPECIFY 921600\n#define MW_SERIAL_SERIAL1_CONFIG 3\n#define MW_SERIAL_SERIAL2_BAUD_SPECIFY 921600\n#define MW_SERIAL_SERIAL2_CONFIG 3\n#define MW_SERIAL_SERIAL3_BAUD_SPECIFY 921600\n#define MW_SERIAL_SERIAL3_CONFIG 3\n#define MW_SPI_SPI_CLOCK_OUT_FREQUENCY 1\n#define MW_SPI_SPI_MODE 0\n#define MW_SPI_SPI_BITORDER 0\n#define MW_SPI_SDSLAVESELECT 4.000000\n#define MW_SPI_CANCHIPSELECT 9.000000\n#define MW_ETHERNET_DISABLE_DHCP_ETHERNET 0\n#define MW_ETHERNET_LOCAL_IP_ADDRESS 192.168.0.20\n#define MW_ETHERNET_LOCAL_MAC_ADDRESS DE:AD:BE:EF:FE:ED\n#define MW_WIFI_DISABLE_DHCP_WIFI 0\n#define MW_WIFI_WIFI_IP_ADDRESS 192.168.1.20\n#define MW_WIFI_WIFI_SSID yourNetwork\n#define MW_WIFI_SET_WIFI_ENCRYPTION 0\n#define MW_WIFI_WIFI_WEP_KEY D0D0DEADF00DABBADEAFBEADED\n#define MW_WIFI_WIFI_WEP_KEY_INDEX 0\n#define MW_WIFI_WIFI_WPA_PASSWORD secretPassword\n#define MW_WIFI_WIFI_HARDWARE 0\n#define MW_WIFI_WIFI_ESP8266_HW_SERIAL_PORT 0\n#define MW_THINGSPEAK_ENABLE_CUSTOMSERVER 48\n#define MW_THINGSPEAK_IP_ADDRESS 184.106.153.149\n#define MW_THINGSPEAK_PORT 80\n#define MW_DATAVERSION 2016.02\n#define MW_BUILD_ACTION Build, load and run\n#define MW_I2C_I2C0BUSSPEEDHZ 100000\n#define MW_CAN_CANBUSSPEED 10\n#define MW_CAN_CANOSCILLATORFREQUENCY 1\n#define MW_CAN_INTERRUPTPIN 2.000000\n#define MW_CAN_ALLOWALLFILTER 0\n#define MW_CAN_BUFFER0IDTYPE 0\n#define MW_CAN_ACCEPTANCEMASK0_NOR 0\n#define MW_CAN_ACCEPTANCEFILTER0_NOR 255\n#define MW_CAN_ACCEPTANCEFILTER1_NOR 255\n#define MW_CAN_ACCEPTANCEMASK0_EXT 0\n#define MW_CAN_ACCEPTANCEFILTER0_EXT 255\n#define MW_CAN_ACCEPTANCEFILTER1_EXT 255\n#define MW_CAN_BUFFER1IDTYPE 0\n#define MW_CAN_ACCEPTANCEMASK1_NOR 0\n#define MW_CAN_ACCEPTANCEFILTER2_NOR 255\n#define MW_CAN_ACCEPTANCEFILTER3_NOR 255\n#define MW_CAN_ACCEPTANCEFILTER4_NOR 255\n#define MW_CAN_ACCEPTANCEFILTER5_NOR 255\n#define MW_CAN_ACCEPTANCEMASK1_EXT 0\n#define MW_CAN_ACCEPTANCEFILTER2_EXT 255\n#define MW_CAN_ACCEPTANCEFILTER3_EXT 255\n#define MW_CAN_ACCEPTANCEFILTER4_EXT 255\n#define MW_CAN_ACCEPTANCEFILTER5_EXT 255\n#define MW_IOBLOCKSMODE deployed\n#define MW_HOSTBOARDCONNECTION_APPDOWNLOAD_PORT_SOURCE 2\n#define MW_HOSTBOARDCONNECTION_APPDOWNLOAD_COMPORT_SPECIFY 3\n#define MW_HOSTBOARDCONNECTION_APPDOWNLOAD_COMPORT_SELECT -1\n#define MW_HOSTBOARDCONNECTION_APPDOWNLOAD_BAUD 0\n#define MW_HOSTBOARDCONNECTION_APPDOWNLOAD_BAUD_SPECIFY \n#define MW_HOSTBOARDCONNECTION_CONNECTEDIO_SERIAL_PORT 0\n#define MW_HOSTBOARDCONNECTION_CONNECTEDIO_PORT_SOURCE1 2\n#define MW_HOSTBOARDCONNECTION_CONNECTEDIO_PORT_SOURCE2 0\n#define MW_HOSTBOARDCONNECTION_CONNECTEDIO_COMPORT_SELECT -1\n#define MW_HOSTBOARDCONNECTION_CONNECTEDIO_COMPORT_SPECIFY 3\n#define MW_HOSTBOARDCONNECTION_CONNECTEDIO_BAUD 0\n#define MW_HOSTBOARDCONNECTION_CONNECTEDIO_BAUD_SPECIFY \n#define MW_HOSTBOARDCONNECTION_EXTERNALMODE_SERIAL_PORT 0\n#define MW_HOSTBOARDCONNECTION_EXTERNALMODE_PORT_SOURCE1 2\n#define MW_HOSTBOARDCONNECTION_EXTERNALMODE_PORT_SOURCE2 0\n#define MW_HOSTBOARDCONNECTION_EXTERNALMODE_COMPORT_SELECT -1\n#define MW_HOSTBOARDCONNECTION_EXTERNALMODE_COMPORT_SPECIFY 3\n#define MW_HOSTBOARDCONNECTION_EXTERNALMODE_BAUD -1\n#define MW_HOSTBOARDCONNECTION_EXTERNALMODE_BAUD_SPECIFY \n#define MW_HOSTBOARDCONNECTION_PIL_SERIAL_PORT 0\n#define MW_HOSTBOARDCONNECTION_PIL_PORT_SOURCE1 2\n#define MW_HOSTBOARDCONNECTION_PIL_PORT_SOURCE2 0\n#define MW_HOSTBOARDCONNECTION_PIL_COMPORT_SELECT -1\n#define MW_HOSTBOARDCONNECTION_PIL_COMPORT_SPECIFY 3\n#define MW_HOSTBOARDCONNECTION_PIL_BAUD 0\n#define MW_HOSTBOARDCONNECTION_PIL_BAUD_SPECIFY \n#define MW_EXTMODEPROTOCOLINFO_XCPONSERIAL_HOSTINTERFACE Simulink\n#define MW_EXTMODEPROTOCOLINFO_XCPONSERIAL_LOGGINGBUFFERAUTO 1\n#define MW_EXTMODEPROTOCOLINFO_XCPONSERIAL_LOGGINGBUFFERSIZE 500\n#define MW_EXTMODEPROTOCOLINFO_XCPONSERIAL_LOGGINGBUFFERNUM 3\n#define MW_EXTMODEPROTOCOLINFO_XCPONSERIAL_MAXCONTIGSAMPLES 10\n#define MW_EXTMODEPROTOCOLINFO_XCPONTCPIP_HOSTINTERFACE Simulink\n#define MW_EXTMODEPROTOCOLINFO_XCPONTCPIP_LOGGINGBUFFERAUTO 1\n#define MW_EXTMODEPROTOCOLINFO_XCPONTCPIP_LOGGINGBUFFERSIZE 500\n#define MW_EXTMODEPROTOCOLINFO_XCPONTCPIP_LOGGINGBUFFERNUM 3\n#define MW_EXTMODEPROTOCOLINFO_XCPONTCPIP_MAXCONTIGSAMPLES 10\n#define MW_EXTMODEPROTOCOLINFO_XCPONWIFI_HOSTINTERFACE Simulink\n#define MW_EXTMODEPROTOCOLINFO_XCPONWIFI_LOGGINGBUFFERAUTO 1\n#define MW_EXTMODEPROTOCOLINFO_XCPONWIFI_LOGGINGBUFFERSIZE 500\n#define MW_EXTMODEPROTOCOLINFO_XCPONWIFI_LOGGINGBUFFERNUM 3\n#define MW_EXTMODEPROTOCOLINFO_XCPONWIFI_MAXCONTIGSAMPLES 10\n#define MW_CONNECTEDIO_CONNECTEDIOMODE 0\n#define MW_CONNECTEDIO_ACTIONONOVERRUN 0\n#define MW_MODBUS_MODBUS_COMMS 0\n#define MW_MODBUS_MODBUS_MODE 0\n#define MW_MODBUS_MODBUS_SLAVEID 1\n#define MW_MODBUS_MODBUS_CONFIGCOIL 49\n#define MW_MODBUS_MODBUS_COILADDR 0\n#define MW_MODBUS_MODBUS_COILNUM 1\n#define MW_MODBUS_MODBUS_CONFIGINPUT 49\n#define MW_MODBUS_MODBUS_INPUTADDR 0\n#define MW_MODBUS_MODBUS_INPUTNUM 1\n#define MW_MODBUS_MODBUS_CONFIGHOLDINGREG 49\n#define MW_MODBUS_MODBUS_HOLDINGREGADDR 0\n#define MW_MODBUS_MODBUS_HOLDINGREGNUM 1\n#define MW_MODBUS_MODBUS_CONFIGINPUTREG 49\n#define MW_MODBUS_MODBUS_INPUTREGADDR 0\n#define MW_MODBUS_MODBUS_INPUTREGNUM 1\n#define MW_MODBUS_MODBUS_MASTERTIMEOUT 100\n#define MW_RS485_RS485_SERIAL 1\n#define MW_RS485_RS485_BAUD 9600\n#define MW_RS485_RS485_CONFIG 3\n#define MW_RS485_RS485_DEPIN 8\n#define MW_RS485_RS485_REPIN 9\n#define MW_DISPLAY_ENABLECODEGEN 0\n#define MW_DISPLAY_APPLAUNCHBUTTON \n\n#endif /* __MW_TARGET_HARDWARE_RESOURCES_H__ */\n\n#endif\n\n#endif\n"},{"name":"Wire.cpp","type":"source","group":"legacy","path":"C:\\Users\\Jasminis\\OneDrive\\R7003E\\Viktor\\LAB_B\\LabB_TuneTheGyro_ert_rtw\\..\\..\\..\\..\\..\\..\\..\\ProgramData\\MATLAB\\SupportPackages\\R2023a\\aIDE\\hardware\\arduino\\avr\\libraries\\Wire\\src","tag":"","groupDisplay":"Other files","code":"/*\n  TwoWire.cpp - TWI/I2C library for Wiring & Arduino\n  Copyright (c) 2006 Nicholas Zambetti.  All right reserved.\n\n  This library is free software; you can redistribute it and/or\n  modify it under the terms of the GNU Lesser General Public\n  License as published by the Free Software Foundation; either\n  version 2.1 of the License, or (at your option) any later version.\n\n  This library is distributed in the hope that it will be useful,\n  but WITHOUT ANY WARRANTY; without even the implied warranty of\n  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n  Lesser General Public License for more details.\n\n  You should have received a copy of the GNU Lesser General Public\n  License along with this library; if not, write to the Free Software\n  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA\n \n  Modified 2012 by Todd Krein (todd@krein.org) to implement repeated starts\n  Modified 2017 by Chuck Todd (ctodd@cableone.net) to correct Unconfigured Slave Mode reboot\n  Modified 2020 by Greyson Christoforo (grey@christoforo.net) to implement timeouts\n*/\n\nextern \"C\" {\n  #include <stdlib.h>\n  #include <string.h>\n  #include <inttypes.h>\n  #include \"utility/twi.h\"\n}\n\n#include \"Wire.h\"\n\n// Initialize Class Variables //////////////////////////////////////////////////\n\nuint8_t TwoWire::rxBuffer[BUFFER_LENGTH];\nuint8_t TwoWire::rxBufferIndex = 0;\nuint8_t TwoWire::rxBufferLength = 0;\n\nuint8_t TwoWire::txAddress = 0;\nuint8_t TwoWire::txBuffer[BUFFER_LENGTH];\nuint8_t TwoWire::txBufferIndex = 0;\nuint8_t TwoWire::txBufferLength = 0;\n\nuint8_t TwoWire::transmitting = 0;\nvoid (*TwoWire::user_onRequest)(void);\nvoid (*TwoWire::user_onReceive)(int);\n\n// Constructors ////////////////////////////////////////////////////////////////\n\nTwoWire::TwoWire()\n{\n}\n\n// Public Methods //////////////////////////////////////////////////////////////\n\nvoid TwoWire::begin(void)\n{\n  rxBufferIndex = 0;\n  rxBufferLength = 0;\n\n  txBufferIndex = 0;\n  txBufferLength = 0;\n\n  twi_init();\n  twi_attachSlaveTxEvent(onRequestService); // default callback must exist\n  twi_attachSlaveRxEvent(onReceiveService); // default callback must exist\n}\n\nvoid TwoWire::begin(uint8_t address)\n{\n  begin();\n  twi_setAddress(address);\n}\n\nvoid TwoWire::begin(int address)\n{\n  begin((uint8_t)address);\n}\n\nvoid TwoWire::end(void)\n{\n  twi_disable();\n}\n\nvoid TwoWire::setClock(uint32_t clock)\n{\n  twi_setFrequency(clock);\n}\n\n/***\n * Sets the TWI timeout.\n *\n * This limits the maximum time to wait for the TWI hardware. If more time passes, the bus is assumed\n * to have locked up (e.g. due to noise-induced glitches or faulty slaves) and the transaction is aborted.\n * Optionally, the TWI hardware is also reset, which can be required to allow subsequent transactions to\n * succeed in some cases (in particular when noise has made the TWI hardware think there is a second\n * master that has claimed the bus).\n *\n * When a timeout is triggered, a flag is set that can be queried with `getWireTimeoutFlag()` and is cleared\n * when `clearWireTimeoutFlag()` or `setWireTimeoutUs()` is called.\n *\n * Note that this timeout can also trigger while waiting for clock stretching or waiting for a second master\n * to complete its transaction. So make sure to adapt the timeout to accomodate for those cases if needed.\n * A typical timeout would be 25ms (which is the maximum clock stretching allowed by the SMBus protocol),\n * but (much) shorter values will usually also work.\n *\n * In the future, a timeout will be enabled by default, so if you require the timeout to be disabled, it is\n * recommended you disable it by default using `setWireTimeoutUs(0)`, even though that is currently\n * the default.\n *\n * @param timeout a timeout value in microseconds, if zero then timeout checking is disabled\n * @param reset_with_timeout if true then TWI interface will be automatically reset on timeout\n *                           if false then TWI interface will not be reset on timeout\n\n */\nvoid TwoWire::setWireTimeout(uint32_t timeout, bool reset_with_timeout){\n  twi_setTimeoutInMicros(timeout, reset_with_timeout);\n}\n\n/***\n * Returns the TWI timeout flag.\n *\n * @return true if timeout has occured since the flag was last cleared.\n */\nbool TwoWire::getWireTimeoutFlag(void){\n  return(twi_manageTimeoutFlag(false));\n}\n\n/***\n * Clears the TWI timeout flag.\n */\nvoid TwoWire::clearWireTimeoutFlag(void){\n  twi_manageTimeoutFlag(true);\n}\n\nuint8_t TwoWire::requestFrom(uint8_t address, uint8_t quantity, uint32_t iaddress, uint8_t isize, uint8_t sendStop)\n{\n  if (isize > 0) {\n  // send internal address; this mode allows sending a repeated start to access\n  // some devices' internal registers. This function is executed by the hardware\n  // TWI module on other processors (for example Due's TWI_IADR and TWI_MMR registers)\n\n  beginTransmission(address);\n\n  // the maximum size of internal address is 3 bytes\n  if (isize > 3){\n    isize = 3;\n  }\n\n  // write internal register address - most significant byte first\n  while (isize-- > 0)\n    write((uint8_t)(iaddress >> (isize*8)));\n  endTransmission(false);\n  }\n\n  // clamp to buffer length\n  if(quantity > BUFFER_LENGTH){\n    quantity = BUFFER_LENGTH;\n  }\n  // perform blocking read into buffer\n  uint8_t read = twi_readFrom(address, rxBuffer, quantity, sendStop);\n  // set rx buffer iterator vars\n  rxBufferIndex = 0;\n  rxBufferLength = read;\n\n  return read;\n}\n\nuint8_t TwoWire::requestFrom(uint8_t address, uint8_t quantity, uint8_t sendStop) {\n\treturn requestFrom((uint8_t)address, (uint8_t)quantity, (uint32_t)0, (uint8_t)0, (uint8_t)sendStop);\n}\n\nuint8_t TwoWire::requestFrom(uint8_t address, uint8_t quantity)\n{\n  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)true);\n}\n\nuint8_t TwoWire::requestFrom(int address, int quantity)\n{\n  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)true);\n}\n\nuint8_t TwoWire::requestFrom(int address, int quantity, int sendStop)\n{\n  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)sendStop);\n}\n\nvoid TwoWire::beginTransmission(uint8_t address)\n{\n  // indicate that we are transmitting\n  transmitting = 1;\n  // set address of targeted slave\n  txAddress = address;\n  // reset tx buffer iterator vars\n  txBufferIndex = 0;\n  txBufferLength = 0;\n}\n\nvoid TwoWire::beginTransmission(int address)\n{\n  beginTransmission((uint8_t)address);\n}\n\n//\n//\tOriginally, 'endTransmission' was an f(void) function.\n//\tIt has been modified to take one parameter indicating\n//\twhether or not a STOP should be performed on the bus.\n//\tCalling endTransmission(false) allows a sketch to \n//\tperform a repeated start. \n//\n//\tWARNING: Nothing in the library keeps track of whether\n//\tthe bus tenure has been properly ended with a STOP. It\n//\tis very possible to leave the bus in a hung state if\n//\tno call to endTransmission(true) is made. Some I2C\n//\tdevices will behave oddly if they do not see a STOP.\n//\nuint8_t TwoWire::endTransmission(uint8_t sendStop)\n{\n  // transmit buffer (blocking)\n  uint8_t ret = twi_writeTo(txAddress, txBuffer, txBufferLength, 1, sendStop);\n  // reset tx buffer iterator vars\n  txBufferIndex = 0;\n  txBufferLength = 0;\n  // indicate that we are done transmitting\n  transmitting = 0;\n  return ret;\n}\n\n//\tThis provides backwards compatibility with the original\n//\tdefinition, and expected behaviour, of endTransmission\n//\nuint8_t TwoWire::endTransmission(void)\n{\n  return endTransmission(true);\n}\n\n// must be called in:\n// slave tx event callback\n// or after beginTransmission(address)\nsize_t TwoWire::write(uint8_t data)\n{\n  if(transmitting){\n  // in master transmitter mode\n    // don't bother if buffer is full\n    if(txBufferLength >= BUFFER_LENGTH){\n      setWriteError();\n      return 0;\n    }\n    // put byte in tx buffer\n    txBuffer[txBufferIndex] = data;\n    ++txBufferIndex;\n    // update amount in buffer   \n    txBufferLength = txBufferIndex;\n  }else{\n  // in slave send mode\n    // reply to master\n    twi_transmit(&data, 1);\n  }\n  return 1;\n}\n\n// must be called in:\n// slave tx event callback\n// or after beginTransmission(address)\nsize_t TwoWire::write(const uint8_t *data, size_t quantity)\n{\n  if(transmitting){\n  // in master transmitter mode\n    for(size_t i = 0; i < quantity; ++i){\n      write(data[i]);\n    }\n  }else{\n  // in slave send mode\n    // reply to master\n    twi_transmit(data, quantity);\n  }\n  return quantity;\n}\n\n// must be called in:\n// slave rx event callback\n// or after requestFrom(address, numBytes)\nint TwoWire::available(void)\n{\n  return rxBufferLength - rxBufferIndex;\n}\n\n// must be called in:\n// slave rx event callback\n// or after requestFrom(address, numBytes)\nint TwoWire::read(void)\n{\n  int value = -1;\n  \n  // get each successive byte on each call\n  if(rxBufferIndex < rxBufferLength){\n    value = rxBuffer[rxBufferIndex];\n    ++rxBufferIndex;\n  }\n\n  return value;\n}\n\n// must be called in:\n// slave rx event callback\n// or after requestFrom(address, numBytes)\nint TwoWire::peek(void)\n{\n  int value = -1;\n  \n  if(rxBufferIndex < rxBufferLength){\n    value = rxBuffer[rxBufferIndex];\n  }\n\n  return value;\n}\n\nvoid TwoWire::flush(void)\n{\n  // XXX: to be implemented.\n}\n\n// behind the scenes function that is called when data is received\nvoid TwoWire::onReceiveService(uint8_t* inBytes, int numBytes)\n{\n  // don't bother if user hasn't registered a callback\n  if(!user_onReceive){\n    return;\n  }\n  // don't bother if rx buffer is in use by a master requestFrom() op\n  // i know this drops data, but it allows for slight stupidity\n  // meaning, they may not have read all the master requestFrom() data yet\n  if(rxBufferIndex < rxBufferLength){\n    return;\n  }\n  // copy twi rx buffer into local read buffer\n  // this enables new reads to happen in parallel\n  for(uint8_t i = 0; i < numBytes; ++i){\n    rxBuffer[i] = inBytes[i];    \n  }\n  // set rx iterator vars\n  rxBufferIndex = 0;\n  rxBufferLength = numBytes;\n  // alert user program\n  user_onReceive(numBytes);\n}\n\n// behind the scenes function that is called when data is requested\nvoid TwoWire::onRequestService(void)\n{\n  // don't bother if user hasn't registered a callback\n  if(!user_onRequest){\n    return;\n  }\n  // reset tx buffer iterator vars\n  // !!! this will kill any pending pre-master sendTo() activity\n  txBufferIndex = 0;\n  txBufferLength = 0;\n  // alert user program\n  user_onRequest();\n}\n\n// sets function called on slave write\nvoid TwoWire::onReceive( void (*function)(int) )\n{\n  user_onReceive = function;\n}\n\n// sets function called on slave read\nvoid TwoWire::onRequest( void (*function)(void) )\n{\n  user_onRequest = function;\n}\n\n// Preinstantiate Objects //////////////////////////////////////////////////////\n\nTwoWire Wire = TwoWire();\n\n"},{"name":"arduinoAVRScheduler.cpp","type":"source","group":"legacy","path":"C:\\Users\\Jasminis\\OneDrive\\R7003E\\Viktor\\LAB_B\\LabB_TuneTheGyro_ert_rtw\\..\\..\\..\\..\\..\\..\\..\\ProgramData\\MATLAB\\SupportPackages\\R2023a\\toolbox\\target\\supportpackages\\arduinotarget\\scheduler\\src","tag":"","groupDisplay":"Other files","code":"/* Arduino AVR Bareboard scheduler\n *\n * Copyright 2013-2015 The MathWorks, Inc.\n */\n\n#include \"Arduino.h\"\n#include \"arduinoAVRScheduler.h\"\n\nextern volatile int IsrOverrun;\nunsigned long oldtime = 0L;\nunsigned long actualtime;\n\n\n#if (defined(MW_SCHEDULERCOUNTER) &&  (MW_SCHEDULERCOUNTER > 1))\n   #if (MW_SCHEDULERCOUNTER >= 65536)\n      volatile uint32_t scheduler_counter = 0;\n    #elif (MW_SCHEDULERCOUNTER >= 256)\n      volatile uint16_t scheduler_counter = 0;\n    #else\n      volatile uint8_t scheduler_counter = 0;\n    #endif\n#endif\n                                  \n/*\n * Call the rt_Onestep function when the timer interrupt hits\n *\n */\n#ifndef _MW_ARDUINO_LOOP_\nISR(INTERRUPT_VECTOR)\n{\n    RESET_TIMER;\n    \n    #if (defined(MW_SCHEDULERCOUNTER) && (MW_SCHEDULERCOUNTER > 1))\n      if ((++scheduler_counter) == MW_SCHEDULERCOUNTER) {\n         scheduler_counter = 0;\n    #endif\n\n    #ifdef _RTT_OVERRUN_DIGITAL_PIN_\n        if (IsrOverrun == 1)\n        {\n          // Overrun detected\n          digitalWrite(_RTT_OVERRUN_DIGITAL_PIN_, HIGH);\n        }\n    #endif\n      rt_OneStep();\n         \n    #if (defined(MW_SCHEDULERCOUNTER) && (MW_SCHEDULERCOUNTER > 1))\n      }\n    #endif\n}\n#endif    \n\nvoid configureArduinoAVRTimer(void)\n{\n#ifndef _MW_ARDUINO_LOOP_\n  // Sets up the timer overflow interrupt.\n  RESET_TIMER;\n\n  // Initially disable the overflow interrupt (before configuration).\n  DISABLE_SCHEDULER_INT();\n\n  // Set the timer to normal mode.\n  TIMER_NORMAL_MODE;\n\n  // Set the prescaler.\n  SETUP_PRESCALER;\n\n  // Enable the overflow interrupt.\n  ENABLE_SCHEDULER_INT();    \n#endif  \n}\n\nboolean disable_rt_OneStep(void)\n{\n    boolean t_return = 0U;\n#ifndef _MW_ARDUINO_LOOP_\n    t_return = GET_SCHEDULER_INT_EN_STATUS();\n  // Disable the overflow interrupt for XCP External Mode\n  DISABLE_SCHEDULER_INT();  \n#endif \n  return t_return;\n}\n\nvoid enable_rt_OneStep(void)\n{\n#ifndef _MW_ARDUINO_LOOP_\n  // Enable the overflow interrupt\n  ENABLE_SCHEDULER_INT();  \n#endif \n}\n\nboolean MW_Arduino_Loop(void)\n{\n    boolean ret = 0;\n\n#ifdef _MW_ARDUINO_LOOP_\n    unsigned long overruntime;\n#if (defined(MW_ARDUINO_MICROS))\n    actualtime = micros();\n#else\n    actualtime = millis();\n#endif\n  \n    if ((unsigned long) (actualtime - oldtime) >= MW_ARDUINO_STEP_SIZE)\n    {\n        oldtime = actualtime;\n        \n#ifdef _RTT_OVERRUN_DIGITAL_PIN_\n        if (IsrOverrun == 1)\n        {\n            // Overrun detected\n            digitalWrite(_RTT_OVERRUN_DIGITAL_PIN_, HIGH);\n        }\n#endif\n        rt_OneStep();\n            #if (defined(_MW_ARDUINO_LOOP_))\n                #if (defined(MW_ARDUINO_MICROS))\n                        overruntime = micros();\n                #else\n                        overruntime = millis();\n                #endif\n                if ((unsigned long) (overruntime - oldtime) >= MW_ARDUINO_STEP_SIZE)   \n                  IsrOverrun = 1;\n                else\n                  IsrOverrun = 0;\n            #endif\n}\n#endif\n\n    ret = 1;\n    return ret;\n}\n\n"},{"name":"io_wrappers.cpp","type":"source","group":"legacy","path":"C:\\Users\\Jasminis\\OneDrive\\R7003E\\Viktor\\LAB_B\\LabB_TuneTheGyro_ert_rtw\\..\\..\\..\\..\\..\\..\\..\\ProgramData\\MATLAB\\SupportPackages\\R2023a\\toolbox\\target\\supportpackages\\arduinobase\\src","tag":"","groupDisplay":"Other files","code":"/*\n* Wrappers to make I/O functions available with C linkage. This allows C++\n* methods to be called from C code.\n*\n* Copyright 2011-2022 The MathWorks, Inc. */\n\n#include <inttypes.h>\n#include \"Arduino.h\"\n#include \"rtwtypes.h\"\n\n#if (defined(_RTT_TCPIP_EXTMODE_) && (_RTT_TCPIP_EXTMODE_ == 1)) || (defined(_RTT_UDP_) && (_RTT_UDP_ != 0)) || (defined(_RTT_TCP_) && (_RTT_TCP_ != 0) || defined(_RTT_THINGSPEAK_))\n#include <Ethernet.h>\n#include <EthernetUdp.h>\n#include <SPI.h>\n#endif\n\n#if defined(ARDUINO_ARM_CORTEX_M0_PLUS)\nextern \"C\" void __libc_init_array(void);\n#endif\n\nextern \"C\" {\n    void __cxa_pure_virtual(void);\n}\n\nextern \"C\" void Serial_begin(int port, long r, int c)\n{\n    static int serialInit=0;\n    #if !(defined(ESP_PLATFORM))\n    serialInit=0;   //Reset serialInit flag for all targets except ESP32\n    #endif\n    #if defined(ARDUINO_ARCH_SAM)\n    UARTClass::UARTModes config = UARTClass::UARTModes(c);\n    #else\n    int config = c;\n    #endif\n    #if defined(ARDUINO_NUM_SERIAL_PORTS)\n    switch(port) {\n        case 0:\n            if(serialInit & 1)return;\n            serialInit |= 1;\n            #if defined(ESP_PLATFORM)\n            Serial.begin(r,config,_RTT_RX_PIN_SERIAL0_,_RTT_TX_PIN_SERIAL0_);\n            #else\n            Serial.begin(r,config);\n            #endif\n            break;\n        case 1:\n            if(serialInit & 2)return;\n            serialInit |= 2;\n            #if(ARDUINO_NUM_SERIAL_PORTS >= 2)\n            #if defined(ESP_PLATFORM)\n            Serial1.begin(r,config,_RTT_RX_PIN_SERIAL1_,_RTT_TX_PIN_SERIAL1_);\n            #else\n            Serial1.begin(r,config);\n            #endif\n            #endif\n            break;\n        case 2:\n            if(serialInit & 4)return;\n            serialInit |= 4;\n            #if(ARDUINO_NUM_SERIAL_PORTS >= 3)\n            #if defined(ESP_PLATFORM)\n            Serial2.begin(r,config,_RTT_RX_PIN_SERIAL2_,_RTT_TX_PIN_SERIAL2_);\n            #else\n            Serial2.begin(r,config);\n            #endif\n            #endif\n            break;\n        case 3:\n            if(serialInit & 8)return;\n            serialInit |= 8;\n            #if(ARDUINO_NUM_SERIAL_PORTS >= 4)\n            Serial3.begin(r,config);\n            #endif\n            break;\n    }\n    #else\n    if(serialInit & 1)return;\n    serialInit |= 1;\n    Serial.begin(r,SERIAL_8N1);\n    #endif\n}\n\nextern \"C\" void Serial_read(int port, int showOutStatus, uint8_t *outData, int16_t *outStatus)\n{\n    int libFcnOutput;\n    #if defined(ARDUINO_NUM_SERIAL_PORTS)\n    switch(port) {\n        case 0:\n            libFcnOutput = Serial.read();\n            break;\n        case 1:\n            #if(ARDUINO_NUM_SERIAL_PORTS >= 2)\n            libFcnOutput = Serial1.read();\n            #endif\n            break;\n        case 2:\n            #if(ARDUINO_NUM_SERIAL_PORTS >= 3)\n            libFcnOutput = Serial2.read();\n            #endif\n            break;\n        case 3:\n            #if(ARDUINO_NUM_SERIAL_PORTS >= 4)\n            libFcnOutput = Serial3.read();\n            #endif\n            break;\n    }\n    #else\n    libFcnOutput = Serial.read();\n    #endif\n    *outData = (uint8_t) libFcnOutput;\n    *outStatus = (libFcnOutput != -1);\n}\n\nextern \"C\" void Serial_write(int port, uint8_t * c, size_t s)\n{\n    #if defined(ARDUINO_NUM_SERIAL_PORTS)\n    switch(port) {\n        case 0:\n            Serial.write(c, s);\n            break;\n        case 1:\n            #if(ARDUINO_NUM_SERIAL_PORTS >= 2)\n            Serial1.write(c, s);\n            #endif\n            break;\n        case 2:\n            #if(ARDUINO_NUM_SERIAL_PORTS >= 3)\n            Serial2.write(c, s);\n            #endif\n            break;\n        case 3:\n            #if(ARDUINO_NUM_SERIAL_PORTS >= 4)\n            Serial3.write(c, s);\n            #endif\n            break;\n    }\n    #else\n    Serial.write(c, s);\n    #endif\n}\n\n#if _RTT_UDP_ != 0\nEthernetUDP Udp[_RTT_UDP_];\nIPAddress localIpAddress(_RTT_Local_IP1, _RTT_Local_IP2, _RTT_Local_IP3, _RTT_Local_IP4);\nbyte mac[] = { _RTT_Local_MAC1, _RTT_Local_MAC2, _RTT_Local_MAC3, _RTT_Local_MAC4, _RTT_Local_MAC5, _RTT_Local_MAC6 };\nunsigned int localport[_RTT_UDP_] = {_RTT_UDP_LOCAL_PORT_ORDERED};\nint configureSuccess;\nint trialcount=0;\nextern \"C\" uint8_t MW_EthernetAndUDPBegin(uint8_t udpindex, uint32_t localPort)\n{\n    static int only_one_ethernet_begin;\n    if (only_one_ethernet_begin==0)\n    {\n        #if (defined(_RTT_DISABLE_Ethernet_DHCP_) && (_RTT_DISABLE_Ethernet_DHCP_ !=0))\n        Ethernet.begin(mac, localIpAddress);\n        configureSuccess = 1;\n        #else\n        configureSuccess = Ethernet.begin(mac);\n        #endif\n        only_one_ethernet_begin++;\n\n        for(trialcount=0;trialcount<5;trialcount++)\n        {\n            if(Serial)\n            {\n                break;\n            }else\n            {\n                delay(1000);\n            }\n        }\n        // Depending on if the IP address assignment using DHCP has been successful or not,\n        // send the appropriate information back to the host.\n        // If External mode over TCP/IP or Wifi, do not print this Info. Information of IP address will be printed as\n        // a part of rtiostream_open\n        #if (!(defined(_RTT_TCPIP_EXTMODE_) && (_RTT_TCPIP_EXTMODE_ == 1)))\n        if (configureSuccess==1)\n        {\n            if(Ethernet.localIP()[0] == 0 || Ethernet.localIP()[0] == 255)\n            {\n                /*Tried to assign Static IP, failed due to one of the following reasons :\n                * 1. Ethernet shield is not connected properly with Arduino.\n                * 2. Ethernet shield is not connected to a network.\n                **/\n                Serial.println(\"<<<IP address: Failed to configure.>>>\");\n            }\n            else\n            {\n                // If the Configuration is successful, relay back the assigned IP address.\n                Serial.print(\"<<<IP address: \");\n                for (byte thisByte = 0; thisByte < 4; thisByte++)\n                {\n                    // Print the value of each byte of the IP address:\n                    Serial.print(Ethernet.localIP()[thisByte], DEC);\n                    if (thisByte<3)\n                    {\n                        Serial.print(\".\");\n                    }\n                }\n                Serial.println(\">>>\");\n            }\n        }\n        else\n        {\n            // If the Configuration failed,relay back the error message.\n            Serial.println(\"<<<IP address: Failed to configure.>>>\");\n        }\n        Serial.flush();\n        #endif\n    }\n    return (Udp[udpindex].begin(localport[udpindex]));\n}\n\nextern \"C\" int MW_UDPFinalWrite(uint8_t udpindex, uint8_t data, uint8_t remoteIPOctect1,uint8_t remoteIPOctect2,uint8_t remoteIPOctect3,uint8_t remoteIPOctect4, uint32_t remoteport)\n{\n    IPAddress remoteIpAddress(remoteIPOctect1,remoteIPOctect2, remoteIPOctect3, remoteIPOctect4);\n    Udp[udpindex].beginPacket(remoteIpAddress, remoteport);\n    Udp[udpindex].write(data);\n    return(Udp[udpindex].endPacket());\n}\n\nextern \"C\" void MW_UDPFinalRead(uint8_t udpindex, uint8_t *data, int32_t *outStatus)\n{\n    int packetSize = Udp[udpindex].parsePacket();\n    if(packetSize)\n    {\n        int libFcnOutput;\n        libFcnOutput = Udp[udpindex].read();\n        *data = (uint8_t) libFcnOutput;\n        *outStatus = (libFcnOutput != -1);\n    }\n\n    else\n    {\n        //When the client is not connected the status flag is accordingly toggled.\n        *outStatus = 0;\n    }\n}\n#endif\n\n#if defined(_RTT_THINGSPEAK_) || (_RTT_TCP_ != 0)\nIPAddress localIpAddress(_RTT_Local_IP1, _RTT_Local_IP2, _RTT_Local_IP3, _RTT_Local_IP4);\nbyte mac[] = { _RTT_Local_MAC1, _RTT_Local_MAC2, _RTT_Local_MAC3, _RTT_Local_MAC4, _RTT_Local_MAC5, _RTT_Local_MAC6 };\nint configureSuccess;\nint trialcount;\n#if _RTT_TCP_ != 0\nEthernetServer server[_RTT_TCP_] = {_RTT_TCP_SERVER_PORT_ORDERED};\n#endif\nextern \"C\" void MW_EthernetAndTCPServerBegin(uint8_t tcpindex, uint32_t serverport)\n{\n    static int only_one_tcp_server_and_ethernet_begin = 0;\n\n    if (only_one_tcp_server_and_ethernet_begin==0)\n    {\n        #if (defined(_RTT_DISABLE_Ethernet_DHCP_) && (_RTT_DISABLE_Ethernet_DHCP_ !=0))\n        Ethernet.begin(mac, localIpAddress);\n        configureSuccess = 1;\n        #else\n        configureSuccess = Ethernet.begin(mac);\n        #endif\n        only_one_tcp_server_and_ethernet_begin++;\n\n        for(trialcount=0;trialcount<5;trialcount++)\n        {\n            if(Serial)\n            {\n                break;\n            }else\n            {\n                delay(1000);\n            }\n        }\n\n        // Depending on if the IP address assignment using DHCP has been successful or not,\n        // send the appropriate information back to the host.\n        // If External mode over TCP/IP or Wifi, do not print this Info. Information of IP address will be printed as\n        // a part of rtiostream_open\n        #if (!(defined(_RTT_TCPIP_EXTMODE_) && (_RTT_TCPIP_EXTMODE_ == 1)))\n        if (configureSuccess==1)\n        {\n            if(Ethernet.localIP()[0] == 0 || Ethernet.localIP()[0] == 255)\n            {\n                /*Tried to assign Static IP, failed due to one of the following reasons :\n                * 1. Ethernet shield is not connected properly with Arduino.\n                * 2. Ethernet shield is not connected to a network.\n                **/\n                Serial.println(\"<<<IP address: Failed to configure.>>>\");\n            }\n            else\n            {\n                // If the Configuration is successful, relay back the assigned IP address.\n                Serial.print(\"<<<IP address: \");\n                for (byte thisByte = 0; thisByte < 4; thisByte++)\n                {\n                    // Print the value of each byte of the IP address:\n                    Serial.print(Ethernet.localIP()[thisByte], DEC);\n                    if (thisByte<3)\n                    {\n                        Serial.print(\".\");\n                    }\n                }\n                Serial.println(\">>>\");\n            }\n        }\n        else\n        {\n            // If the Configuration failed,relay back the error message.\n            Serial.println(\"<<<IP address: Failed to configure.>>>\");\n        }\n        Serial.flush();\n        #endif\n\n        #if _RTT_TCP_ != 0\n        // Begin all servers based on the number of different TCP ports.\n        for (int i = 0;i < _RTT_TCP_;i++)\n        {\n            server[i].begin();\n        }\n        #endif\n        only_one_tcp_server_and_ethernet_begin = 1;\n    }\n}\n#endif\n#if _RTT_TCP_ != 0\nextern \"C\" void MW_TCPFinalread(uint8_t tcpindex, uint8_t *data, uint32_t serverport, int32_t *outStatus)\n{\n    int libFcnOutput;\n    EthernetClient client = server[tcpindex].available();\n    if (int(client) == true) {\n        libFcnOutput = client.read();\n        *data = (uint8_t) libFcnOutput;\n        *outStatus = (libFcnOutput != -1);\n\n    }\n    else\n    {\n        //When the client is not connected the status flag is accordingly toggled.\n        *outStatus = 0;\n    }\n\n}\nextern \"C\" void MW_TCPFinalWrite(uint8_t tcpindex, uint8_t data, uint32_t serverport)\n{\n    server[tcpindex].write(data);\n}\n#endif\n\n\n#if defined(_ROTH_LEONARDO_)\nextern \"C\" void MW_usbattach()\n{\n    USBDevice.attach();\n}\n#elif defined(ARDUINO_VIRTUAL_COM_PORT)\nextern \"C\" void MW_usbattach()\n{\n    __libc_init_array();\n    USBDevice.init();\n    USBDevice.attach();\n\n}\n#endif\n\nextern \"C\" void MW_pinModeAnalogInput(uint32_t pinNumber)\n{\n    if (pinNumber < A0)\n        pinNumber += A0;\n    pinMode(pinNumber, INPUT);\n}\n\nextern \"C\" void MW_delay_in_milliseconds(uint32_T period)\n{\n    uint32_T start_time = 0;\n    start_time = millis();\n    while(millis()- start_time <= period)\n    {\n        1;\n    }\n}\n\nextern \"C\" void MW_delay_in_microseconds(uint32_T period)\n{\n    uint32_T start_time = 0;\n    start_time = micros();\n    while(micros()- start_time <= period)\n    {\n        1;\n    }\n}\n\nextern \"C\" uint32_T MW_getCurrentTime_in_milliseconds()\n{\n   return (uint32_T)millis();\n}\n\n\n// #if defined(ARDUINO_ARDUINO_NANO33BLE)\n// #include \"Arduino.h\"\n// #include \"pins_arduino.h\"\n// #include \"mbed/drivers/AnalogIn.h\"\n// #include \"mbed.h\"\n//\n// extern uint8_t nano33BLE_dutycycle[21];\n// extern uint16_t nano33BLE_period[21];\n//\n//\n// events::EventQueue queue(32 * EVENTS_EVENT_SIZE);\n// rtos::Thread t;\n// mbed::Ticker tick;\n//\n// static int write_resolution = 8;\n// static int read_resolution = 10;\n//\n// extern \"C\" void MW_NANO33BLE_analogWrite_1(pin_size_t pin, int val, uint16_t period)\n// {\n//   if (pin >= PINS_COUNT) {\n//     return;\n//   }\n//   float percent = (float)val/(float)((1 << write_resolution)-1);\n//   mbed::PwmOut* pwm = digitalPinToPwm(pin);\n//   if (pwm == NULL) {\n//     pwm = new mbed::PwmOut(digitalPinToPinName(pin));\n//     digitalPinToPwm(pin) = pwm;\n//     pwm->period_ms(period);\n//   }\n//   pwm->write(percent);\n// }\n//\n// extern \"C\" void MW_NANO33BLE_PWM_Handler()\n// {\n//     MW_NANO33BLE_analogWrite_1(5, nano33BLE_dutycycle[5], nano33BLE_period[5]);\n// }\n//\n// extern \"C\" void MW_NANO33BLE_PWM_Setup()\n// {\n//   t.start(callback(&queue, &events::EventQueue::dispatch_forever));\n//   tick.attach(queue.event(MW_NANO33BLE_PWM_Handler),_RTT_PWM_PIN5_CST );\n// }\n//\n//\n//\n//\n// extern \"C\" void MW_NANO33BLE_analogWrite(PinName pin, int val, uint16_t period)\n// {\n// //   pin_size_t idx = PinNameToIndex(pin);\n// //   if (idx != NOT_A_PIN) {\n// //     MW_NANO33BLE_analogWrite_1(idx, 50, period);\n// //   } else {\n// //     mbed::PwmOut* pwm = new mbed::PwmOut(pin);\n// //     pwm->period_ms(2);\n// //     float percent = (float)50/(float)((1 << write_resolution)-1);\n// //     pwm->write(percent);\n// //   }\n// }\n//\n// #endif"},{"name":"rtiostream_serial_daemon.cpp","type":"source","group":"legacy","path":"C:\\Users\\Jasminis\\OneDrive\\R7003E\\Viktor\\LAB_B\\LabB_TuneTheGyro_ert_rtw\\..\\..\\..\\..\\..\\..\\..\\ProgramData\\MATLAB\\SupportPackages\\R2023a\\toolbox\\target\\supportpackages\\arduinotarget\\src","tag":"","groupDisplay":"Other files","code":"/*\n * File: rtiostream_serial.cpp\n * Copyright 2011-2022 The MathWorks, Inc.\n */\n\n#include \"Arduino.h\"\n#include \"MW_target_hardware_resources.h\"\n#include \"io_wrappers.h\"\n\n#ifndef _rtiostream\n\nextern \"C\" {                 /* sbcheck:ok:extern_c */\n#include \"rtiostream.h\"\nvoid rtIOStreamResync(void);\n}\n#define _rtiostream\n#endif\n\nextern \"C\" void __cxa_pure_virtual(void);   /* sbcheck:ok:extern_c */\n\n#if defined(XCP_CALIBRATION_SUPPORT)\n    #define SYNC_BYTE 0x02\n#else\n    #define SYNC_BYTE 'e'\n#endif\n\nvolatile boolean receivedSyncByteE = false;\n\nvoid rtIOStreamResync(){\n    receivedSyncByteE = false;\n}\n\n/* Function: rtIOStreamOpen =================================================\n * Abstract:\n *  Open the connection with the target.\n */\nint rtIOStreamOpen(int argc, void * argv[])\n{\n    /* ASCII character a is 65 */\n    #define RTIOSTREAM_OPEN_COMPLETE 65\n    static const uint8_t init_complete = RTIOSTREAM_OPEN_COMPLETE;\n    \n    int result = RTIOSTREAM_NO_ERROR;\n    int flushedData;\n    \n//     #ifndef MW_PIL_ARUDINOSERIAL //commented due to Serial1 not working with external mode in MKR1000\n//     init();\n//     #endif\n\n    #if defined(MW_PIL_ARUDINOSERIAL)\n        #if defined(MW_RTIO_SERIAL0)\n            Serial_begin(0, MW_PIL_SERIAL_BAUDRATE, SERIAL_8N1);\n        #elif defined(MW_RTIO_SERIAL1)\n            Serial_begin(1, MW_PIL_SERIAL_BAUDRATE, SERIAL_8N1);\n        #elif defined(MW_RTIO_SERIAL2)\n            Serial_begin(2, MW_PIL_SERIAL_BAUDRATE, SERIAL_8N1);\n        #elif defined(MW_RTIO_SERIAL3)\n            Serial_begin(3, MW_PIL_SERIAL_BAUDRATE, SERIAL_8N1);\n        #else\n            Serial_begin(0, MW_PIL_SERIAL_BAUDRATE, SERIAL_8N1);\n        #endif\n\n        \n        /* At high baud rates (i.e. 115200), the Arduino is receiving an \n         * initial byte of spurious data (0xF0 / 240) when opening a connection\n         * even though the host has not transmitted this data! This is causing\n         * an issue for PIL to read wrong init bytes at the beginning and\n         * loosing sync with host. Adding delay of 1 sec to wait for host to\n         * open the connection and then flush the spurious data from receive\n         * buffer. A delay of 5Sec(rtiostream postopenpause) is given on the\n         * host between opening the connection and init bytes.\n        */ \n        delay(1000);\n    #else\n        #if defined(MW_RTIO_SERIAL0)\n            Serial_begin(0, MW_EXTMODE_COMPORTBAUD, SERIAL_8N1);\n        #elif defined(MW_RTIO_SERIAL1)\n            Serial_begin(1, MW_EXTMODE_COMPORTBAUD, SERIAL_8N1);\n        #elif defined(MW_RTIO_SERIAL2)\n            Serial_begin(2, MW_EXTMODE_COMPORTBAUD, SERIAL_8N1);\n        #elif defined(MW_RTIO_SERIAL3)\n            Serial_begin(3, MW_EXTMODE_COMPORTBAUD, SERIAL_8N1);\n        #else\n            Serial_begin(0, MW_EXTMODE_COMPORTBAUD, SERIAL_8N1);\n        #endif\n    #endif\n   \n    /* Flush out the serial receive buffer when opening a connection. This\n     * works around an issue we've noticed with Arduino at high baud rates.\n     * At high baud rates (i.e. 115200), the Arduino is receiving an \n     * initial byte of spurious data (0xF0 / 240) even though the host has\n     * not transmitted this data! This may cause an issue for PIL and \n     * External mode during the handshaking process.\n     */\n        #if defined(MW_RTIO_SERIAL0)\n            while (Serial.available()) {\n                flushedData = Serial.read();\n            }\n        #elif defined(MW_RTIO_SERIAL1)\n            while (Serial1.available()) {\n                flushedData = Serial1.read();\n            }\n        #elif defined(MW_RTIO_SERIAL2)\n            while (Serial2.available()) {\n                flushedData = Serial2.read();\n            }\n        #elif defined(MW_RTIO_SERIAL3)\n            while (Serial3.available()) {\n                flushedData = Serial3.read();\n            }\n        #else\n            while (Serial.available()) {\n                flushedData = Serial.read();\n            }\n        #endif\n   \n\n    return result;\n}\n\n/* Function: rtIOStreamSend =====================================================\n * Abstract:\n *  Sends the specified number of bytes on the serial line. Returns the number of\n *  bytes sent (if successful) or a negative value if an error occurred.\n */\nint rtIOStreamSend(\n    int          streamID,\n    const void * src,\n    size_t       size,\n    size_t     * sizeSent)\n{\n    #if defined(MW_RTIO_SERIAL0)\n        Serial.write( (const uint8_t *)src, (int16_t)size);\n    #elif defined(MW_RTIO_SERIAL1)\n        Serial1.write( (const uint8_t *)src, (int16_t)size);\n    #elif defined(MW_RTIO_SERIAL2)\n        Serial2.write( (const uint8_t *)src, (int16_t)size);\n    #elif defined(MW_RTIO_SERIAL3)\n        Serial3.write( (const uint8_t *)src, (int16_t)size);\n    #else\n        Serial.write( (const uint8_t *)src, (int16_t)size);\n    #endif\n    \n    \n    *sizeSent = size;\n     \n    return RTIOSTREAM_NO_ERROR;\n}\n\n/* Function: rtIOStreamRecv ================================================\n * Abstract: receive data\n *\n */\nint rtIOStreamRecv(\n    int      streamID,\n    void   * dst,\n    size_t   size,\n    size_t * sizeRecvd)\n{\n    int data;\n    uint8_t * ptr = (uint8_t *)dst;\n  \n    *sizeRecvd = 0U;\n    #if defined(MW_RTIO_SERIAL0)\n            if (!Serial.available()) {\n                return RTIOSTREAM_NO_ERROR;\n            }\n        \n            while( !receivedSyncByteE ){\n                data = Serial.read();\n                if(data == SYNC_BYTE){\n                    receivedSyncByteE = true;\n                    *ptr++ = (uint8_t)data;\n                    (*sizeRecvd)++;\n                }\n            }\n        \n            while ((*sizeRecvd < size)) {\n                data = Serial.read();\n                if (data!=-1) {\n                    *ptr++ = (uint8_t) data;\n                    (*sizeRecvd)++;\n                }\n            }\n    #elif defined(MW_RTIO_SERIAL1)\n            if (!Serial1.available()) {\n                return RTIOSTREAM_NO_ERROR;\n            }\n        \n            while( !receivedSyncByteE ){\n                data = Serial1.read();\n                if(data == SYNC_BYTE){\n                    receivedSyncByteE = true;\n                    *ptr++ = (uint8_t)data;\n                    (*sizeRecvd)++;\n                }\n            }\n        \n            while ((*sizeRecvd < size)) {\n                data = Serial1.read();\n                if (data!=-1) {\n                    *ptr++ = (uint8_t) data;\n                    (*sizeRecvd)++;\n                }\n            }\n    #elif defined(MW_RTIO_SERIAL2)\n            if (!Serial2.available()) {\n                return RTIOSTREAM_NO_ERROR;\n            }\n        \n            while( !receivedSyncByteE ){\n                data = Serial2.read();\n                if(data == SYNC_BYTE){\n                    receivedSyncByteE = true;\n                    *ptr++ = (uint8_t)data;\n                    (*sizeRecvd)++;\n                }\n            }\n        \n            while ((*sizeRecvd < size)) {\n                data = Serial2.read();\n                if (data!=-1) {\n                    *ptr++ = (uint8_t) data;\n                    (*sizeRecvd)++;\n                }\n            }\n    #elif defined(MW_RTIO_SERIAL3)\n            if (!Serial3.available()) {\n                return RTIOSTREAM_NO_ERROR;\n            }\n        \n            while( !receivedSyncByteE ){\n                data = Serial3.read();\n                if(data == SYNC_BYTE){\n                    receivedSyncByteE = true;\n                    *ptr++ = (uint8_t)data;\n                    (*sizeRecvd)++;\n                }\n            }\n        \n            while ((*sizeRecvd < size)) {\n                data = Serial3.read();\n                if (data!=-1) {\n                    *ptr++ = (uint8_t) data;\n                    (*sizeRecvd)++;\n                }\n            }\n    #else\n            if (!Serial.available()) {\n                return RTIOSTREAM_NO_ERROR;\n            }\n        \n            while( !receivedSyncByteE ){\n                data = Serial.read();\n                if(data == SYNC_BYTE){\n                    receivedSyncByteE = true;\n                    *ptr++ = (uint8_t)data;\n                    (*sizeRecvd)++;\n                }\n            }\n        \n            while ((*sizeRecvd < size)) {\n                data = Serial.read();\n                if (data!=-1) {\n                    *ptr++ = (uint8_t) data;\n                    (*sizeRecvd)++;\n                }\n            }\n    #endif\n\n   \n    \n    return RTIOSTREAM_NO_ERROR;\n}\n\n/* Function: rtIOStreamClose ================================================\n * Abstract: close the connection.\n * For External mode over serial, Arduino MKR and its variants require\n * a flush out the serial receive buffer. This is done to get the last \n * acknowledgment \n *\n */\nint rtIOStreamClose(int streamID)\n{\n#if (defined(ARDUINO_ARDUINO_NANO33BLE))\n    #if defined(MW_RTOS) && (MW_RTOS == 'Baremetal')\n        //Do not let the program terminate\n        while(1);\n    #endif\n#else\n    delay(1000);\n    #if defined(ARDUINO_VIRTUAL_COM_PORT)\n        int flushedData;\n        while (Serial.available()) {\n            flushedData = Serial.read();\n        }\n    #endif\n#endif\n    return RTIOSTREAM_NO_ERROR;\n}"},{"name":"twi.c","type":"source","group":"legacy","path":"C:\\Users\\Jasminis\\OneDrive\\R7003E\\Viktor\\LAB_B\\LabB_TuneTheGyro_ert_rtw\\..\\..\\..\\..\\..\\..\\..\\ProgramData\\MATLAB\\SupportPackages\\R2023a\\aIDE\\hardware\\arduino\\avr\\libraries\\Wire\\src\\utility","tag":"","groupDisplay":"Other files","code":"/*\n  twi.c - TWI/I2C library for Wiring & Arduino\n  Copyright (c) 2006 Nicholas Zambetti.  All right reserved.\n\n  This library is free software; you can redistribute it and/or\n  modify it under the terms of the GNU Lesser General Public\n  License as published by the Free Software Foundation; either\n  version 2.1 of the License, or (at your option) any later version.\n\n  This library is distributed in the hope that it will be useful,\n  but WITHOUT ANY WARRANTY; without even the implied warranty of\n  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n  Lesser General Public License for more details.\n\n  You should have received a copy of the GNU Lesser General Public\n  License along with this library; if not, write to the Free Software\n  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA\n\n  Modified 2012 by Todd Krein (todd@krein.org) to implement repeated starts\n  Modified 2020 by Greyson Christoforo (grey@christoforo.net) to implement timeouts\n*/\n\n#include <math.h>\n#include <stdlib.h>\n#include <inttypes.h>\n#include <avr/io.h>\n#include <avr/interrupt.h>\n#include <util/delay.h>\n#include <compat/twi.h>\n#include \"Arduino.h\" // for digitalWrite and micros\n\n#ifndef cbi\n#define cbi(sfr, bit) (_SFR_BYTE(sfr) &= ~_BV(bit))\n#endif\n\n#ifndef sbi\n#define sbi(sfr, bit) (_SFR_BYTE(sfr) |= _BV(bit))\n#endif\n\n#include \"pins_arduino.h\"\n#include \"twi.h\"\n\nstatic volatile uint8_t twi_state;\nstatic volatile uint8_t twi_slarw;\nstatic volatile uint8_t twi_sendStop;\t\t\t// should the transaction end with a stop\nstatic volatile uint8_t twi_inRepStart;\t\t\t// in the middle of a repeated start\n\n// twi_timeout_us > 0 prevents the code from getting stuck in various while loops here\n// if twi_timeout_us == 0 then timeout checking is disabled (the previous Wire lib behavior)\n// at some point in the future, the default twi_timeout_us value could become 25000\n// and twi_do_reset_on_timeout could become true\n// to conform to the SMBus standard\n// http://smbus.org/specs/SMBus_3_1_20180319.pdf\nstatic volatile uint32_t twi_timeout_us = 0ul;\nstatic volatile bool twi_timed_out_flag = false;  // a timeout has been seen\nstatic volatile bool twi_do_reset_on_timeout = false;  // reset the TWI registers on timeout\n\nstatic void (*twi_onSlaveTransmit)(void);\nstatic void (*twi_onSlaveReceive)(uint8_t*, int);\n\nstatic uint8_t twi_masterBuffer[TWI_BUFFER_LENGTH];\nstatic volatile uint8_t twi_masterBufferIndex;\nstatic volatile uint8_t twi_masterBufferLength;\n\nstatic uint8_t twi_txBuffer[TWI_BUFFER_LENGTH];\nstatic volatile uint8_t twi_txBufferIndex;\nstatic volatile uint8_t twi_txBufferLength;\n\nstatic uint8_t twi_rxBuffer[TWI_BUFFER_LENGTH];\nstatic volatile uint8_t twi_rxBufferIndex;\n\nstatic volatile uint8_t twi_error;\n\n/* \n * Function twi_init\n * Desc     readys twi pins and sets twi bitrate\n * Input    none\n * Output   none\n */\nvoid twi_init(void)\n{\n  // initialize state\n  twi_state = TWI_READY;\n  twi_sendStop = true;\t\t// default value\n  twi_inRepStart = false;\n  \n  // activate internal pullups for twi.\n  digitalWrite(SDA, 1);\n  digitalWrite(SCL, 1);\n\n  // initialize twi prescaler and bit rate\n  cbi(TWSR, TWPS0);\n  cbi(TWSR, TWPS1);\n  TWBR = ((F_CPU / TWI_FREQ) - 16) / 2;\n\n  /* twi bit rate formula from atmega128 manual pg 204\n  SCL Frequency = CPU Clock Frequency / (16 + (2 * TWBR))\n  note: TWBR should be 10 or higher for master mode\n  It is 72 for a 16mhz Wiring board with 100kHz TWI */\n\n  // enable twi module, acks, and twi interrupt\n  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA);\n}\n\n/* \n * Function twi_disable\n * Desc     disables twi pins\n * Input    none\n * Output   none\n */\nvoid twi_disable(void)\n{\n  // disable twi module, acks, and twi interrupt\n  TWCR &= ~(_BV(TWEN) | _BV(TWIE) | _BV(TWEA));\n\n  // deactivate internal pullups for twi.\n  digitalWrite(SDA, 0);\n  digitalWrite(SCL, 0);\n}\n\n/* \n * Function twi_slaveInit\n * Desc     sets slave address and enables interrupt\n * Input    none\n * Output   none\n */\nvoid twi_setAddress(uint8_t address)\n{\n  // set twi slave address (skip over TWGCE bit)\n  TWAR = address << 1;\n}\n\n/* \n * Function twi_setClock\n * Desc     sets twi bit rate\n * Input    Clock Frequency\n * Output   none\n */\nvoid twi_setFrequency(uint32_t frequency)\n{\n  TWBR = ((F_CPU / frequency) - 16) / 2;\n  \n  /* twi bit rate formula from atmega128 manual pg 204\n  SCL Frequency = CPU Clock Frequency / (16 + (2 * TWBR))\n  note: TWBR should be 10 or higher for master mode\n  It is 72 for a 16mhz Wiring board with 100kHz TWI */\n}\n\n/* \n * Function twi_readFrom\n * Desc     attempts to become twi bus master and read a\n *          series of bytes from a device on the bus\n * Input    address: 7bit i2c device address\n *          data: pointer to byte array\n *          length: number of bytes to read into array\n *          sendStop: Boolean indicating whether to send a stop at the end\n * Output   number of bytes read\n */\nuint8_t twi_readFrom(uint8_t address, uint8_t* data, uint8_t length, uint8_t sendStop)\n{\n  uint8_t i;\n\n  // ensure data will fit into buffer\n  if(TWI_BUFFER_LENGTH < length){\n    return 0;\n  }\n\n  // wait until twi is ready, become master receiver\n  uint32_t startMicros = micros();\n  while(TWI_READY != twi_state){\n    if((twi_timeout_us > 0ul) && ((micros() - startMicros) > twi_timeout_us)) {\n      twi_handleTimeout(twi_do_reset_on_timeout);\n      return 0;\n    }\n  }\n  twi_state = TWI_MRX;\n  twi_sendStop = sendStop;\n  // reset error state (0xFF.. no error occured)\n  twi_error = 0xFF;\n\n  // initialize buffer iteration vars\n  twi_masterBufferIndex = 0;\n  twi_masterBufferLength = length-1;  // This is not intuitive, read on...\n  // On receive, the previously configured ACK/NACK setting is transmitted in\n  // response to the received byte before the interrupt is signalled. \n  // Therefor we must actually set NACK when the _next_ to last byte is\n  // received, causing that NACK to be sent in response to receiving the last\n  // expected byte of data.\n\n  // build sla+w, slave device address + w bit\n  twi_slarw = TW_READ;\n  twi_slarw |= address << 1;\n\n  if (true == twi_inRepStart) {\n    // if we're in the repeated start state, then we've already sent the start,\n    // (@@@ we hope), and the TWI statemachine is just waiting for the address byte.\n    // We need to remove ourselves from the repeated start state before we enable interrupts,\n    // since the ISR is ASYNC, and we could get confused if we hit the ISR before cleaning\n    // up. Also, don't enable the START interrupt. There may be one pending from the \n    // repeated start that we sent ourselves, and that would really confuse things.\n    twi_inRepStart = false;\t\t\t// remember, we're dealing with an ASYNC ISR\n    startMicros = micros();\n    do {\n      TWDR = twi_slarw;\n      if((twi_timeout_us > 0ul) && ((micros() - startMicros) > twi_timeout_us)) {\n        twi_handleTimeout(twi_do_reset_on_timeout);\n        return 0;\n      }\n    } while(TWCR & _BV(TWWC));\n    TWCR = _BV(TWINT) | _BV(TWEA) | _BV(TWEN) | _BV(TWIE);\t// enable INTs, but not START\n  } else {\n    // send start condition\n    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTA);\n  }\n\n  // wait for read operation to complete\n  startMicros = micros();\n  while(TWI_MRX == twi_state){\n    if((twi_timeout_us > 0ul) && ((micros() - startMicros) > twi_timeout_us)) {\n      twi_handleTimeout(twi_do_reset_on_timeout);\n      return 0;\n    }\n  }\n\n  if (twi_masterBufferIndex < length) {\n    length = twi_masterBufferIndex;\n  }\n\n  // copy twi buffer to data\n  for(i = 0; i < length; ++i){\n    data[i] = twi_masterBuffer[i];\n  }\n\n  return length;\n}\n\n/* \n * Function twi_writeTo\n * Desc     attempts to become twi bus master and write a\n *          series of bytes to a device on the bus\n * Input    address: 7bit i2c device address\n *          data: pointer to byte array\n *          length: number of bytes in array\n *          wait: boolean indicating to wait for write or not\n *          sendStop: boolean indicating whether or not to send a stop at the end\n * Output   0 .. success\n *          1 .. length to long for buffer\n *          2 .. address send, NACK received\n *          3 .. data send, NACK received\n *          4 .. other twi error (lost bus arbitration, bus error, ..)\n *          5 .. timeout\n */\nuint8_t twi_writeTo(uint8_t address, uint8_t* data, uint8_t length, uint8_t wait, uint8_t sendStop)\n{\n  uint8_t i;\n\n  // ensure data will fit into buffer\n  if(TWI_BUFFER_LENGTH < length){\n    return 1;\n  }\n\n  // wait until twi is ready, become master transmitter\n  uint32_t startMicros = micros();\n  while(TWI_READY != twi_state){\n    if((twi_timeout_us > 0ul) && ((micros() - startMicros) > twi_timeout_us)) {\n      twi_handleTimeout(twi_do_reset_on_timeout);\n      return (5);\n    }\n  }\n  twi_state = TWI_MTX;\n  twi_sendStop = sendStop;\n  // reset error state (0xFF.. no error occured)\n  twi_error = 0xFF;\n\n  // initialize buffer iteration vars\n  twi_masterBufferIndex = 0;\n  twi_masterBufferLength = length;\n  \n  // copy data to twi buffer\n  for(i = 0; i < length; ++i){\n    twi_masterBuffer[i] = data[i];\n  }\n  \n  // build sla+w, slave device address + w bit\n  twi_slarw = TW_WRITE;\n  twi_slarw |= address << 1;\n  \n  // if we're in a repeated start, then we've already sent the START\n  // in the ISR. Don't do it again.\n  //\n  if (true == twi_inRepStart) {\n    // if we're in the repeated start state, then we've already sent the start,\n    // (@@@ we hope), and the TWI statemachine is just waiting for the address byte.\n    // We need to remove ourselves from the repeated start state before we enable interrupts,\n    // since the ISR is ASYNC, and we could get confused if we hit the ISR before cleaning\n    // up. Also, don't enable the START interrupt. There may be one pending from the \n    // repeated start that we sent outselves, and that would really confuse things.\n    twi_inRepStart = false;\t\t\t// remember, we're dealing with an ASYNC ISR\n    startMicros = micros();\n    do {\n      TWDR = twi_slarw;\n      if((twi_timeout_us > 0ul) && ((micros() - startMicros) > twi_timeout_us)) {\n        twi_handleTimeout(twi_do_reset_on_timeout);\n        return (5);\n      }\n    } while(TWCR & _BV(TWWC));\n    TWCR = _BV(TWINT) | _BV(TWEA) | _BV(TWEN) | _BV(TWIE);\t// enable INTs, but not START\n  } else {\n    // send start condition\n    TWCR = _BV(TWINT) | _BV(TWEA) | _BV(TWEN) | _BV(TWIE) | _BV(TWSTA);\t// enable INTs\n  }\n\n  // wait for write operation to complete\n  startMicros = micros();\n  while(wait && (TWI_MTX == twi_state)){\n    if((twi_timeout_us > 0ul) && ((micros() - startMicros) > twi_timeout_us)) {\n      twi_handleTimeout(twi_do_reset_on_timeout);\n      return (5);\n    }\n  }\n  \n  if (twi_error == 0xFF)\n    return 0;\t// success\n  else if (twi_error == TW_MT_SLA_NACK)\n    return 2;\t// error: address send, nack received\n  else if (twi_error == TW_MT_DATA_NACK)\n    return 3;\t// error: data send, nack received\n  else\n    return 4;\t// other twi error\n}\n\n/* \n * Function twi_transmit\n * Desc     fills slave tx buffer with data\n *          must be called in slave tx event callback\n * Input    data: pointer to byte array\n *          length: number of bytes in array\n * Output   1 length too long for buffer\n *          2 not slave transmitter\n *          0 ok\n */\nuint8_t twi_transmit(const uint8_t* data, uint8_t length)\n{\n  uint8_t i;\n\n  // ensure data will fit into buffer\n  if(TWI_BUFFER_LENGTH < (twi_txBufferLength+length)){\n    return 1;\n  }\n  \n  // ensure we are currently a slave transmitter\n  if(TWI_STX != twi_state){\n    return 2;\n  }\n  \n  // set length and copy data into tx buffer\n  for(i = 0; i < length; ++i){\n    twi_txBuffer[twi_txBufferLength+i] = data[i];\n  }\n  twi_txBufferLength += length;\n  \n  return 0;\n}\n\n/* \n * Function twi_attachSlaveRxEvent\n * Desc     sets function called before a slave read operation\n * Input    function: callback function to use\n * Output   none\n */\nvoid twi_attachSlaveRxEvent( void (*function)(uint8_t*, int) )\n{\n  twi_onSlaveReceive = function;\n}\n\n/* \n * Function twi_attachSlaveTxEvent\n * Desc     sets function called before a slave write operation\n * Input    function: callback function to use\n * Output   none\n */\nvoid twi_attachSlaveTxEvent( void (*function)(void) )\n{\n  twi_onSlaveTransmit = function;\n}\n\n/* \n * Function twi_reply\n * Desc     sends byte or readys receive line\n * Input    ack: byte indicating to ack or to nack\n * Output   none\n */\nvoid twi_reply(uint8_t ack)\n{\n  // transmit master read ready signal, with or without ack\n  if(ack){\n    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);\n  }else{\n    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);\n  }\n}\n\n/* \n * Function twi_stop\n * Desc     relinquishes bus master status\n * Input    none\n * Output   none\n */\nvoid twi_stop(void)\n{\n  // send stop condition\n  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);\n\n  // wait for stop condition to be exectued on bus\n  // TWINT is not set after a stop condition!\n  // We cannot use micros() from an ISR, so approximate the timeout with cycle-counted delays\n  const uint8_t us_per_loop = 8;\n  uint32_t counter = (twi_timeout_us + us_per_loop - 1)/us_per_loop; // Round up\n  while(TWCR & _BV(TWSTO)){\n    if(twi_timeout_us > 0ul){\n      if (counter > 0ul){\n        _delay_us(10);\n        counter--;\n      } else {\n        twi_handleTimeout(twi_do_reset_on_timeout);\n        return;\n      }\n    }\n  }\n\n  // update twi state\n  twi_state = TWI_READY;\n}\n\n/* \n * Function twi_releaseBus\n * Desc     releases bus control\n * Input    none\n * Output   none\n */\nvoid twi_releaseBus(void)\n{\n  // release bus\n  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT);\n\n  // update twi state\n  twi_state = TWI_READY;\n}\n\n/* \n * Function twi_setTimeoutInMicros\n * Desc     set a timeout for while loops that twi might get stuck in\n * Input    timeout value in microseconds (0 means never time out)\n * Input    reset_with_timeout: true causes timeout events to reset twi\n * Output   none\n */\nvoid twi_setTimeoutInMicros(uint32_t timeout, bool reset_with_timeout){\n  twi_timed_out_flag = false;\n  twi_timeout_us = timeout;\n  twi_do_reset_on_timeout = reset_with_timeout;\n}\n\n/* \n * Function twi_handleTimeout\n * Desc     this gets called whenever a while loop here has lasted longer than\n *          twi_timeout_us microseconds. always sets twi_timed_out_flag\n * Input    reset: true causes this function to reset the twi hardware interface\n * Output   none\n */\nvoid twi_handleTimeout(bool reset){\n  twi_timed_out_flag = true;\n\n  if (reset) {\n    // remember bitrate and address settings\n    uint8_t previous_TWBR = TWBR;\n    uint8_t previous_TWAR = TWAR;\n\n    // reset the interface\n    twi_disable();\n    twi_init();\n\n    // reapply the previous register values\n    TWAR = previous_TWAR;\n    TWBR = previous_TWBR;\n  }\n}\n\n/*\n * Function twi_manageTimeoutFlag\n * Desc     returns true if twi has seen a timeout\n *          optionally clears the timeout flag\n * Input    clear_flag: true if we should reset the hardware\n * Output   none\n */\nbool twi_manageTimeoutFlag(bool clear_flag){\n  bool flag = twi_timed_out_flag;\n  if (clear_flag){\n    twi_timed_out_flag = false;\n  }\n  return(flag);\n}\n\nISR(TWI_vect)\n{\n  switch(TW_STATUS){\n    // All Master\n    case TW_START:     // sent start condition\n    case TW_REP_START: // sent repeated start condition\n      // copy device address and r/w bit to output register and ack\n      TWDR = twi_slarw;\n      twi_reply(1);\n      break;\n\n    // Master Transmitter\n    case TW_MT_SLA_ACK:  // slave receiver acked address\n    case TW_MT_DATA_ACK: // slave receiver acked data\n      // if there is data to send, send it, otherwise stop \n      if(twi_masterBufferIndex < twi_masterBufferLength){\n        // copy data to output register and ack\n        TWDR = twi_masterBuffer[twi_masterBufferIndex++];\n        twi_reply(1);\n      }else{\n        if (twi_sendStop){\n          twi_stop();\n       } else {\n         twi_inRepStart = true;\t// we're gonna send the START\n         // don't enable the interrupt. We'll generate the start, but we\n         // avoid handling the interrupt until we're in the next transaction,\n         // at the point where we would normally issue the start.\n         TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;\n         twi_state = TWI_READY;\n        }\n      }\n      break;\n    case TW_MT_SLA_NACK:  // address sent, nack received\n      twi_error = TW_MT_SLA_NACK;\n      twi_stop();\n      break;\n    case TW_MT_DATA_NACK: // data sent, nack received\n      twi_error = TW_MT_DATA_NACK;\n      twi_stop();\n      break;\n    case TW_MT_ARB_LOST: // lost bus arbitration\n      twi_error = TW_MT_ARB_LOST;\n      twi_releaseBus();\n      break;\n\n    // Master Receiver\n    case TW_MR_DATA_ACK: // data received, ack sent\n      // put byte into buffer\n      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;\n      __attribute__ ((fallthrough));\n    case TW_MR_SLA_ACK:  // address sent, ack received\n      // ack if more bytes are expected, otherwise nack\n      if(twi_masterBufferIndex < twi_masterBufferLength){\n        twi_reply(1);\n      }else{\n        twi_reply(0);\n      }\n      break;\n    case TW_MR_DATA_NACK: // data received, nack sent\n      // put final byte into buffer\n      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;\n      if (twi_sendStop){\n        twi_stop();\n      } else {\n        twi_inRepStart = true;\t// we're gonna send the START\n        // don't enable the interrupt. We'll generate the start, but we\n        // avoid handling the interrupt until we're in the next transaction,\n        // at the point where we would normally issue the start.\n        TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;\n        twi_state = TWI_READY;\n      }\n      break;\n    case TW_MR_SLA_NACK: // address sent, nack received\n      twi_stop();\n      break;\n    // TW_MR_ARB_LOST handled by TW_MT_ARB_LOST case\n\n    // Slave Receiver\n    case TW_SR_SLA_ACK:   // addressed, returned ack\n    case TW_SR_GCALL_ACK: // addressed generally, returned ack\n    case TW_SR_ARB_LOST_SLA_ACK:   // lost arbitration, returned ack\n    case TW_SR_ARB_LOST_GCALL_ACK: // lost arbitration, returned ack\n      // enter slave receiver mode\n      twi_state = TWI_SRX;\n      // indicate that rx buffer can be overwritten and ack\n      twi_rxBufferIndex = 0;\n      twi_reply(1);\n      break;\n    case TW_SR_DATA_ACK:       // data received, returned ack\n    case TW_SR_GCALL_DATA_ACK: // data received generally, returned ack\n      // if there is still room in the rx buffer\n      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){\n        // put byte in buffer and ack\n        twi_rxBuffer[twi_rxBufferIndex++] = TWDR;\n        twi_reply(1);\n      }else{\n        // otherwise nack\n        twi_reply(0);\n      }\n      break;\n    case TW_SR_STOP: // stop or repeated start condition received\n      // ack future responses and leave slave receiver state\n      twi_releaseBus();\n      // put a null char after data if there's room\n      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){\n        twi_rxBuffer[twi_rxBufferIndex] = '\\0';\n      }\n      // callback to user defined callback\n      twi_onSlaveReceive(twi_rxBuffer, twi_rxBufferIndex);\n      // since we submit rx buffer to \"wire\" library, we can reset it\n      twi_rxBufferIndex = 0;\n      break;\n    case TW_SR_DATA_NACK:       // data received, returned nack\n    case TW_SR_GCALL_DATA_NACK: // data received generally, returned nack\n      // nack back at master\n      twi_reply(0);\n      break;\n    \n    // Slave Transmitter\n    case TW_ST_SLA_ACK:          // addressed, returned ack\n    case TW_ST_ARB_LOST_SLA_ACK: // arbitration lost, returned ack\n      // enter slave transmitter mode\n      twi_state = TWI_STX;\n      // ready the tx buffer index for iteration\n      twi_txBufferIndex = 0;\n      // set tx buffer length to be zero, to verify if user changes it\n      twi_txBufferLength = 0;\n      // request for txBuffer to be filled and length to be set\n      // note: user must call twi_transmit(bytes, length) to do this\n      twi_onSlaveTransmit();\n      // if they didn't change buffer & length, initialize it\n      if(0 == twi_txBufferLength){\n        twi_txBufferLength = 1;\n        twi_txBuffer[0] = 0x00;\n      }\n      __attribute__ ((fallthrough));\t\t  \n      // transmit first byte from buffer, fall\n    case TW_ST_DATA_ACK: // byte sent, ack returned\n      // copy data to output register\n      TWDR = twi_txBuffer[twi_txBufferIndex++];\n      // if there is more to send, ack, otherwise nack\n      if(twi_txBufferIndex < twi_txBufferLength){\n        twi_reply(1);\n      }else{\n        twi_reply(0);\n      }\n      break;\n    case TW_ST_DATA_NACK: // received nack, we are done \n    case TW_ST_LAST_DATA: // received ack, but we are done already!\n      // ack future responses\n      twi_reply(1);\n      // leave slave receiver state\n      twi_state = TWI_READY;\n      break;\n\n    // All\n    case TW_NO_INFO:   // no state information\n      break;\n    case TW_BUS_ERROR: // bus error, illegal stop/start\n      twi_error = TW_BUS_ERROR;\n      twi_stop();\n      break;\n  }\n}\n"},{"name":"xcp.c","type":"source","group":"legacy","path":"C:\\Program Files\\MATLAB\\R2023a\\toolbox\\coder\\xcp\\src\\target\\slave\\protocol\\src","tag":"","groupDisplay":"Other files","code":"/*\n* Copyright 2016-2021 The MathWorks, Inc.\n*\n* File: xcp.c\n*\n* Abstract:\n*  Implementation of XCP Protocol Layer\n*/\n\n#include \"xcp_common.h\"\n#include \"xcp.h\"\n#include \"xcp_internal.h\"\n#include \"xcp_transport_internal.h\"\n#include \"xcp_cfg.h\"\n#include \"xcp_types.h\"\n#include \"xcp_standard.h\"\n#include \"xcp_daq.h\"\n#include \"xcp_calibration.h\"\n#include \"xcp_mem.h\"\n\n\n/*****************************************************************************\n    Internal Global variables\n******************************************************************************/\n/* Initialization status */\nstatic boolean_T initialized = false;\n\n/** Current Status of the XCP Slave according to the Protocol Layer */\nstatic XcpStatus xcpStatus = XCP_DISCONNECTED;\n\n/** Current Session Status of the XCP Slave according to the Protocol Layer\n(see XCP Session Status bit masks) */\nstatic uint8_T xcpSessionStatus = 0;\n\n/** XCP Slave Resource Protection Status (see XCP Resource bit masks) */\nstatic uint8_T xcpResourceProtectionStatus = 0;\n\n/** XCP Session configuration Id\n@note xcpSessionConfigurationId has to be set with an XCP SET_REQUEST\n      before a STORE_DAQ_REQ set. This allows the master device to verify that\n      automatically started DAQ lists contain the expected data transfer\n      configuration.\n      However the (optional) SET_REQUEST command is not supported at the\n      moment, so this value is hard-coded to 0 and never changed. */\nstatic uint16_T xcpSessionConfigurationId = 0;\n\n/** This table contains the list of XcpPacketLookupFunction to be used\n    (for each packets group) to get access to the corresponding\n    Packet Input and Output handlers */\nstatic XcpPacketLookupFunction groupPacketLookup[XCP_PACKETS_GROUP_NUMBER];\n\n/*****************************************************************************\n    Internal Functions\n******************************************************************************/\n/** Free the msgBuffer and allocate a new buffer to host a XCP packet of newPacketSize */\nstatic XcpErrorCode msgBufferRealloc(void **msgBuffer, size_t *msgBufferSize, size_t *packetOffset, size_t newPacketSize)\n{\n    XcpErrorCode errorCode = XCP_SUCCESS;\n    xcpPoolId_T reservedPoolId = xcpTransportCtoReservedMemPoolId();\n\n    /* Free the original buffer */\n    xcpMemFree(*msgBuffer);\n\n    /* Allocate a new buffer with the proper size */\n    *msgBufferSize = xcpTransportMsgBufferSize(newPacketSize, XCP_CTO);\n    *packetOffset = xcpTransportPacketOffset();\n\n    if (*msgBufferSize > 0) {\n        /* Using a reserved memory pool, to guarantee that the reply\n           gets always delivered to the XCP Master */\n        *msgBuffer = xcpMemAllocFromPool(reservedPoolId, *msgBufferSize);\n        if (*msgBuffer == NULL) {\n            errorCode = XCP_NO_MEMORY;\n        }\n    }\n    else {\n        errorCode = XCP_INV_SIZE;\n    }\n\n    return errorCode;\n}\n\n/** Input Packet Handler to be used for packets that need to be discarded */\nstatic XcpProtoErrorCode discardInputPacketHandler(void   *msgBuffer,\n                                                   size_t  xcpPacketOffset,\n                                                   size_t *outputPacketSize)\n{\n    XCP_UNUSED_PARAM(xcpPacketOffset);\n\n    XCP_PRINTF(\"Detected attempt to send packet ID %xH when the XCP connection has not been established\\n\", \n               *((uint8_T *) msgBuffer + xcpPacketOffset));\n\n    if (msgBuffer != NULL) {\n        xcpMemFree(msgBuffer);\n    }\n\n    *outputPacketSize = 0;\n\n    return XCP_PROTO_SUCCESS;\n}\n\n/** Input Packet Handler to be used for unknown commands */\nstatic XcpProtoErrorCode unknownInputPacketHandler(void   *msgBuffer,\n                                                   size_t  xcpPacketOffset,\n                                                   size_t *outputPacketSize)\n{\n    XCP_UNUSED_PARAM(msgBuffer);\n    XCP_UNUSED_PARAM(xcpPacketOffset);\n\n    XCP_PRINTF(\"Packet ID  %xH is not supported at the moment\\n\",\n    *((uint8_T *) msgBuffer + xcpPacketOffset));\n\n    *outputPacketSize = XCP_ERROR_PACKET_SIZE_IN_BYTES;\n\n    return XCP_PROTO_CMD_UNKNOWN;\n}\n\n/** The function returns the Group Id corresponding to a given Packet ID */\nstatic XcpPacketsGroupIdType xcpGetPacketGroupID(uint8_T pid, uint8_T level1Code)\n{\n    XcpPacketsGroupIdType groupId = XCP_UNKNOWN_PACKET_GROUP_ID;\n\n    if ((pid >= XCP_STANDARD_PACKETS_ID_MIN) /* && (pid <= XCP_STANDARD_PACKETS_ID_MAX) */) {\n        groupId = XCP_STANDARD_PACKETS_ID;\n    }\n    else if ((pid >= XCP_CALIBRATION_PACKETS_ID_MIN) && (pid <= XCP_CALIBRATION_PACKETS_ID_MAX)) {\n        groupId = XCP_CALIBRATION_PACKETS_ID;\n    }\n    else if (((pid >= XCP_DAQ_PACKETS_ID_MIN) && (pid <= XCP_DAQ_PACKETS_ID_MAX)) ||\n             ((pid == XCP_PID_LEVEL1_COMMAND) && \n             (level1Code >= XCP_DAQ_LEVEL1_CODE_MIN) && (level1Code <= XCP_DAQ_LEVEL1_CODE_MAX))) {\n        groupId = XCP_DAQ_PACKETS_ID;\n    }\n    else if ((pid >= XCP_PROGRAM_PACKETS_ID_MIN) && (pid <= XCP_PROGRAM_PACKETS_ID_MAX)) {\n        groupId = XCP_PROGRAM_PACKETS_ID;\n    }\n\n    return groupId;\n}\n\n/** Identify the internal packet handler functions responsible for processing a specific XCP packet.\n    @note If the status is XCP_DISCONNECTED, no packets are accepted except XCP_PID_CONNECT\n          If the command is not supported, the XCP slave has to reply with a ERR response packet\n          and ERR_CMD_UNKNOWN error code */\nstatic void xcpGetPacketHandlers(const uint8_T *packet,\n                                 size_t packetSize,\n                                 XcpInputPacketHandler  *inputHandler,\n                                 XcpOutputPacketHandler *outputHandler)\n{\n    /* uint8_T gets promoted to a higher data-type. On C2000, it is \n     * unsigned int. Since data is packed, a non-zero MSB in packet[0]\n     * can then make PID an invalid identifier. Explicitly mask to\n     * remove the upper byte if any.\n     */\n     const XcpLevel1CommandPacketFrame* command = (const XcpLevel1CommandPacketFrame*) packet;\n\n    uint8_T PID = command->PID; /* Retrieve Packet ID */\n    uint8_T level1CommandCode = 0;\n    if ((PID == XCP_PID_LEVEL1_COMMAND) && (packetSize > 1)) {\n        level1CommandCode = command->level1Code;\n    }\n\n    if (xcpStatus != XCP_DISCONNECTED) {\n        /* Check if the received XCP packet is supported and\n           retrieve the corresponding handler */\n        XcpPacketsGroupIdType groupId = xcpGetPacketGroupID(PID, level1CommandCode);\n        boolean_T found = false;\n\n        if (groupId != XCP_UNKNOWN_PACKET_GROUP_ID) {\n            XcpPacketLookupFunction getPacket = groupPacketLookup[groupId];\n            const XcpPacketHandlers *packetInfo = NULL;\n\n            if (getPacket != NULL) {\n                packetInfo = getPacket(PID);\n                found = (packetInfo != NULL);\n                if (found) {\n                    *inputHandler = packetInfo->inputHandler;\n                    *outputHandler = packetInfo->outputHandler;\n                }\n            }\n        }\n\n        if (!found) {\n            /* Packet is not supported*/\n            *inputHandler = unknownInputPacketHandler;\n            *outputHandler = genericOutputPacketHandler;\n        }\n    }\n    else {\n        /* If the XCP Slave is in the XCP_DISCONNECTED status,\n        * no other XCP packets are accepted except XCP_PID_CONNECT */\n        if (PID == XCP_PID_CONNECT) {\n            XcpPacketLookupFunction getPacket = groupPacketLookup[XCP_STANDARD_PACKETS_ID];\n\n            *inputHandler = NULL;\n            *outputHandler = NULL;\n\n            if (getPacket != NULL) {\n                const XcpPacketHandlers *connect = getPacket(XCP_PID_CONNECT);\n                if (connect != NULL) {\n                    /* Note: if the Protocol layer is correctly configured,\n                       the CONNECT command should be always implemented */\n                    *inputHandler = connect->inputHandler;\n                    *outputHandler = connect->outputHandler;\n                }\n            }\n        }\n        else {\n            /* Input packet must be ignored and discarded */\n            *inputHandler = discardInputPacketHandler;\n            *outputHandler = NULL;\n        }\n    }\n}\n\n/*****************************************************************************\n    Public Functions (shared across different XCP commands)\n******************************************************************************/\nXcpStatus xcpStatusGet(void)\n{\n    return xcpStatus;\n}\n\nvoid xcpStatusSet(XcpStatus status)\n{\n    xcpStatus = status;\n}\n\nuint8_T xcpSessionStatusGet(void)\n{\n    return xcpSessionStatus;\n}\n\nvoid xcpSessionStatusSet(uint8_T status)\n{\n    xcpSessionStatus = status;\n}\n\nvoid xcpSessionStatusSetMask(uint8_T mask)\n{\n    XCP_SET_MASK(xcpSessionStatus, mask);\n}\n\nvoid xcpSessionStatusClearMask(uint8_T mask)\n{\n    XCP_CLEAR_MASK(xcpSessionStatus, mask);\n}\n\nuint8_T xcpResourceProtectionStatusGet(void)\n{\n    return xcpResourceProtectionStatus;\n}\n\nvoid xcpResourceProtectionStatusSet(uint8_T status)\n{\n    xcpResourceProtectionStatus = status;\n}\n\nvoid xcpResourceProtectionSetMask(uint8_T mask)\n{\n    XCP_SET_MASK(xcpResourceProtectionStatus, mask);\n}\n\nvoid xcpResourceProtectionClearMask(uint8_T mask)\n{\n    XCP_CLEAR_MASK(xcpResourceProtectionStatus, mask);\n}\n\nuint16_T xcpSessionConfigurationIdGet(void)\n{\n    return xcpSessionConfigurationId;\n}\n\nvoid xcpSessionConfigurationIdSet(uint16_T id)\n{\n    xcpSessionConfigurationId = id;\n}\n\nvoid genericOutputPacketHandler(XcpProtoErrorCode inputCode, void *packet, size_t packetSize)\n{\n    XCP_UNUSED_PARAM(packetSize);\n\n    if (inputCode == XCP_PROTO_SUCCESS) {\n        /* Send back a generic RES packet */\n        XcpGenericResPacketFrame *frame = (XcpGenericResPacketFrame *)packet;\n        frame->PID = XCP_PID_RES;\n    }\n    else {\n        XcpErrorPacketFrame *frame = (XcpErrorPacketFrame *)packet;\n        frame->PID = XCP_PID_ERR;\n\n        switch (inputCode) {\n        case XCP_PROTO_MEMORY_OVERFLOW:\n            frame->errorCode = XCP_ERR_MEMORY_OVERFLOW;\n            break;\n        case XCP_PROTO_SEQUENCE_ERROR:\n            frame->errorCode = XCP_ERR_SEQUENCE;\n            break;\n        case XCP_PROTO_OUT_OF_RANGE:\n            frame->errorCode = XCP_ERR_OUT_OF_RANGE;\n            break;\n        case XCP_PROTO_CMD_UNKNOWN:\n            frame->errorCode = XCP_ERR_CMD_UNKNOWN;\n            break;\n        case XCP_PROTO_SYNCH:\n            frame->errorCode = XCP_ERR_CMD_SYNC;\n            break;\n        case XCP_PROTO_WRITE_PROTECTED:\n            frame->errorCode = XCP_ERR_WRITE_PROTECTED;\n            break;\n        case XCP_PROTO_CMD_SYNTAX:\n            frame->errorCode = XCP_ERR_CMD_SYNTAX;\n            break;\n        case XCP_PROTO_DAQ_ACTIVE:\n            frame->errorCode = XCP_ERR_DAQ_ACTIVE;\n            break;\n        case XCP_PROTO_MODE_NOT_VALID:\n            frame->errorCode = XCP_ERR_MODE_NOT_VALID;\n            break;\n        case XCP_PROTO_DAQ_CONFIG_ERROR:\n            frame->errorCode = XCP_ERR_DAQ_CONFIG;\n            break;\n        case XCP_PROTO_BUSY:\n            frame->errorCode = XCP_ERR_CMD_BUSY;\n            break;\n        case XCP_PROTO_ACCESS_DENIED:\n            frame->errorCode = XCP_ERR_ACCESS_DENIED;\n            break;\n        case XCP_PROTO_SEGMENT_UNKNOWN:\n            frame->errorCode = XCP_ERR_SEGMENT_NOT_VALID;\n            break;\n        case XCP_PROTO_PAGE_UNKNOWN:\n            frame->errorCode = XCP_ERR_PAGE_NOT_VALID;\n            break;\n        case XCP_PROTO_GENERIC_ERROR:\n            frame->errorCode = XCP_ERR_GENERIC;\n            break;\n        default:\n            /* This should never happen */\n            XCP_PRINTF(\"genericOutputPacketHandler error: %xH input code is not supported\", inputCode);\n            frame->errorCode = XCP_ERR_CMD_UNKNOWN;\n        }\n    }\n}\n\n\nconst XcpPacketHandlers* xcpFindPacket(XcpRxPidCode pid, const XcpPacketHandlers* packets, size_t packetsNumber)\n{\n    const XcpPacketHandlers* packet = NULL;\n\n    if (packets != NULL) {\n        size_t i = 0;\n        for (i = 0; (i < packetsNumber) && (packet == NULL); i++) {\n            if (pid == packets[i].PID) {\n                packet = &packets[i];\n            }\n        }\n    }\n\n    return packet;\n}\n\n/*****************************************************************************\n    Public Functions (implementing the Protocol Layer interface)\n******************************************************************************/\nXcpErrorCode xcpInit(\n    int   argc,   /**< [in] number of init parameters              */\n    void *argv[]  /**< [in] array of parameters values (C strings) */\n    )\n{\n    XCP_UNUSED_PARAM(argc);\n    XCP_UNUSED_PARAM(argv);\n\n    XCP_ERROR_IF(initialized, XCP_ERROR, \"xcpInit: protocol layer already initialized\\n\");\n\n    /* Initialize Standard Commands support */\n    xcpStandardInit();\n    groupPacketLookup[XCP_STANDARD_PACKETS_ID] = xcpStandardGetPacketLookup();\n\n    /* Initialize DAQ lists (and STIM) support */\n    xcpDaqInit();\n    groupPacketLookup[XCP_DAQ_PACKETS_ID] = xcpDaqGetPacketLookup();\n\n    /* Initialize Calibration support */\n    xcpCalibrationInit();\n    groupPacketLookup[XCP_CALIBRATION_PACKETS_ID] = xcpCalibrationGetPacketLookup();\n\n    initialized = true;\n\n    return XCP_SUCCESS;\n}\n\nXcpErrorCode xcpRun(void)\n{\n    XcpErrorCode errorCode = XCP_SUCCESS;\n    XcpProtoErrorCode protoErrorCode = XCP_PROTO_SUCCESS;\n    uint8_T *msgBuffer = NULL;\n    size_t   msgBufferSize = 0;\n    size_t   packetOffset = 0;\n    size_t   packetSize = 0;\n    size_t   outputPacketSize = 0;\n    uint8_T *packet = NULL;\n    XcpInputPacketHandler  inputHandler  = NULL;\n    XcpOutputPacketHandler outputHandler = NULL;\n\n    XCP_ERROR_IF(!initialized, XCP_NOT_INITIALIZED, \"xcpRun: protocol layer not initialized\\n\");\n\n    /* Extract a packet from the transport layer */\n    errorCode = xcpTransportRxPacketGet(XCP_TRANSPORT_RX_DEFAULT_QUEUE,\n                                       (void**)&msgBuffer, &msgBufferSize,\n                                       &packetOffset, &packetSize);\n    if ((errorCode != XCP_SUCCESS) &&\n        (errorCode != XCP_PKT_OUT_OF_SEQUENCE) && /* If a wrong packet counter is detected,       */\n        (errorCode != XCP_PKT_LOST)) {            /* the packet content is still considered valid */\n        goto error;\n    }\n\n    /* Check buffer sizes and retrieve the pointer to the XCP packet area */\n    if ((msgBuffer == NULL) || ((packetOffset + XCP_IN_HW_AG(packetSize)) > msgBufferSize)) { \n        errorCode = XCP_INV_SIZE;\n        goto error;\n    }\n\n    /* Identify the handler suitable for processing the given XCP packet */\n    packet = msgBuffer + packetOffset;\n    xcpGetPacketHandlers(packet, packetSize, &inputHandler, &outputHandler);\n\n    /* An input handler needs to be always present */\n    if (inputHandler == NULL) {\n        XCP_PRINTF(\"xcpRun: missing input handler for packet ID %xH\", packet[0]);\n        errorCode = XCP_ERROR;\n        goto error;\n    }\n\n    /* Process input packet */\n    protoErrorCode = inputHandler(msgBuffer, packetOffset, &outputPacketSize);\n\n    if ((outputHandler != NULL) && (outputPacketSize > 0)) {\n        errorCode = XCP_SUCCESS;\n\n        /* An Output Packet needs to be generated -> check if current message buffer is big enough for the response packet */\n        if (packetSize < outputPacketSize) {\n            errorCode = msgBufferRealloc((void **)&msgBuffer, &msgBufferSize, &packetOffset, outputPacketSize);\n        }\n\n        XCP_MEMSET(packet, 0, XCP_IN_HW_AG(packetSize));\n\n        if (errorCode == XCP_SUCCESS) {\n            /* Fill the response packet */\n            packet = msgBuffer + packetOffset;\n            outputHandler(protoErrorCode, packet, outputPacketSize);\n\n            /* Send the response back to the Transport Layer\n               @note to guarantee the maximum responsiveness even when the TX traffic\n                     is maxed out, the highest priority queue is used */\n            errorCode = xcpTransportTxPacketSet(XCP_TRANSPORT_TX_HIGHEST_PRIO_QUEUE,\n                                                XCP_TRANSPORT_NOT_A_DAQ,\n                                                msgBuffer, msgBufferSize,\n                                                packetOffset, outputPacketSize);\n            if (errorCode != XCP_SUCCESS) {\n                goto error;\n            }\n        }\n    }\n\n    return errorCode;\n\nerror:\n    if (msgBuffer != NULL) {\n        xcpMemFree(msgBuffer);\n    }\n\n    return errorCode;\n}\n\nXcpErrorCode xcpEvent(XcpEventIdType eventId)\n{\n    XcpErrorCode errorCode = XCP_SUCCESS;\n    uint32_T timestamp = 0;\n\n    XCP_ERROR_IF(!initialized, XCP_NOT_INITIALIZED, \"xcpEvent: protocol layer not initialized\\n\");\n\n    timestamp = (uint32_T)XCP_TIMESTAMP_GET();\n    \n    /* Process DAQ Lists associated to the event */\n    errorCode = xcpDaqEvent(eventId, timestamp, false);\n\n    return errorCode;\n}\n\nXcpErrorCode xcpEventExternalTimestamp(XcpEventIdType eventId, uint32_T timestamp)\n{\n    XcpErrorCode errorCode = XCP_SUCCESS;\n\n    XCP_ERROR_IF(!initialized, XCP_NOT_INITIALIZED, \"xcpEvent: protocol layer not initialized\\n\");\n\n    /* Process DAQ Lists associated to the event */\n    errorCode = xcpDaqEvent(eventId, timestamp, false);\n\n    return errorCode;\n}\n\nXcpErrorCode xcpEventNotificationReq(XcpEventCode eventCode, const void *eventData, size_t eventDataSize)\n{\n    XcpErrorCode errorCode = XCP_SUCCESS;\n    size_t packetOffset = xcpTransportPacketOffset();\n    size_t maxEventDataSize = xcpTransportMaxCtoSize() - XCP_EVENT_PACKET_SIZE_IN_BYTES;\n    size_t packetSize = 0;\n    uint8_T *msgBuffer = NULL;\n    size_t msgBufferSize = 0;\n\n    /* Validate input parameters */\n    XCP_ERROR_IF((eventDataSize > 0) && (eventData == NULL), XCP_INV_ARG, \"xcpEventNotificationReq: invalid eventData buffer\\n\");\n    XCP_ERROR_IF(eventDataSize > maxEventDataSize, XCP_INV_ARG, \"xcpEventNotificationReq: invalid eventDataSize\\n\");\n\n    /* Calculate the required message buffer size */\n    packetSize = eventDataSize + XCP_EVENT_PACKET_SIZE_IN_BYTES;\n\n    /* Allocate the message buffer */\n    msgBufferSize = xcpTransportMsgBufferSize(packetSize, XCP_CTO);\n    msgBuffer = (uint8_T *)xcpMemAlloc(msgBufferSize);\n\n    if (msgBuffer != NULL) {\n        XcpEventPacketFrame *frame = (XcpEventPacketFrame *) (msgBuffer + packetOffset);\n\n        /* Fill the EV packet information */\n        frame->PID = XCP_PID_EV;\n        frame->eventCode = eventCode;\n\n        if (eventDataSize > 0) {\n            uint8_T *packetEventData = msgBuffer + packetOffset + XCP_IN_HW_AG(XCP_EVENT_PACKET_SIZE_IN_BYTES);\n\n            /* Copy the optional event data */\n            XCP_MEMCPY(packetEventData, eventData, XCP_IN_HW_AG(eventDataSize));\n        }\n\n        /* Send the EV packet to the Transport Layer\n           @note to guarantee that this packet gets delivered as soon as possible\n                 to the XCP Master, the highest priority queue is used */\n        errorCode = xcpTransportTxPacketSet(XCP_TRANSPORT_TX_HIGHEST_PRIO_QUEUE,\n                                            XCP_TRANSPORT_NOT_A_DAQ,\n                                            msgBuffer, msgBufferSize,\n                                            packetOffset, packetSize);\n        if (errorCode != XCP_SUCCESS) {\n            xcpMemFree(msgBuffer);\n        }\n    }\n    else\n    {\n        errorCode = XCP_NO_MEMORY;\n    }\n\n    return errorCode;\n}\n\nXcpErrorCode xcpRemoteServiceReq(XcpReqServiceCode serviceReqCode, const void *serviceReqData, size_t serviceReqDataSize)\n{\n    XcpErrorCode errorCode = XCP_SUCCESS;\n    size_t packetOffset = xcpTransportPacketOffset();\n    size_t maxServiceReqDataSize = xcpTransportMaxCtoSize() - XCP_SERVICE_REQ_PACKET_SIZE_IN_BYTES;\n    size_t packetSize = 0;\n    uint8_T *msgBuffer = NULL;\n    size_t msgBufferSize = 0;\n\n    /* Validate input parameters */\n    XCP_ERROR_IF((serviceReqDataSize > 0) && (serviceReqData == NULL), XCP_INV_ARG, \"xcpRemoteServiceReq: invalid serviceReqData buffer\\n\");\n    XCP_ERROR_IF(serviceReqDataSize > maxServiceReqDataSize, XCP_INV_ARG, \"xcpRemoteServiceReq: invalid serviceReqDataSize\\n\");\n\n    /* Calculate the required message buffer size */\n    packetSize = serviceReqDataSize + XCP_SERVICE_REQ_PACKET_SIZE_IN_BYTES;\n\n    /* Allocate the message buffer */\n    msgBufferSize = xcpTransportMsgBufferSize(packetSize, XCP_CTO);\n    msgBuffer = (uint8_T *)xcpMemAlloc(msgBufferSize);\n\n    if (msgBuffer != NULL) {\n        XcpServiceReqPacketFrame *frame = (XcpServiceReqPacketFrame *) (msgBuffer + packetOffset);\n\n        /* Fill the SERV packet information */\n        frame->PID = XCP_PID_SERV;\n        frame->serviceReqCode = serviceReqCode;\n\n        if (serviceReqDataSize > 0) {\n            uint8_T *packetServiceReqData = msgBuffer + packetOffset + XCP_IN_HW_AG(XCP_SERVICE_REQ_PACKET_SIZE_IN_BYTES);\n\n            /* Copy the optional event data */\n            XCP_MEMCPY(packetServiceReqData, serviceReqData, XCP_IN_HW_AG(serviceReqDataSize));\n        }\n\n        /* Send the SERV packet to the Transport Layer\n           @note to guarantee that this packet gets delivered as soon as possible\n                 to the XCP Master, the highest priority queue is used */\n        errorCode = xcpTransportTxPacketSet(XCP_TRANSPORT_TX_HIGHEST_PRIO_QUEUE,\n                                            XCP_TRANSPORT_NOT_A_DAQ,\n                                            msgBuffer, msgBufferSize,\n                                            packetOffset, packetSize);\n        if (errorCode != XCP_SUCCESS) {\n            xcpMemFree(msgBuffer);\n        }\n    }\n    else\n    {\n        errorCode = XCP_NO_MEMORY;\n    }\n\n    return errorCode;\n}\n\nXcpStatus xcpGetStatus(void)\n{\n    return xcpStatus;\n}\n\nXcpErrorCode xcpReset(void)\n{\n    if (!initialized) {\n        XCP_PRINTF(\"xcpReset: protocol layer already reset\\n\");\n        /* Nothing to do: just printing out a warning message*/\n    }\n\n    /* Reset Calibration support */\n    xcpCalibrationReset();\n\n    /* Reset DAQ lists (and STIM) support */\n    xcpDaqReset();\n\n    /* Reset Standard Commands support */\n    xcpStandardReset();\n\n    XCP_MEMSET((void*)groupPacketLookup, 0, sizeof(groupPacketLookup));\n\n    initialized = false;\n\n    return XCP_SUCCESS;\n}\n\nXcpErrorCode xcpSetCustomPoolMemoryManager(XcpEventIdType eventId, XcpCustomAllocHandler allocHandler, XcpCustomFreeHandler freeHandler)\n{\n    XcpErrorCode errorCode;\n\n    /* Forward registration to DAQ list */\n    errorCode = xcpDaqSetCustomPoolMemoryManager(eventId, allocHandler, freeHandler);\n\n    return errorCode;\n}\n\nXcpErrorCode xcpGetCustomPoolMemoryManager(XcpEventIdType *eventId, XcpCustomAllocHandler *allocHandler, XcpCustomFreeHandler *freeHandler)\n{\n    XcpErrorCode errorCode;\n\n    /* Forward query to DAQ list */\n    errorCode = xcpDaqGetCustomPoolMemoryManager(eventId, allocHandler, freeHandler);\n\n    return errorCode;\n}\n\nXcpErrorCode xcpPackedModeEventsFlush(uint32_T timestamp)\n{\n    XcpErrorCode errorCode;\n\n    errorCode = xcpDaqEventsFlush(timestamp);\n\n    return errorCode;\n}\n\nXcpErrorCode xcpPackedModeEventReset(XcpEventIdType eventId)\n{\n    XcpErrorCode errorCode;\n    boolean_T resetSamples = true;\n\n    /* Reset the status of pending packed DAQ lists,\n       discarding incomplete packets. */\n    errorCode = xcpDaqEvent(eventId, 0, resetSamples);\n\n    return errorCode;\n}\n\n#ifdef XCP_INTERNAL_DAQ_CONFIG_ACCESS_SUPPORT\n\nXcpErrorCode xcpGetDaqOdtEntries(XcpEventIdType eventId,\n                                 XcpOdtEntry* entries,\n                                 size_t* entriesNumber,\n                                 size_t maxEntriesNumber)\n{\n    XcpErrorCode errorCode = XCP_SUCCESS;\n\n    errorCode = xcpDaqGetOdtEntries(eventId, XCP_DIRECTION_DAQ,\n                                 entries, entriesNumber,\n                                 maxEntriesNumber);\n    return errorCode;\n}\n\n#endif /* XCP_INTERNAL_DAQ_CONFIG_ACCESS_SUPPORT */\n\n\n#ifndef XCP_DAQ_SUPPORT\n\nvoid xcpDaqInit(void) {}\nXcpPacketLookupFunction xcpDaqGetPacketLookup(void) {return NULL;}\nvoid xcpDaqSetPacketLookup(XcpPacketLookupFunction getPacket) {XCP_UNUSED_PARAM(getPacket);}\nXcpErrorCode xcpDaqEvent(XcpEventIdType eventId, uint32_T timestamp, boolean_T resetSamples) {XCP_UNUSED_PARAM(eventId); XCP_UNUSED_PARAM(timestamp); XCP_UNUSED_PARAM(resetSamples); return XCP_SUCCESS;}\nboolean_T xcpResetDaqListStatus(void) {return true;}\nXcpErrorCode xcpDaqEventsFlush(uint32_T timestamp) {XCP_UNUSED_PARAM(timestamp); return XCP_SUCCESS;}\nboolean_T xcpDaqLock(void) {return true;}\nvoid xcpDaqUnlock(void) {}\nvoid xcpDaqReset(void) {}\nXcpErrorCode xcpDaqSetCustomPoolMemoryManager(XcpEventIdType eventId, XcpCustomAllocHandler allocHandler, XcpCustomFreeHandler freeHandler) {\n    XCP_UNUSED_PARAM(eventId); XCP_UNUSED_PARAM(allocHandler); XCP_UNUSED_PARAM(freeHandler); return XCP_SUCCESS;}\nXcpErrorCode xcpDaqGetCustomPoolMemoryManager(XcpEventIdType *eventId, XcpCustomAllocHandler *allocHandler, XcpCustomFreeHandler *freeHandler) {\n    XCP_UNUSED_PARAM(eventId); XCP_UNUSED_PARAM(allocHandler); XCP_UNUSED_PARAM(freeHandler); return XCP_SUCCESS;}\n\n#ifdef XCP_INTERNAL_DAQ_CONFIG_ACCESS_SUPPORT\nXcpErrorCode xcpGetDaqOdtEntries(XcpEventIdType eventId, XcpOdtEntry* entries, size_t* entriesNumber, size_t maxEntriesNumber){\n    XCP_UNUSED_PARAM(eventId); XCP_UNUSED_PARAM(entries); XCP_UNUSED_PARAM(entriesNumber); XCP_UNUSED_PARAM(maxEntriesNumber); return XCP_SUCCESS;}\n#endif /* XCP_INTERNAL_DAQ_CONFIG_ACCESS_SUPPORT */\n\n#endif\n\n\n#ifndef XCP_CALIBRATION_SUPPORT\n\nvoid xcpCalibrationInit(void) {}\nXcpPacketLookupFunction xcpCalibrationGetPacketLookup(void) {return NULL;}\nvoid xcpCalibrationSetPacketLookup(XcpPacketLookupFunction getPacket) {XCP_UNUSED_PARAM(getPacket);}\nvoid xcpCalibrationReset(void) {}\n\n#endif\n"},{"name":"xcp_calibration.c","type":"source","group":"legacy","path":"C:\\Program Files\\MATLAB\\R2023a\\toolbox\\coder\\xcp\\src\\target\\slave\\protocol\\src","tag":"","groupDisplay":"Other files","code":"/*\n* Copyright 2017-2020 The MathWorks, Inc.\n*\n* File: xcp_calibration.c\n*\n* Abstract:\n*  Implementation of XCP Protocol Layer Calibration support\n*/\n\n#include \"xcp_common.h\"\n#include \"xcp.h\"\n#include \"xcp_cfg.h\"\n#include \"xcp_calibration.h\"\n\n#ifdef XCP_CALIBRATION_SUPPORT\n\n#ifdef XCP_CALIBRATION_EXTENDED_SUPPORT\n#include \"xcp_calibration_ext.h\"\n#endif\n\n#include \"xcp_types.h\"\n#include \"xcp_calibration_types.h\"\n#include \"xcp_standard.h\"\n#include \"xcp_transport_internal.h\"\n\n/*****************************************************************************\n    Internal Functions specific to Calibration support\n******************************************************************************/\nstatic boolean_T isValidShortDownloadSize(uint8_T size)\n{\n    size_t addressGranularity = XCP_ADDRESS_GRANULARITY_BYTES_NUMBER;\n    size_t maxCtoSize = xcpTransportMaxCtoSize();\n\n    return (size <= ((maxCtoSize - 8) / addressGranularity));\n}\n\n#if XCP_SET_MTA_ENABLE == 1\n    static boolean_T isValidDownloadSize(uint8_T size)\n    {\n        size_t addressGranularity = XCP_ADDRESS_GRANULARITY_BYTES_NUMBER;\n        size_t maxCtoSize = xcpTransportMaxCtoSize();\n        \n        return ( (size >= 1)  && (size <= (maxCtoSize-2) / addressGranularity ) );\n    }\n#endif  /* XCP_SET_MTA_ENABLE == 1 */\n\n/** memcpy function used to copy data from packet to MTA address */\nstatic void xcpMemcpyToMTA(uint8_T *packet, uint8_T size)\n{\n    /* Retrieve memory address */\n    uint8_T *xcpMTARawPointer = xcpStandardGetAddressFromMta();\n\n    XCP_PRINTF(\"writing at address %p\\n\", xcpMTARawPointer);\n\n#ifdef XCP_EMULATE_BYTE_ADDRESSABLE_TARGET\n{\n    uint32_T address;\n    uint8_T addressExtension;\n    uint8_T dstOffsetBytes;\n    xcpStandardGetMta(&address, &addressExtension);\n    dstOffsetBytes = XCP_BYTE_OFFSET_GET(address);\n    xcpMemcpyByte(xcpMTARawPointer, dstOffsetBytes, packet, 0, size);\n}\n#else\n    XCP_MEMCPY(xcpMTARawPointer, packet, size);\n#endif\n}\n\n/*****************************************************************************\n    XCP DOWNLOAD\n******************************************************************************/\n#if XCP_SET_MTA_ENABLE == 1\n    static XcpProtoErrorCode downloadInputPacketHandler(void   *msgBuffer,\n        size_t  xcpPacketOffset,\n        size_t *outputPacketSize)\n    {\n        XcpProtoErrorCode protoErrorCode = XCP_PROTO_SUCCESS;\n        uint8_T *packet = (uint8_T *)msgBuffer + xcpPacketOffset;\n        XcpDownloadCmdPacketFrame *frame = (XcpDownloadCmdPacketFrame *)packet;\n        boolean_T ok = false;\n        uint8_T *xcpMTARawPointer = xcpStandardGetAddressFromMta();\n\n        /* Check if the number of data elements is valid */\n        ok = isValidDownloadSize((uint8_T)frame->size);\n        XCP_INPUT_PKT_ERROR_IF(!ok, XCP_PROTO_OUT_OF_RANGE,\n            (\"DOWNLOAD: invalid number of data elements (%d)\\n\", frame->size));\n            \n        /* Check if a valid MTA address is available */\n        XCP_INPUT_PKT_ERROR_IF((xcpMTARawPointer == 0) || (xcpMTARawPointer == NULL), \n            XCP_PROTO_ACCESS_DENIED, (\"DOWNLOAD: invalid address\\n\"));\n\n        XCP_PRINTF(\"DOWNLOAD: \");\n    \n        /* Update the value of the parameter with the data element content */\n        xcpMemcpyToMTA(packet + sizeof(XcpDownloadCmdPacketFrame), (uint8_T)frame->size);\n    \n        /* Post-increment MTA by the frame size in address granularity units */\n        xcpStandardIncrementMta((uint8_T)frame->size);\n        \n        *outputPacketSize = XCP_GENERIC_RES_PACKET_SIZE_IN_BYTES;\n\n        return protoErrorCode;\n    }\n#endif  /* XCP_SET_MTA_ENABLE == 1 */\n\n/*****************************************************************************\n    XCP SHORT_DOWNLOAD\n******************************************************************************/\nstatic XcpProtoErrorCode shortDownloadInputPacketHandler(void   *msgBuffer,\n    size_t  xcpPacketOffset,\n    size_t *outputPacketSize)\n{\n    XcpProtoErrorCode protoErrorCode = XCP_PROTO_SUCCESS;\n    uint8_T *packet = (uint8_T *)msgBuffer + xcpPacketOffset;\n    XcpShortDownloadCmdPacketFrame *frame = (XcpShortDownloadCmdPacketFrame *)packet;\n    boolean_T ok = false;\n\n    /* Check if the number of data elements is valid */\n    ok = isValidShortDownloadSize((uint8_T)frame->size);\n    XCP_INPUT_PKT_ERROR_IF(!ok, XCP_PROTO_OUT_OF_RANGE,\n        (\"SHORT_DOWNLOAD: invalid number of data elements (%d)\\n\", frame->size));\n\n    /* Check if the memory address is valid and set the MTA pointer */\n    ok = xcpStandardSetMta(frame->address, (uint8_T)frame->addressExtension);\n    XCP_INPUT_PKT_ERROR_IF(!ok, XCP_PROTO_ACCESS_DENIED, (\"SHORT_DOWNLOAD: invalid address\\n\"));\n\n    XCP_PRINTF(\"SHORT_DOWNLOAD: \");\n\n    /* Update the value of the parameter with the data element content */\n    xcpMemcpyToMTA(packet + sizeof(XcpShortDownloadCmdPacketFrame), (uint8_T)frame->size);\n\n    /* Post-increment MTA by the frame size in address granularity units */\n    xcpStandardIncrementMta((uint8_T)frame->size);\n\n    *outputPacketSize = XCP_GENERIC_RES_PACKET_SIZE_IN_BYTES;\n\n    return protoErrorCode;\n}\n\n\n/** This table contains the list of supported Rx packets and the corresponding handlers */\nstatic const XcpPacketHandlers calibrationSupportedRxPacket[] =\n{\n#if XCP_SET_MTA_ENABLE == 1\n    { XCP_PID_DOWNLOAD,       downloadInputPacketHandler,     genericOutputPacketHandler },\n#endif\n    { XCP_PID_SHORT_DOWNLOAD, shortDownloadInputPacketHandler, genericOutputPacketHandler }\n};\n\n\n/*****************************************************************************\n    XCP Packet Lookup Function for basic calibration commands\n******************************************************************************/\n\n/* Default Calibration Packet Lookup function, supporting only basic commands\n   listed in the table above */\nstatic const XcpPacketHandlers* getPacket(XcpRxPidCode pid)\n{\n    return xcpFindPacket(pid, calibrationSupportedRxPacket,\n                         XCP_ELEMENTS_NUMBER(calibrationSupportedRxPacket));\n}\n\nstatic XcpPacketLookupFunction packetLookup = NULL;\n\n\n\n/*****************************************************************************\n    Public Functions (invoked within the Protocol Layer)\n******************************************************************************/\nvoid xcpCalibrationInit(void)\n{\n    /* Initialize the packet lookup function to support only basic\n       calibration commands */\n    xcpCalibrationSetPacketLookup(getPacket);\n\n#ifdef XCP_CALIBRATION_EXTENDED_SUPPORT\n    /* Initialize support for the extended list of calibration commands */\n    xcpCalibrationExtendedInit();\n#endif\n}\n\n\nXcpPacketLookupFunction xcpCalibrationGetPacketLookup(void)\n{\n    return packetLookup;\n}\n\n\nvoid xcpCalibrationSetPacketLookup(XcpPacketLookupFunction getPacket)\n{\n    packetLookup = getPacket;\n}\n\nvoid xcpCalibrationReset(void)\n{\n#ifdef XCP_CALIBRATION_EXTENDED_SUPPORT\n    /* Reset support for the extended list of calibration commands */\n    xcpCalibrationExtendedReset();\n#endif\n}\n\n#endif\n"},{"name":"xcp_daq.c","type":"source","group":"legacy","path":"C:\\Program Files\\MATLAB\\R2023a\\toolbox\\coder\\xcp\\src\\target\\slave\\protocol\\src","tag":"","groupDisplay":"Other files","code":"/*\n* Copyright 2016-2022 The MathWorks, Inc.\n*\n* File: xcp_daq.c\n*\n* Abstract:\n*  Implementation of XCP Protocol Layer DAQ Lists (and STIM) support\n*/\n\n#include \"xcp_common.h\"\n#include \"xcp.h\"\n#include \"xcp_internal.h\"\n#include \"xcp_cfg.h\"\n#include \"xcp_daq.h\"\n\n#ifdef XCP_DAQ_SUPPORT\n#include \"xcp_daq_ext.h\"\n#include \"xcp_transport_internal.h\"\n#include \"xcp_types.h\"\n#include \"xcp_daq_types.h\"\n#include \"xcp_mem.h\"\n\n/*****************************************************************************\n    Internal Global variables specific to DAQ support\n******************************************************************************/\n\n/** Dynamic DAQ Lists data structures */\nstatic XcpDaqLists xcpDynamicDaqLists;\n\n/** Number of event threads currently in execution */\nstatic size_t xcpRunningEventCounter = 0;\n\n/** ID of the selected DAQ List on START_STOP_DAQ_LIST command */\n#define XCP_INVALID_DAQ_LIST_ID -1\nstatic int32_T startStopDaqListId = XCP_INVALID_DAQ_LIST_ID;\n\n/** Pointer to current ODT entry */\nstatic XcpDaqPtr   xcpCurrentDaq = { 0xFFFF, 0xFF, 0xFF };\n\nstatic XcpEventCustomMemoryManager xcpEventCustomMemoryManager = {XCP_DAQ_CUSTOM_MEMORY_INVALID_EVENT_ID, NULL, NULL};\n\n#ifndef XCP_DAQ_LIST_INDEPENDENT_EVENT_LOCK\n#ifdef XCP_LOCKLESS_SYNC_DATA_TRANSFER_SUPPORT\n/* XCP_LOCKLESS_SYNC_DATA_TRANSFER_SUPPORT is typically enabled\n   for multi-core applications, where it is critical to limit\n   the interference between threads streaming data.\n   For this reason, by default we enable the independent lock\n   of the DAQ list data structures between events */\n#define XCP_DAQ_LIST_INDEPENDENT_EVENT_LOCK 1\n#else\n/* XCP_LOCKLESS_SYNC_DATA_TRANSFER_SUPPORT is typically disabled\n   for single-core bare-metal applications, where it is critical\n   to limit the memory footprint of the target executable.\n   For this reason, by default we disable the independent lock\n   of the DAQ list data structures between events and use a single\n   mutex to protect the DAQ lists data structures */\n#define XCP_DAQ_LIST_INDEPENDENT_EVENT_LOCK 0\n#endif\n\n#endif\n\n\n#if !defined(XCP_DAQ_LIST_INDEPENDENT_EVENT_LOCK) || (XCP_DAQ_LIST_INDEPENDENT_EVENT_LOCK == 0)\n/* Mutex protecting against the concurrent access to DAQ Lists data structures */\nstatic XCP_MUTEX_DEFINE(daqLock);\n\nstatic boolean_T xcpDaqWriteLock(XcpEventIdType eventId)\n{\n    boolean_T locked = false;\n    XCP_UNUSED_PARAM(eventId);\n    XCP_WRITE_TRY_LOCK(daqLock, xcpRunningEventCounter, locked);\n\n    return locked;\n}\n\nstatic void xcpDaqWriteUnlock(XcpEventIdType eventId)\n{\n    XCP_UNUSED_PARAM(eventId);\n    XCP_WRITE_UNLOCK(daqLock);\n}\n\nstatic void xcpDaqReadLock(XcpEventIdType eventId)\n{\n    XCP_UNUSED_PARAM(eventId);\n    XCP_READ_LOCK(daqLock, xcpRunningEventCounter);\n}\n\nstatic void xcpDaqReadUnlock(XcpEventIdType eventId)\n{\n    XCP_UNUSED_PARAM(eventId);\n    XCP_READ_UNLOCK(daqLock, xcpRunningEventCounter);\n}\n\n#else\n/* Each XCP event has an independent mutex to protect the read/write access\n   to the DAQ list data structures */\n#ifndef XCP_MAX_EVENT_DATA_NUMBER\n#define XCP_MAX_EVENT_DATA_NUMBER XCP_MAX_EVENT_CHANNEL\n#endif\n\ntypedef struct XcpEventData {\n    XCP_MUTEX_DEFINE(lock);\n} XcpEventData;\n\n/** Array of event-specific data */\nstatic XcpEventData xcpEventData[XCP_MAX_EVENT_DATA_NUMBER];\n\nstatic boolean_T xcpDaqWriteLock(XcpEventIdType eventId)\n{\n    XCP_MUTEX_LOCK(xcpEventData[eventId].lock);\n    return true;\n}\n\nstatic void xcpDaqWriteUnlock(XcpEventIdType eventId)\n{\n    XCP_MUTEX_UNLOCK(xcpEventData[eventId].lock);\n}\n\nstatic void xcpDaqReadLock(XcpEventIdType eventId)\n{\n    XCP_MUTEX_LOCK(xcpEventData[eventId].lock);\n}\n\nstatic void xcpDaqReadUnlock(XcpEventIdType eventId)\n{\n    XCP_MUTEX_UNLOCK(xcpEventData[eventId].lock);\n}\n\n#endif\n\n#ifndef XCP_MIN_EVENT_NO_RESERVED_POOL\n#define XCP_MIN_EVENT_NO_RESERVED_POOL 0xFFFF\n#endif\n\n/*****************************************************************************\n    Internal Functions specific to DAQ support\n******************************************************************************/\n\n/* When enabled, timestamp is required for first ODT in the DAQ list */\n#if XCP_TIMESTAMP_FIXED == 0\n#define IS_TIMESTAMP_REQUIRED(mode, odtNumber) ((odtNumber == 0) && \\\n            XCP_READ_BIT_VALUE(mode, XCP_DAQ_MODE_TIMESTAMP_MASK))\n#else\n#define IS_TIMESTAMP_REQUIRED(mode, odtNumber) (odtNumber == 0)\n#endif\n\n/* Incrementing pointer. byteOffset argument will have a valid value only when\n   we are emulating as a BYTE addressable target. Otherwise, it is 0. */\n#ifdef XCP_EMULATE_BYTE_ADDRESSABLE_TARGET\n#define XCP_HW_PTR_INCREMENT(ptr, incr, byteOffset) (uint8_T *)(byteOffset ? (ptr + XCP_IN_HW_AG(incr - 1)) : (ptr + XCP_IN_HW_AG(incr)))\n#else\n#define XCP_HW_PTR_INCREMENT(ptr, incr, byteOffset) (uint8_T *)(ptr + incr)\n#endif\n\n/* Update byteOffset when emulating as a BYTE addressable target */\n#ifdef XCP_EMULATE_BYTE_ADDRESSABLE_TARGET\n#define XCP_HW_BYTE_OFFSET_UPDATE(offset, size) ((offset + size) % XCP_HARDWARE_ADDRESS_GRANULARITY_BYTES_NUMBER)\n#else\n#define XCP_HW_BYTE_OFFSET_UPDATE(offset, size) 0\n#endif\n\n#define IS_USING_CUSTOM_POOL(x) (x == xcpEventCustomMemoryManager.eventId)\n\nstatic boolean_T isActiveDaqList(uint16_T daqListId)\n{\n    return (xcpDynamicDaqLists.daq[daqListId].status == XCP_DAQ_SELECTED) ||\n           (xcpDynamicDaqLists.daq[daqListId].status == XCP_DAQ_STARTED);\n}\n\nstatic boolean_T noActiveDaqLists(void)\n{\n    boolean_T found = 0;\n    uint16_T i = 0;\n\n    for (i = 0; (i < xcpDynamicDaqLists.daqCount) && !found; i++) {\n        found = isActiveDaqList(i);\n    }\n\n    return !found;\n}\n\nstatic boolean_T isValidDaqPtr(uint16_T daqListId, uint8_T odtId, uint8_T odtEntryId)\n{\n    boolean_T ret = (xcpDynamicDaqLists.daq != NULL) &&\n                    (daqListId < xcpDynamicDaqLists.daqCount) &&\n                    (xcpDynamicDaqLists.daq[daqListId].odt != NULL) &&\n                    (odtId < xcpDynamicDaqLists.daq[daqListId].odtCount) &&\n                    (xcpDynamicDaqLists.daq[daqListId].odt[odtId].entry != NULL) &&\n                    (odtEntryId < xcpDynamicDaqLists.daq[daqListId].odt[odtId].entriesCount);\n\n    return ret;\n}\n\nstatic boolean_T isValidDaqEntry(uint8_T bitOffset, uint8_T size, uint32_T address)\n{\n    boolean_T ret = false;\n    uint16_T  entrySize = size;     /* cast to 16-bit avoids -Werror=type-limits */\n\n    if (bitOffset == 0xFF) {\n        /* \"Normal\" (non-bitwise) access has been selected */\n        if ( (entrySize <= XCP_MAX_ODT_ENTRY_SIZE) &&\n             (entrySize % (XCP_ODT_ENTRY_SIZE_GRANULARITY/XCP_ADDRESS_GRANULARITY_BYTES_NUMBER) == 0) &&\n             (  address % (XCP_ODT_ENTRY_SIZE_GRANULARITY/XCP_ADDRESS_GRANULARITY_BYTES_NUMBER) == 0) ) {\n            ret = true;\n        }\n    }\n    else {\n        /* Bitwise access has been selected */\n        if ((bitOffset <= 0x1F) && (address % XCP_ODT_ENTRY_SIZE_GRANULARITY) &&\n            (entrySize == XCP_ODT_ENTRY_SIZE_GRANULARITY)) {\n            ret = true;\n        }\n    }\n\n    return ret;\n}\n\n/** The current supported mode includes:\n- alternating = 0\n- direction = 0 (DAQ only)\n- timestamp = 1 or 0\n- PID OFF = 0\n*/\nstatic boolean_T isSupportedDaqListMode(uint8_T mode)\n{\n    #if XCP_TIMESTAMP_FIXED == 0\n        return ( (mode & ~XCP_DAQ_MODE_TIMESTAMP_MASK) == 0 );\n    #else\n        return (mode == XCP_DAQ_MODE_TIMESTAMP_MASK);\n    #endif\n}\n\nstatic boolean_T isValidStartStopMode(uint8_T mode)\n{\n    boolean_T ret = false;\n\n    if ((mode == XCP_DAQ_LIST_STOP) ||\n        (mode == XCP_DAQ_LIST_START) ||\n        (mode == XCP_DAQ_LIST_SELECT))\n        ret = true;\n\n    return ret;\n}\n\nstatic boolean_T isValidStartStopSynchMode(uint8_T mode)\n{\n    boolean_T ret = false;\n\n    if ((mode == XCP_DAQ_LIST_STOP_ALL) ||\n        (mode == XCP_DAQ_LIST_START_SELECTED) ||\n        (mode == XCP_DAQ_LIST_STOP_SELECTED))\n        ret = true;\n\n    return ret;\n}\n\nstatic boolean_T absoluteOdtNumberIdentification(void)\n{\n    return (XCP_ID_FIELD_TYPE == XCP_ID_ABSOLUTE_ODT_NUMBER);\n}\n\nstatic boolean_T isDaqPackedModeEnabled(uint16_T daqListId)\n{\n    /* DAQ Packed Mode is only supported for event-grouped packing and \n       reserved memory pool */\n\n    boolean_T isEnabled = (xcpDynamicDaqLists.daq[daqListId].packedMode == XCP_DAQ_EVENT_GROUPED_PACKING) &&\n                          !IS_USING_CUSTOM_POOL(xcpDynamicDaqLists.daq[daqListId].eventId);\n    \n#if XCP_MEM_DAQ_RESERVED_POOLS_NUMBER > 0\n    isEnabled = isEnabled && (daqListId < XCP_MEM_DAQ_RESERVED_POOLS_NUMBER);\n#endif\n\n    return isEnabled;\n}\n\n/* Return size of packet associated with the odt at the protocol layer */\nstatic size_t odtPacketSize(XcpDaq *daq, uint8_T odtNumber) {\n    XcpOdt *odt = &daq->odt[odtNumber];\n    size_t packetSize = XCP_IN_BYTES(odt->size * daq->sampleCount + XCP_IN_AG(XCP_ID_FIELD_SIZE));\n\n    if (IS_TIMESTAMP_REQUIRED(daq->mode, odtNumber)) {\n        packetSize += XCP_TIMESTAMP_SIZE;\n    }\n\n    return packetSize;\n}\n\n/* Try to allocate a reserved memory pool dedicated to the packets in the DAQ list.\n   @note depending on the configuration of the memory allocator, this may fail\n         so we just set daq->poolId to XCP_INVALID_POOL_ID in that case */\nstatic XcpErrorCode createDaqReservedPool(XcpDaq *daq)\n{\n    XcpErrorCode errorCode = XCP_SUCCESS;\n    size_t poolBlockSize = 0;\n    uint8_T i = 0;\n\n    /* Calculate the max size for the ODT packets in the given DAQ list */\n    for (i = 0; i < daq->odtCount; i++) {\n        /* Calculate the required message buffer size */\n        size_t packetSize = odtPacketSize(daq, i);\n        size_t msgBufferSize = 0;\n\n        msgBufferSize = xcpTransportMsgBufferSize(packetSize, XCP_DTO);\n\n        if (msgBufferSize > poolBlockSize) {\n            poolBlockSize = msgBufferSize;\n        }\n    }\n\n    /* Try the allocation of the dedicate pool */\n    errorCode = xcpMemReservedPoolCreate(poolBlockSize,\n                                         XCP_MEM_DAQ_RESERVED_POOL_BLOCKS_NUMBER * daq->odtCount,\n                                         &daq->poolId);\n    if (errorCode != XCP_SUCCESS) {\n        daq->poolId = XCP_INVALID_POOL_ID;\n    }\n\n    #ifdef XCP_DEBUG_SUPPORT\n    xcpMemPrintDiagnostics();\n    #endif\n\n    return errorCode;\n}\n\nstatic void destroyDaqReservedPool(XcpDaq *daq)\n{\n    if (daq->poolId != XCP_INVALID_POOL_ID) {\n        xcpMemReservedPoolDestroy(daq->poolId);\n    }\n\n    daq->poolId = XCP_INVALID_POOL_ID;\n}\n\n\n/*****************************************************************************\n    XCP SET DAQ PTR\n******************************************************************************/\nstatic XcpProtoErrorCode setDaqPtrInputPacketHandler(void   *msgBuffer,\n                                                     size_t  xcpPacketOffset,\n                                                     size_t *outputPacketSize)\n{\n    XcpProtoErrorCode protoErrorCode = XCP_PROTO_SUCCESS;\n    uint8_T *packet = (uint8_T *)msgBuffer + xcpPacketOffset;\n    XcpSetDaqPtrCmdPacketFrame *frame = (XcpSetDaqPtrCmdPacketFrame *) packet;\n    uint16_T daqListId  = (uint16_T)frame->daqListId;\n    uint8_T  odtId      = (uint8_T)frame->odtId;\n    uint8_T  odtEntryId = (uint8_T)frame->odtEntryId;\n    boolean_T ok = false;\n\n    /* Check if the selected ODT Entry is available */\n    ok = isValidDaqPtr(daqListId, odtId, odtEntryId);\n    XCP_INPUT_PKT_ERROR_IF(!ok, XCP_PROTO_OUT_OF_RANGE,\n        (\"SET_DAQ_PTR: ODT entry not available (DAQ %d, ODT %d, Entry %d)\\n\", daqListId, odtId, odtEntryId));\n\n    /* Check if the DAQ list is currently active */\n    ok = !isActiveDaqList(daqListId);\n    XCP_INPUT_PKT_ERROR_IF(!ok, XCP_PROTO_DAQ_ACTIVE, (\"SET_DAQ_PTR: DAQ list %d is currently active\\n\", daqListId));\n\n    /* Everything is fine -> proceed and update the current ODT entry pointer */\n    XCP_PRINTF(\"SET_DAQ_PTR: updating current ODT entry pointer to DAQ %d, ODT %d, Entry %d\\n\",\n               daqListId, odtId, odtEntryId);\n\n    xcpCurrentDaq.daqListId  = daqListId;\n    xcpCurrentDaq.odtId      = odtId;\n    xcpCurrentDaq.odtEntryId = odtEntryId;\n\n    *outputPacketSize = XCP_GENERIC_RES_PACKET_SIZE_IN_BYTES;\n\n    return protoErrorCode;\n}\n\n/*****************************************************************************\n    XCP WRITE DAQ\n******************************************************************************/\nstatic XcpProtoErrorCode writeDaqInputPacketHandler(void   *msgBuffer,\n                                                    size_t  xcpPacketOffset,\n                                                    size_t *outputPacketSize)\n{\n    XcpProtoErrorCode protoErrorCode = XCP_PROTO_SUCCESS;\n    uint8_T *packet = (uint8_T *)msgBuffer + xcpPacketOffset;\n    XcpWriteDaqCmdPacketFrame *frame = (XcpWriteDaqCmdPacketFrame *)packet;\n    uint16_T daqListId = xcpCurrentDaq.daqListId;\n    uint8_T  odtId = xcpCurrentDaq.odtId;\n    uint8_T  odtEntryId = xcpCurrentDaq.odtEntryId;\n    XcpOdtEntry *entry = NULL;\n    boolean_T ok = false;\n\n    /* Check if the selected ODT Entry is available */\n    ok = isValidDaqPtr(daqListId, odtId, odtEntryId);\n    XCP_INPUT_PKT_ERROR_IF(!ok, XCP_PROTO_WRITE_PROTECTED,\n        (\"WRITE_DAQ: current ODT entry not available for write operations (DAQ %d, ODT %d, Entry %d)\\n\", daqListId, odtId, odtEntryId));\n\n    /* Check if the DAQ list is currently active */\n    ok = !isActiveDaqList(daqListId);\n    XCP_INPUT_PKT_ERROR_IF(!ok, XCP_PROTO_DAQ_ACTIVE, (\"XCP_WRITE_DAQ: DAQ list %d is currently active\\n\", daqListId));\n\n    /* Check if the Entry values are valid */\n    ok = isValidDaqEntry((uint8_T)frame->bitOffset, (uint8_T)frame->size, (uint32_T)frame->address);\n    XCP_INPUT_PKT_ERROR_IF(!ok, XCP_PROTO_OUT_OF_RANGE,\n        (\"XCP_WRITE_DAQ: invalid DAQ %d ODT %d Entry %d value: bitOffset = %xH size = %d addressExtension = %dH address = %xH\\n\",\n         daqListId, odtId, odtEntryId, frame->bitOffset, frame->size, frame->addressExtension, frame->address));\n\n    /* Everything is fine -> proceed and write the entry */\n    XCP_PRINTF(\"XCP_WRITE_DAQ: writing DAQ %d ODT %d Entry %d: bitOffset = %xH size = %d addressExtension = %dH address = %xH\\n\",\n               daqListId, odtId, odtEntryId, frame->bitOffset, frame->size, frame->addressExtension, frame->address);\n\n    entry = &(xcpDynamicDaqLists.daq[daqListId].odt[odtId].entry[odtEntryId]);\n\n    entry->bitOffset        = (uint8_T)frame->bitOffset;\n    entry->size             = (uint8_T)frame->size;\n    entry->addressExtension = (uint8_T)frame->addressExtension;\n    entry->address          = (uint32_T)frame->address;\n\n    /* After a successful WRITE_DAQ, the xcpDaqPtr odtEntryId needs to be post incremented */\n    xcpCurrentDaq.odtEntryId++;\n\n    *outputPacketSize = XCP_GENERIC_RES_PACKET_SIZE_IN_BYTES;\n\n    return protoErrorCode;\n}\n\n/*****************************************************************************\n    XCP SET DAQ LIST MODE\n******************************************************************************/\nstatic XcpProtoErrorCode setDaqListModeInputPacketHandler(void   *msgBuffer,\n                                                          size_t  xcpPacketOffset,\n                                                          size_t *outputPacketSize)\n{\n    XcpProtoErrorCode protoErrorCode = XCP_PROTO_SUCCESS;\n    uint8_T *packet = (uint8_T *)msgBuffer + xcpPacketOffset;\n    XcpSetDaqListModeCmdPacketFrame *frame = (XcpSetDaqListModeCmdPacketFrame *)packet;\n    XcpDaq *daqList = NULL;\n    boolean_T ok = false;\n\n    /* Check if the DAQ List is available */\n    ok = (xcpDynamicDaqLists.daq != NULL) && (frame->daqListId < xcpDynamicDaqLists.daqCount);\n    XCP_INPUT_PKT_ERROR_IF(!ok, XCP_PROTO_OUT_OF_RANGE, (\"SET_DAQ_LIST_MODE: DAQ list %d not available\\n\", frame->daqListId));\n\n    daqList = &(xcpDynamicDaqLists.daq[frame->daqListId]);\n\n    /* Check if the DAQ list is currently active */\n    ok = !isActiveDaqList((uint16_T)frame->daqListId);\n    XCP_INPUT_PKT_ERROR_IF(!ok, XCP_PROTO_DAQ_ACTIVE, (\"SET_DAQ_LIST_MODE: DAQ list %d is currently active\\n\", frame->daqListId));\n\n    /* Check if the Event Id is valid */\n    ok = (frame->eventId < XCP_MAX_EVENT_CHANNEL);\n    XCP_INPUT_PKT_ERROR_IF(!ok, XCP_PROTO_OUT_OF_RANGE, (\"SET_DAQ_LIST_MODE: invalid event channel Id %d\\n\", frame->eventId));\n\n    /* Check DAQ list priority */\n    ok = (frame->priority == 0);\n    XCP_INPUT_PKT_ERROR_IF(!ok, XCP_PROTO_OUT_OF_RANGE, (\"SET_DAQ_LIST_MODE: priority not supported, must be zero\\n\"));\n\n    /* Check if DAQ list mode is supported */\n    ok = isSupportedDaqListMode((uint8_T)frame->mode);\n    XCP_INPUT_PKT_ERROR_IF(!ok, XCP_PROTO_MODE_NOT_VALID, (\"SET_DAQ_LIST_MODE: DAQ list mode not supported %xH\\n\", frame->mode));\n\n    /* Everything is fine -> proceed and set the DAQ list mode */\n    XCP_PRINTF(\"SET_DAQ_LIST_MODE: setting DAQ list %d: mode = %xH, eventId = %d, prescaler = %d, priority = %d\\n\",\n        frame->daqListId, frame->mode, frame->eventId, frame->prescaler, frame->priority);\n\n    daqList->mode       = (uint8_T)frame->mode;\n    daqList->eventId    = (uint16_T)frame->eventId;\n    daqList->prescaler  = (uint8_T)frame->prescaler;\n    daqList->priority   = (uint8_T)frame->priority;\n\n    /* Assuming that prescaler = 0 means value that you are not interested in using it */\n    if (daqList->prescaler <= 1)\n        daqList->prescaler = 1;\n\n    *outputPacketSize = XCP_GENERIC_RES_PACKET_SIZE_IN_BYTES;\n\n    return protoErrorCode;\n}\n\n/*****************************************************************************\n    XCP START_STOP_DAQ_LIST\n******************************************************************************/\nstatic XcpProtoErrorCode startStopDaqListInputPacketHandler(void   *msgBuffer,\n                                                            size_t  xcpPacketOffset,\n                                                            size_t *outputPacketSize)\n{\n    XcpProtoErrorCode protoErrorCode = XCP_PROTO_SUCCESS;\n    uint8_T *packet = (uint8_T *)msgBuffer + xcpPacketOffset;\n    XcpStartStopDaqListCmdPacketFrame *frame = (XcpStartStopDaqListCmdPacketFrame *)packet;\n    XcpDaq *daqList = NULL;\n    int32_T daqListId = frame->daqListId;\n    boolean_T ok = false;\n    boolean_T locked = false;\n\n    /* Check if the DAQ List is available */\n    ok = (xcpDynamicDaqLists.daq != NULL) && (daqListId < xcpDynamicDaqLists.daqCount);\n    XCP_INPUT_PKT_ERROR_IF(!ok, XCP_PROTO_OUT_OF_RANGE,\n        (\"START_STOP_DAQ_LIST: DAQ list %d not available\\n\", daqListId));\n\n    startStopDaqListId = daqListId;\n    daqList = &(xcpDynamicDaqLists.daq[daqListId]);\n\n    /* Check if requested mode is valid */\n    ok = isValidStartStopMode((uint8_T)frame->mode);\n    XCP_INPUT_PKT_ERROR_IF(!ok, XCP_PROTO_MODE_NOT_VALID,\n        (\"START_STOP_DAQ_LIST: invalid mode %d selected \\n\", frame->mode));\n\n    /* Assign the Absolute ODT number */\n    if (absoluteOdtNumberIdentification()) {\n        if (daqList->status == XCP_DAQ_INIT) {\n            /* The DAQ list has never been started/stopped/selected before\n            -> PIDs for the ODTs needs to be reserved */\n            if (XCP_READ_BIT_VALUE(daqList->mode, XCP_DAQ_MODE_DIRECTION_MASK)) {\n                /* STIM */\n                ok = (daqList->odt != NULL) &&\n                       ((xcpDynamicDaqLists.firstAvailableStimPid +\n                        daqList->odtCount) <= XCP_MAX_STIM_ODT_NUMBER);\n\n                if (ok) {\n                    daqList->firstPid = xcpDynamicDaqLists.firstAvailableStimPid;\n                    xcpDynamicDaqLists.firstAvailableStimPid += daqList->odtCount;\n                }\n            }\n            else {\n                /* DAQ */\n                ok = (daqList->odt != NULL) &&\n                       ((xcpDynamicDaqLists.firstAvailableDaqPid +\n                        daqList->odtCount) <= XCP_MAX_DAQ_ODT_NUMBER);\n\n                if (ok) {\n                    daqList->firstPid = xcpDynamicDaqLists.firstAvailableDaqPid;\n                    xcpDynamicDaqLists.firstAvailableDaqPid += daqList->odtCount;\n                }\n            }\n\n            XCP_INPUT_PKT_ERROR_IF(!ok, XCP_PROTO_DAQ_CONFIG_ERROR,\n                (\"START_STOP_DAQ_LIST: cannot assign PIDs for DAQ list %d \\n\", daqListId));\n        }\n    }\n\n    /* Check the ODT configuration and also if the ODT sizes fits the Max DTO size */\n    if ((frame->mode == XCP_DAQ_LIST_START) || (frame->mode == XCP_DAQ_LIST_SELECT)) {\n        int i = 0;\n\n        ok = true;\n        for (i = 0; (i < daqList->odtCount) && ok; i++) {\n            int j = 0;\n            size_t odtSize = 0;\n\n            /* Calculate the resulting ODT size */\n            for (j = 0; j < daqList->odt[i].entriesCount; j++) {\n                odtSize += daqList->odt[i].entry[j].size;\n            }\n\n            /* Check that the resulting ODT size is valid */\n            if (IS_TIMESTAMP_REQUIRED(daqList->mode, i)){\n                ok = (XCP_IN_BYTES(odtSize * daqList->sampleCount + XCP_IN_AG(XCP_ID_FIELD_SIZE)) + XCP_TIMESTAMP_SIZE) <= xcpTransportMaxDtoSize();\n            }\n            else{\n                ok = (XCP_IN_BYTES(odtSize * daqList->sampleCount + XCP_IN_AG(XCP_ID_FIELD_SIZE))) <= xcpTransportMaxDtoSize();\n            }\n            XCP_INPUT_PKT_ERROR_IF(!ok, XCP_PROTO_DAQ_CONFIG_ERROR,\n                (\"START_STOP_DAQ_LIST: in DAQ list %d the ODT entries size is larger than Max DTO size for ODT %d \\n\", daqListId, i));\n\n            /* Update the ODT size */\n            daqList->odt[i].size = odtSize;\n        }\n    }\n\n    /* Everything is fine -> proceed and change the DAQ list status */\n    locked = xcpDaqWriteLock(daqList->eventId);\n\n    if (locked) {\n        XcpErrorCode createPoolError = XCP_SUCCESS;\n\n        switch (frame->mode) {\n        case XCP_DAQ_LIST_STOP:\n            XCP_PRINTF(\"START_STOP_DAQ_LIST: stopping DAQ list %d\\n\", daqListId);\n            daqList->status = XCP_DAQ_STOPPED;\n            if (noActiveDaqLists()) {\n                /* update status if this was the only active DAQ list */\n                xcpStatusSet(XCP_CONNECTED);\n                xcpSessionStatusClearMask(XCP_SESSION_DAQ_RUNNING_MASK);\n            }\n            break;\n\n        case XCP_DAQ_LIST_START:\n            XCP_PRINTF(\"START_STOP_DAQ_LIST: starting DAQ list %d\\n\", daqListId);\n\n            /* daqList->poolId is initialized with XCP_INVALID_POOL_ID in\n               allocDaqInputPacketHandler.\n\n               Allocate a reserved memory pool for the DAQ list, if needed. */\n            if (daqList->poolId == XCP_INVALID_POOL_ID) {\n                if (IS_USING_CUSTOM_POOL(daqList->eventId)) {\n                    /* Forward custom memory information to the memory manager */\n                    createPoolError = xcpMemCustomPoolCreate(\n                                          xcpEventCustomMemoryManager.allocHandler, \n                                          xcpEventCustomMemoryManager.freeHandler,\n                                          &daqList->poolId);\n                } else if (daqListId < XCP_MEM_DAQ_RESERVED_POOLS_NUMBER\n                    && daqList->eventId < XCP_MIN_EVENT_NO_RESERVED_POOL) {\n                    /* Create a reserved memory pool, if not already created */\n                    createPoolError = createDaqReservedPool(daqList);\n                    daqList->currentSample = 0;\n                }\n            }\n\n            if (createPoolError == XCP_SUCCESS) {\n                daqList->status = XCP_DAQ_STARTED;\n                xcpStatusSet(XCP_SYNC_DATA_TRANSFER);\n                xcpSessionStatusSetMask(XCP_SESSION_DAQ_RUNNING_MASK);\n            }\n            break;\n\n        case XCP_DAQ_LIST_SELECT:\n            XCP_PRINTF(\"START_STOP_DAQ_LIST: selected DAQ list %d\\n\", frame->daqListId);\n            daqList->status = XCP_DAQ_SELECTED;\n            break;\n        }\n\n        xcpDaqWriteUnlock(daqList->eventId);\n\n        *outputPacketSize = XCP_START_STOP_DAQ_LIST_RES_PACKET_SIZE_IN_BYTES;\n        XCP_INPUT_PKT_ERROR_IF(createPoolError != XCP_SUCCESS, XCP_PROTO_MEMORY_OVERFLOW,\n                (\"START_STOP_DAQ_LIST: cannot allocate reserved memory pool for the DAQ list\\n\"));\n    }\n\n    /* Error if the command cannot be executed as the processing of\n       at least one event was in progress */\n    XCP_INPUT_PKT_ERROR_IF(!locked, XCP_PROTO_BUSY,\n        (\"START_STOP_DAQ_LIST: cannot be carried out as an event was processed\\n\"));\n\n    return protoErrorCode;\n}\n\nstatic void startStopDaqListOutputPacketHandler(XcpProtoErrorCode inputCode, void *packet, size_t packetSize)\n{\n    if (inputCode == XCP_PROTO_SUCCESS) {\n        XcpStartStopDaqListResPacketFrame *frame = (XcpStartStopDaqListResPacketFrame *)packet;\n\n        /* Fill the response */\n        frame->PID      = XCP_PID_RES;\n        frame->firstPid = xcpDynamicDaqLists.daq[startStopDaqListId].firstPid;\n    }\n    else {\n        genericOutputPacketHandler(inputCode, packet, packetSize);\n    }\n}\n\n/*****************************************************************************\n    XCP START_STOP_SYNCH\n******************************************************************************/\nstatic XcpProtoErrorCode startStopSynchInputPacketHandler(void   *msgBuffer,\n                                                          size_t  xcpPacketOffset,\n                                                          size_t *outputPacketSize)\n{\n    XcpProtoErrorCode protoErrorCode = XCP_PROTO_SUCCESS;\n    uint8_T *packet = (uint8_T *)msgBuffer + xcpPacketOffset;\n    XcpStartStopSynchCmdPacketFrame *frame = (XcpStartStopSynchCmdPacketFrame *)packet;\n    boolean_T ok = false;\n    boolean_T locked = false;\n    int32_T i = 0;\n\n    /* Check if requested mode is valid */\n    ok = isValidStartStopSynchMode((uint8_T)frame->mode);\n    XCP_INPUT_PKT_ERROR_IF(!ok, XCP_PROTO_MODE_NOT_VALID,\n        (\"START_STOP_SYNCH: invalid mode %d selected \\n\", frame->mode));\n\n    /* Check if the DAQ Lists are available */\n    ok = (xcpDynamicDaqLists.daq != NULL) && (xcpDynamicDaqLists.daqCount > 0);\n    XCP_INPUT_PKT_ERROR_IF(!ok, XCP_PROTO_OUT_OF_RANGE,\n        (\"START_STOP_SYNCH: DAQ lists not available\\n\"));\n\n    /* Everything is fine -> proceed and try to change the DAQ list status */\n\n    /* Need to get the lock to guarantee that they are all done in the same cycle */\n    locked = xcpDaqLock();\n\n    if (locked) {\n        XcpErrorCode createPoolError = XCP_SUCCESS;\n        uint16_T daqListId = 0;\n\n        switch (frame->mode) {\n        case XCP_DAQ_LIST_STOP_ALL:\n            for (i = 0; i < xcpDynamicDaqLists.daqCount; i++) {\n                if (xcpDynamicDaqLists.daq[i].status != XCP_DAQ_INIT) {\n                    XCP_PRINTF(\"START_STOP_SYNCH: stopping DAQ list %d\\n\", i);\n                    xcpDynamicDaqLists.daq[i].status = XCP_DAQ_STOPPED;\n                }\n            }\n\n            /* update status as there are no more active DAQ list */\n            xcpStatusSet(XCP_CONNECTED);\n            xcpSessionStatusClearMask(XCP_SESSION_DAQ_RUNNING_MASK);\n            break;\n\n        case XCP_DAQ_LIST_START_SELECTED:\n            /* xcpDynamicDaqLists.daq[i].poolId is initialized with\n               XCP_INVALID_POOL_ID in allocDaqInputPacketHandler.\n\n               Allocate a reserved memory pool for the DAQ list, if needed. */\n            for (i = 0; (i < xcpDynamicDaqLists.daqCount) && (createPoolError == XCP_SUCCESS); i++) {\n                if ((xcpDynamicDaqLists.daq[i].status == XCP_DAQ_SELECTED) && \n                    (xcpDynamicDaqLists.daq[i].poolId == XCP_INVALID_POOL_ID)) {\n                    if (IS_USING_CUSTOM_POOL(xcpDynamicDaqLists.daq[i].eventId)) {\n                        /* Allocate custom pool if custom memory functions are\n                           provided for this eventId */\n                        createPoolError = xcpMemCustomPoolCreate(\n                                              xcpEventCustomMemoryManager.allocHandler,\n                                              xcpEventCustomMemoryManager.freeHandler,\n                                              &xcpDynamicDaqLists.daq[i].poolId);\n                    } else if (i < XCP_MEM_DAQ_RESERVED_POOLS_NUMBER\n                        && xcpDynamicDaqLists.daq[i].eventId < XCP_MIN_EVENT_NO_RESERVED_POOL) {\n                        /* Create a reserved memory pool, if not already created */\n                        createPoolError = createDaqReservedPool(&xcpDynamicDaqLists.daq[i]);\n                        xcpDynamicDaqLists.daq[i].currentSample = 0;\n                        daqListId = (uint16_T) i;\n                    }\n                }\n            }\n\n            if (createPoolError == XCP_SUCCESS) {\n                /* If the allocation went well for all the DAQ lists, start them */\n                for (i = 0; (i < xcpDynamicDaqLists.daqCount); i++) {\n                    if (xcpDynamicDaqLists.daq[i].status == XCP_DAQ_SELECTED) {\n                        XCP_PRINTF(\"START_STOP_SYNCH: starting DAQ list %d\\n\", i);\n\n                        xcpDynamicDaqLists.daq[i].status = XCP_DAQ_STARTED;\n                        xcpStatusSet(XCP_SYNC_DATA_TRANSFER);\n                        xcpSessionStatusSetMask(XCP_SESSION_DAQ_RUNNING_MASK);\n                    }\n                }\n            }\n            break;\n\n        case XCP_DAQ_LIST_STOP_SELECTED:\n            for (i = 0; i < xcpDynamicDaqLists.daqCount; i++) {\n                if (xcpDynamicDaqLists.daq[i].status == XCP_DAQ_SELECTED) {\n                    XCP_PRINTF(\"START_STOP_SYNCH: stopping DAQ list %d\\n\", i);\n                    xcpDynamicDaqLists.daq[i].status = XCP_DAQ_STOPPED;\n                }\n            }\n\n            if (noActiveDaqLists()) {\n                /* update status if this was the only active DAQ list */\n                xcpStatusSet(XCP_CONNECTED);\n                xcpSessionStatusClearMask(XCP_SESSION_DAQ_RUNNING_MASK);\n            }\n            break;\n        }\n\n        /* Unlock all the events */\n        xcpDaqUnlock();\n\n        (void)daqListId; /* to suppress unused-but-set-variable when XCP_PRINTF is empty */\n        XCP_INPUT_PKT_ERROR_IF(createPoolError != XCP_SUCCESS, XCP_PROTO_MEMORY_OVERFLOW,\n                (\"START_STOP_SYNCH: cannot allocate reserved memory pool for the DAQ list %d\\n\", daqListId));\n\n        *outputPacketSize = XCP_GENERIC_RES_PACKET_SIZE_IN_BYTES;\n    }\n\n    /* Error if the command cannot be executed as the processing of\n       at least one event was in progress */\n    XCP_INPUT_PKT_ERROR_IF(!locked, XCP_PROTO_BUSY,\n        (\"START_STOP_SYNCH: cannot be carried out as an event was processed\\n\"));\n\n    return protoErrorCode;\n}\n\n/*****************************************************************************\n    XCP GET DAQ PROCESSOR INFO\n******************************************************************************/\nstatic XcpProtoErrorCode getDaqProcessorInfoInputPacketHandler(void   *msgBuffer,\n                                                               size_t  xcpPacketOffset,\n                                                               size_t *outputPacketSize)\n{\n    XCP_UNUSED_PARAM(msgBuffer);\n    XCP_UNUSED_PARAM(xcpPacketOffset);\n\n    XCP_PRINTF(\"GET DAQ PROCESSOR INFO\\n\");\n\n    *outputPacketSize =  XCP_GET_DAQ_PROCESSOR_INFO_RES_PACKET_SIZE_IN_BYTES;\n\n    return XCP_PROTO_SUCCESS;\n}\n\nstatic void getDaqProcessorInfoOutputPacketHandler(XcpProtoErrorCode inputCode, void *packet, size_t packetSize)\n{\n    XcpGetDaqProcessorInfoResPacketFrame *frame = (XcpGetDaqProcessorInfoResPacketFrame *)packet;\n\n    XCP_UNUSED_PARAM(inputCode);\n    XCP_UNUSED_PARAM(packetSize);\n\n    /* Fill Get Daq Processor Info response */\n    XCP_MEMSET(frame, 0, sizeof(*frame));\n\n    frame->PID = XCP_PID_RES;\n    frame->daqProperties = XCP_DAQ_PROPERTIES_VALUE;\n    frame->maxDaq = XCP_MAX_DAQ;\n    frame->maxEventChannel = XCP_MAX_EVENT_CHANNEL;\n    frame->minDaq = XCP_MIN_DAQ;\n    frame->daqKeyByte = XCP_DAQ_KEY_VALUE;\n\n    XCP_PRINTF(\"* DAQ Properties:    %xH\\n\", frame->daqProperties);\n    XCP_PRINTF(\"* MAX_DAQ:           %d\\n\", frame->maxDaq);\n    XCP_PRINTF(\"* MAX_EVENT_CHANNEL: %d\\n\", frame->maxEventChannel);\n    XCP_PRINTF(\"* MIN_DAQ:           %d\\n\", frame->minDaq);\n    XCP_PRINTF(\"* Daq Key Byte:      %xH\\n\", frame->daqKeyByte);\n}\n\n/*****************************************************************************\n    XCP GET DAQ RESOLUTION INFO\n******************************************************************************/\nstatic XcpProtoErrorCode getDaqResolutionInfoInputPacketHandler(void   *msgBuffer,\n    size_t  xcpPacketOffset,\n    size_t *outputPacketSize)\n{\n    XCP_UNUSED_PARAM(msgBuffer);\n    XCP_UNUSED_PARAM(xcpPacketOffset);\n\n    XCP_PRINTF(\"GET DAQ RESOLUTION INFO\\n\");\n\n    *outputPacketSize = XCP_GET_DAQ_RESOLUTION_INFO_RES_PACKET_SIZE_IN_BYTES;\n\n    return XCP_PROTO_SUCCESS;\n}\n\nstatic void getDaqResolutionInfoOutputPacketHandler(XcpProtoErrorCode inputCode, void *packet, size_t packetSize)\n{\n    XcpGetDaqResolutionInfoResPacketFrame *frame = (XcpGetDaqResolutionInfoResPacketFrame *)packet;\n\n    XCP_UNUSED_PARAM(inputCode);\n    XCP_UNUSED_PARAM(packetSize);\n\n    /* Fill Get Daq Resolution Info response */\n    XCP_MEMSET(frame, 0, sizeof(*frame));\n\n    frame->PID = XCP_PID_RES;\n\n    /* @note in the current version the same limits apply for DAQ and STIM */\n    frame->daqOdtEntrySizeGranularity = XCP_ODT_ENTRY_SIZE_GRANULARITY;\n    frame->maxDaqOdtEntrySize = XCP_MAX_ODT_ENTRY_SIZE;\n    frame->stimOdtEntrySizeGranularity = XCP_ODT_ENTRY_SIZE_GRANULARITY;\n    frame->maxStimOdtEntrySize = XCP_MAX_ODT_ENTRY_SIZE;\n    frame->timestampMode = XCP_TIMESTAMP_MODE_VALUE;\n    frame->timestampTicks = XCP_TIMESTAMP_TICKS;\n\n    XCP_PRINTF(\"* DAQ ODT Entry size granularity:   %d\\n\",  frame->daqOdtEntrySizeGranularity);\n    XCP_PRINTF(\"* Max DAQ ODT Entry size:           %d\\n\",  frame->maxDaqOdtEntrySize);\n    XCP_PRINTF(\"* STIM ODT Entry size granularity:  %d\\n\",  frame->stimOdtEntrySizeGranularity);\n    XCP_PRINTF(\"* Max STIM ODT Entry size:          %d\\n\",  frame->maxStimOdtEntrySize);\n    XCP_PRINTF(\"* Timestamp Mode =                  %xH\\n\", frame->timestampMode);\n    XCP_PRINTF(\"* Timestamp Ticks =                 %d\\n\",  frame->timestampTicks);\n}\n\n/*****************************************************************************\n    XCP FREE_DAQ\n******************************************************************************/\nstatic XcpProtoErrorCode freeDaqInputPacketHandler(void   *msgBuffer,\n                                                   size_t  xcpPacketOffset,\n                                                   size_t *outputPacketSize)\n{\n    XcpProtoErrorCode protoErrorCode = XCP_PROTO_SUCCESS;\n    boolean_T ok = false;\n\n    XCP_UNUSED_PARAM(msgBuffer);\n    XCP_UNUSED_PARAM(xcpPacketOffset);\n\n    XCP_PRINTF(\"FREE_DAQ: clearing existing dynamic DAQ lists\\n\");\n    ok = xcpResetDaqListStatus();\n\n    XCP_INPUT_PKT_ERROR_IF(!ok, XCP_PROTO_BUSY,\n        (\"FREE_DAQ: cannot be carried out as an event was processed\\n\"));\n\n    /* No DAQ lists are running -> XCP_SYNC_DATA_TRANSFER cannot be active anymore */\n    xcpStatusSet(XCP_CONNECTED);\n\n    /* Everything is fine -> send positive response */\n    *outputPacketSize = XCP_GENERIC_RES_PACKET_SIZE_IN_BYTES;\n\n    return protoErrorCode;\n}\n\n/*****************************************************************************\n    XCP ALLOC_DAQ\n******************************************************************************/\nstatic XcpProtoErrorCode allocDaqInputPacketHandler(void   *msgBuffer,\n                                                    size_t  xcpPacketOffset,\n                                                    size_t *outputPacketSize)\n{\n    XcpProtoErrorCode protoErrorCode = XCP_PROTO_SUCCESS;\n    uint8_T *packet = (uint8_T *)msgBuffer + xcpPacketOffset;\n    XcpAllocDaqCmdPacketFrame *frame = (XcpAllocDaqCmdPacketFrame *) packet;\n    int32_T daqCount = (uint16_T)frame->daqCount;\n    XcpDaq *daq = NULL;\n    boolean_T ok = false;\n    int i = 0;\n\n    /* Check if DAQ lists have already been allocated */\n    ok = xcpDynamicDaqLists.daq == NULL;\n    XCP_INPUT_PKT_ERROR_IF(!ok, XCP_PROTO_SEQUENCE_ERROR,\n        (\"ALLOC_DAQ: sequence error detected, DAQ lists already allocated\\n\"));\n\n    /* Check if the number of DAQ lists requested is supported */\n    ok = (daqCount > 0) && (daqCount <= (XCP_MAX_DAQ - XCP_MIN_DAQ));\n    XCP_INPUT_PKT_ERROR_IF(!ok, XCP_PROTO_OUT_OF_RANGE,\n        (\"ALLOC_DAQ: invalid number of DAQ lists (%d)\\n\", daqCount));\n\n    XCP_PRINTF(\"ALLOC_DAQ: allocating %d DAQ lists (%lu B)\\n\", daqCount, (unsigned long) ((size_t)daqCount * sizeof(XcpDaq)));\n\n    /* Proceed and allocate the DAQ lists */\n    daq = (XcpDaq *)xcpMemAlloc((size_t) daqCount * sizeof(XcpDaq));\n    XCP_INPUT_PKT_ERROR_IF(daq == NULL, XCP_PROTO_MEMORY_OVERFLOW,\n        (\"ALLOC_DAQ: not enough memory to allocate %d DAQ lists\\n\", daqCount));\n\n    XCP_MEMSET(daq, 0, (size_t)daqCount * sizeof(XcpDaq));\n\n    /* Make sure that the DAQ lists are available for use */\n    xcpDynamicDaqLists.daq = daq;\n    xcpDynamicDaqLists.daqCount = (uint16_T) daqCount;\n\n    for (i = 0; i < daqCount; i++) {\n        daq[i].poolId        = XCP_INVALID_POOL_ID;\n        daq[i].packedMode    = XCP_DAQ_DATA_NOT_PACKED;\n        daq[i].timestampMode = XCP_DAQ_SINGLE_TIMESTAMP_FIRST_SAMPLE;\n        daq[i].sampleCount   = 1;\n        daq[i].currentSample = 0;\n    }\n\n    *outputPacketSize = XCP_GENERIC_RES_PACKET_SIZE_IN_BYTES;\n\n    return protoErrorCode;\n}\n\n/*****************************************************************************\n    XCP ALLOC_ODT\n******************************************************************************/\nstatic XcpProtoErrorCode allocOdtInputPacketHandler(void   *msgBuffer,\n                                                    size_t  xcpPacketOffset,\n                                                    size_t *outputPacketSize)\n{\n    XcpProtoErrorCode protoErrorCode = XCP_PROTO_SUCCESS;\n    uint8_T *packet = (uint8_T *)msgBuffer + xcpPacketOffset;\n    XcpAllocOdtCmdPacketFrame *frame = (XcpAllocOdtCmdPacketFrame *)packet;\n    uint16_T daqListId = (uint16_T)frame->daqListId;\n    uint8_T  odtCount  = (uint8_T)frame->odtCount;\n    boolean_T ok = false;\n\n    /* Check if DAQ lists have already been allocated */\n    ok = (xcpDynamicDaqLists.daq != NULL);\n    XCP_INPUT_PKT_ERROR_IF(!ok, XCP_PROTO_SEQUENCE_ERROR,\n        (\"ALLOC_ODT: sequence error detected, DAQ lists not allocated\\n\"));\n\n    /* Check if the DAQ List Id is valid */\n    ok = (daqListId < xcpDynamicDaqLists.daqCount);\n    XCP_INPUT_PKT_ERROR_IF(!ok, XCP_PROTO_OUT_OF_RANGE,\n        (\"ALLOC_ODT: DAQ list id %d is out of range\\n\", daqListId));\n\n    /* Check if the number of ODTs is valid */\n    ok = (odtCount > 0) && (odtCount <= XCP_MAX_DAQ_ODT_NUMBER);\n    XCP_INPUT_PKT_ERROR_IF(!ok, XCP_PROTO_OUT_OF_RANGE,\n        (\"ALLOC_ODT: invalid number of ODT (%d) for DAQ list id %d\\n\", odtCount, daqListId));\n\n    /* Check if the ODTs have already been allocated */\n    ok = (xcpDynamicDaqLists.daq[daqListId].odt == NULL);\n    XCP_INPUT_PKT_ERROR_IF(!ok, XCP_PROTO_SEQUENCE_ERROR,\n        (\"ALLOC_ODT: sequence error detected, ODT already allocated\\n\"));\n\n    XCP_PRINTF(\"ALLOC_ODT: allocating %d ODTs in DAQ list %d (%lu B)\\n\",\n        odtCount, daqListId, (unsigned long)(odtCount * sizeof(XcpOdt)));\n\n    /* Everything is fine -> proceed and allocate the ODTs */\n    xcpDynamicDaqLists.daq[daqListId].odt = (XcpOdt *)xcpMemAlloc(odtCount * sizeof(XcpOdt));\n    XCP_INPUT_PKT_ERROR_IF(xcpDynamicDaqLists.daq[daqListId].odt == NULL, XCP_PROTO_MEMORY_OVERFLOW,\n        (\"ALLOC_ODT: not enough memory to allocate %d ODT in DAQ list %d\\n\", odtCount, daqListId));\n\n    XCP_MEMSET(xcpDynamicDaqLists.daq[daqListId].odt, 0, odtCount * sizeof(XcpOdt));\n\n    xcpDynamicDaqLists.daq[daqListId].odtCount = odtCount;\n\n    *outputPacketSize = XCP_GENERIC_RES_PACKET_SIZE_IN_BYTES;\n\n    return protoErrorCode;\n}\n\n/*****************************************************************************\n    XCP ALLOC_ODT_ENTRY\n******************************************************************************/\nstatic XcpProtoErrorCode allocOdtEntryInputPacketHandler(void   *msgBuffer,\n    size_t  xcpPacketOffset,\n    size_t *outputPacketSize)\n{\n    XcpProtoErrorCode protoErrorCode = XCP_PROTO_SUCCESS;\n    uint8_T *packet = (uint8_T *)msgBuffer + xcpPacketOffset;\n    XcpAllocOdtEntryCmdPacketFrame *frame = (XcpAllocOdtEntryCmdPacketFrame *)packet;\n    uint16_T daqListId       = (uint16_T)frame->daqListId;\n    uint8_T  odtId           = (uint8_T)frame->odtId;\n    uint8_T  odtEntriesCount = (uint8_T)frame->odtEntriesCount;\n    boolean_T ok = false;\n\n    /* Check if the DAQ lists have already been allocated */\n    ok = (xcpDynamicDaqLists.daq != NULL);\n    XCP_INPUT_PKT_ERROR_IF(!ok, XCP_PROTO_SEQUENCE_ERROR,\n        (\"ALLOC_ODT_ENTRY: sequence error detected, DAQ lists not allocated\\n\"));\n\n    /* Check if the DAQ List Id is valid */\n    ok = (daqListId < xcpDynamicDaqLists.daqCount);\n    XCP_INPUT_PKT_ERROR_IF(!ok, XCP_PROTO_OUT_OF_RANGE,\n        (\"ALLOC_ODT_ENTRY: DAQ list id %d is out of range\\n\", daqListId));\n\n    /* Check if the ODTs have already been allocated */\n    ok = (xcpDynamicDaqLists.daq[daqListId].odt != NULL);\n    XCP_INPUT_PKT_ERROR_IF(!ok, XCP_PROTO_SEQUENCE_ERROR,\n        (\"ALLOC_ODT_ENTRY: sequence error detected, ODTs not allocated\\n\"));\n\n    /* Check if the ODT Id is valid */\n    ok = (odtId < xcpDynamicDaqLists.daq[daqListId].odtCount);\n    XCP_INPUT_PKT_ERROR_IF(!ok, XCP_PROTO_OUT_OF_RANGE,\n        (\"ALLOC_ODT_ENTRY: ODT id %d is out of range\\n\", odtId));\n\n    /* Check if the ODT entries have already been allocated */\n    ok = (xcpDynamicDaqLists.daq[daqListId].odt[odtId].entry == NULL);\n    XCP_INPUT_PKT_ERROR_IF(!ok, XCP_PROTO_SEQUENCE_ERROR,\n        (\"ALLOC_ODT_ENTRY: sequence error detected, ODT Entries already allocated\\n\"));\n\n    /* Check if the number of ODT Entries is valid */\n    ok = (odtEntriesCount > 0);\n    XCP_INPUT_PKT_ERROR_IF(!ok, XCP_PROTO_OUT_OF_RANGE,\n        (\"ALLOC_ODT_ENTRY: invalid number of ODT entries (%d) for ODT %d in DAQ list %d\\n\", odtEntriesCount, odtId, daqListId));\n\n    XCP_PRINTF(\"ALLOC_ODT_ENTRY: allocating %d ODT Entries in DAQ list %d ODT %d (%lu B)\\n\", \n        odtEntriesCount, daqListId, odtId, (unsigned long)(odtEntriesCount * sizeof(XcpOdtEntry)));\n\n    /* Everything is fine -> proceed and allocate the ODT entries */\n    xcpDynamicDaqLists.daq[daqListId].odt[odtId].entry = (XcpOdtEntry *)xcpMemAlloc(odtEntriesCount * sizeof(XcpOdtEntry));\n\n    XCP_INPUT_PKT_ERROR_IF(xcpDynamicDaqLists.daq[daqListId].odt[odtId].entry == NULL, XCP_PROTO_MEMORY_OVERFLOW,\n        (\"ALLOC_ODT_ENTRY: not enough memory to allocate %d ODT in DAQ list %d ODT %d\\n\", odtEntriesCount, daqListId, odtId));\n\n    XCP_MEMSET(xcpDynamicDaqLists.daq[daqListId].odt[odtId].entry, 0, odtEntriesCount * sizeof(XcpOdtEntry));\n\n    xcpDynamicDaqLists.daq[daqListId].odt[odtId].entriesCount = odtEntriesCount;\n\n    *outputPacketSize = XCP_GENERIC_RES_PACKET_SIZE_IN_BYTES;\n\n    return protoErrorCode;\n}\n\n/*****************************************************************************\n    XCP LEVEL1 COMMAND\n******************************************************************************/\n\n/* The only supported Level 1 command is SET DAQ PACKED MODE */\nstatic XcpProtoErrorCode setDaqPackedModeInputPacketHandler(void   *msgBuffer,\n                                                            size_t  xcpPacketOffset,\n                                                            size_t *outputPacketSize)\n{\n    XcpProtoErrorCode protoErrorCode = XCP_PROTO_SUCCESS;\n    uint8_T *packet = (uint8_T *)msgBuffer + xcpPacketOffset;\n    XcpSetDaqPackedModeCmdPacketFrame *frame = (XcpSetDaqPackedModeCmdPacketFrame *)packet;\n    uint16_T daqListId        = (uint16_T) frame->daqListId;\n    uint8_T  daqPackedMode    = (uint8_T)  frame->daqPackedMode;\n    uint8_T  dpmTimestampMode = (uint8_T)  frame->dpmTimestampMode;\n    uint16_T dpmSampleCount   = (uint16_T) frame->dpmSampleCount;\n    boolean_T ok = true;\n\n    /* Check if the DAQ lists have already been allocated */\n    ok = (xcpDynamicDaqLists.daq != NULL);\n    XCP_INPUT_PKT_ERROR_IF(!ok, XCP_PROTO_SEQUENCE_ERROR,\n        (\"SET_DAQ_PACKED_MODE: sequence error detected, DAQ lists not allocated\\n\"));\n\n    /* Check if the DAQ List Id is valid */\n    ok = (daqListId < xcpDynamicDaqLists.daqCount);\n    XCP_INPUT_PKT_ERROR_IF(!ok, XCP_PROTO_OUT_OF_RANGE,\n        (\"SET_DAQ_PACKED_MODE: DAQ list id %d is out of range\\n\", daqListId));\n\n#if XCP_MEM_DAQ_RESERVED_POOLS_NUMBER > 0\n    /* DAQ Packed Mode is only supported for DAQ lists with a reserved memory pool */\n    ok = (daqListId < XCP_MEM_DAQ_RESERVED_POOLS_NUMBER);\n    XCP_INPUT_PKT_ERROR_IF(!ok, XCP_PROTO_MODE_NOT_VALID,\n        (\"SET_DAQ_PACKED_MODE: packed mode is not supported for DAQ list id %d, with no reserved memory pool\\n\", daqListId));\n#else\n    ok = false;\n    XCP_INPUT_PKT_ERROR_IF(!ok, XCP_PROTO_MODE_NOT_VALID,\n        (\"SET_DAQ_PACKED_MODE: packed mode is not supported for DAQ list id %d, with no reserved memory pool\\n\", daqListId));\n#endif\n\n    /* Check if the selected DAQ packed mode is valid. \n       Currently we only support event-grouped data packing */\n    ok = ((daqPackedMode == XCP_DAQ_DATA_NOT_PACKED) || \n          (daqPackedMode == XCP_DAQ_EVENT_GROUPED_PACKING));\n    XCP_INPUT_PKT_ERROR_IF(!ok, XCP_PROTO_MODE_NOT_VALID,\n        (\"SET_DAQ_PACKED_MODE: DAQ Packed mode %d is not supported\\n\", daqPackedMode));\n\n    /* Check if the selected DAQ Timestamp mode is valid. \n       Currently we only support single timestamp of the first sample */\n    ok = (dpmTimestampMode == XCP_DAQ_SINGLE_TIMESTAMP_FIRST_SAMPLE);\n    XCP_INPUT_PKT_ERROR_IF(!ok, XCP_PROTO_MODE_NOT_VALID,\n        (\"SET_DAQ_PACKED_MODE: DAQ Packed timestamp mode %d is not supported\\n\", dpmTimestampMode));\n\n    /* Check if the selected DAQ Packed sample count is valid. */\n    ok = ((daqPackedMode == XCP_DAQ_DATA_NOT_PACKED && (dpmSampleCount == 1)) ||\n         ((daqPackedMode != XCP_DAQ_DATA_NOT_PACKED) && (dpmSampleCount >= XCP_DAQ_PACKED_SAMPLE_COUNT_MIN)));\n    XCP_INPUT_PKT_ERROR_IF(!ok, XCP_PROTO_MODE_NOT_VALID,\n        (\"SET_DAQ_PACKED_MODE: DAQ Packed sample count %d is not supported.\\n\", dpmSampleCount));\n\n    /* Check that the DAQ list is not already running */\n    ok = !isActiveDaqList(daqListId);\n    XCP_INPUT_PKT_ERROR_IF(!ok, XCP_PROTO_DAQ_ACTIVE,\n        (\"SET_DAQ_PACKED_MODE: packed mode configuration cannot be changed if the DAQ is running.\\n\"));\n\n    /* Finally: select the new configuration */\n    XCP_PRINTF(\"SET_DAQ_PACKED_MODE: setting packed mode %d timestamp mode %d sample count %d\\n\", \n               daqPackedMode, dpmTimestampMode, dpmSampleCount);\n\n    xcpDynamicDaqLists.daq[daqListId].packedMode    = daqPackedMode;\n    xcpDynamicDaqLists.daq[daqListId].timestampMode = dpmTimestampMode;\n    xcpDynamicDaqLists.daq[daqListId].sampleCount   = dpmSampleCount;\n    xcpDynamicDaqLists.daq[daqListId].currentSample = 0;\n\n    *outputPacketSize = XCP_GENERIC_RES_PACKET_SIZE_IN_BYTES;\n\n    return protoErrorCode;\n}\n\nstatic XcpProtoErrorCode level1CommandInputPacketHandler(void  *msgBuffer,\n                                                        size_t  xcpPacketOffset,\n                                                        size_t *outputPacketSize)\n{\n    XcpProtoErrorCode protoErrorCode = XCP_PROTO_SUCCESS;\n    XcpLevel1CommandPacketFrame* command = (XcpLevel1CommandPacketFrame*) ((uint8_T *)msgBuffer + xcpPacketOffset);\n    boolean_T ok = (command->level1Code == XCP_DAQ_LEVEL1_CODE_SET_DAQ_PACKED_MODE);\n\n    XCP_INPUT_PKT_ERROR_IF(!ok, XCP_PROTO_CMD_UNKNOWN,\n        (\"DAQ LEVEL1 COMMAND: command code %d is not supported\\n\", command->level1Code));\n\n    /* The only supported Level 1 command is SET_DAQ_PACKED_MODE */\n    protoErrorCode = setDaqPackedModeInputPacketHandler(msgBuffer, xcpPacketOffset, outputPacketSize);\n\n    return protoErrorCode;\n}\n\n\n/** This table contains the list of supported Rx packets and the corresponding handlers */\nstatic const XcpPacketHandlers daqSupportedRxPacket[] =\n{\n    { XCP_PID_START_STOP_DAQ_LIST,     startStopDaqListInputPacketHandler,     startStopDaqListOutputPacketHandler },\n    { XCP_PID_START_STOP_SYNCH,        startStopSynchInputPacketHandler,       genericOutputPacketHandler },\n    { XCP_PID_GET_DAQ_PROCESSOR_INFO,  getDaqProcessorInfoInputPacketHandler,  getDaqProcessorInfoOutputPacketHandler},\n    { XCP_PID_GET_DAQ_RESOLUTION_INFO, getDaqResolutionInfoInputPacketHandler, getDaqResolutionInfoOutputPacketHandler },\n    { XCP_PID_SET_DAQ_PTR,             setDaqPtrInputPacketHandler,            genericOutputPacketHandler },\n    { XCP_PID_WRITE_DAQ,               writeDaqInputPacketHandler,             genericOutputPacketHandler },\n    { XCP_PID_SET_DAQ_LIST_MODE,       setDaqListModeInputPacketHandler,       genericOutputPacketHandler },\n    { XCP_PID_FREE_DAQ,                freeDaqInputPacketHandler,              genericOutputPacketHandler },\n    { XCP_PID_ALLOC_DAQ,               allocDaqInputPacketHandler,             genericOutputPacketHandler },\n    { XCP_PID_ALLOC_ODT,               allocOdtInputPacketHandler,             genericOutputPacketHandler },\n    { XCP_PID_ALLOC_ODT_ENTRY,         allocOdtEntryInputPacketHandler,        genericOutputPacketHandler },\n    { XCP_PID_LEVEL1_COMMAND,          level1CommandInputPacketHandler,        genericOutputPacketHandler }\n};\n\n\n\n/*****************************************************************************\n    XCP Packet Lookup Function for basic DAQ commands\n******************************************************************************/\n\n/* Default DAQ Packet Lookup function, supporting only basic commands\n   listed in the table above */\nstatic const XcpPacketHandlers* getPacket(XcpRxPidCode pid)\n{\n    return xcpFindPacket(pid, daqSupportedRxPacket,\n                         XCP_ELEMENTS_NUMBER(daqSupportedRxPacket));\n}\n\nstatic XcpPacketLookupFunction packetLookup = NULL;\n\n\n\n/*****************************************************************************\n    Public Functions (invoked within the Protocol Layer)\n******************************************************************************/\nvoid xcpDaqInit(void)\n{\n#if !defined(XCP_DAQ_LIST_INDEPENDENT_EVENT_LOCK) || (XCP_DAQ_LIST_INDEPENDENT_EVENT_LOCK == 0)\n    XCP_MUTEX_INIT(daqLock);\n#else\n    uint16_T i = 0;\n\n    /* Initialize Event locks */\n    for (i = 0; i < XCP_MAX_EVENT_DATA_NUMBER; i++) {\n        XCP_MUTEX_INIT(xcpEventData[i].lock);\n    }\n#endif\n\n    xcpRunningEventCounter = 0;\n    XCP_MEMSET(&xcpDynamicDaqLists, 0, sizeof(xcpDynamicDaqLists));\n\n    /* Initialize the packet lookup function to support only basic\n       DAQ commands */\n    xcpDaqSetPacketLookup(getPacket);\n\n    /* Initialize support for the extended list of DAQ commands\n       @note this may override the default Packet lookup function\n             by adding support for more (optional) commands */\n    xcpDaqExtendedInit();\n}\n\n\nXcpPacketLookupFunction xcpDaqGetPacketLookup(void)\n{\n    return packetLookup;\n}\n\n\nvoid xcpDaqSetPacketLookup(XcpPacketLookupFunction getPacket)\n{\n    packetLookup = getPacket;\n}\n\n/**\n Reset a DAQ list, deleting any partial packet associated with it. This can only happen if the DAQ\n list is using packed mode.\n*/\nstatic XcpErrorCode xcpResetDaq(uint16_T daqIndex) {\n    int i = 0;\n    XcpDaq *daq = NULL;\n\n    XCP_ERROR_IF(\n        xcpDynamicDaqLists.daq == NULL || xcpDynamicDaqLists.daqCount <= daqIndex,\n        XCP_INV_ARG,\n        \"xcpProcessDaq: invalid daqIndex\");\n\n    daq = &xcpDynamicDaqLists.daq[daqIndex];\n\n    /* Resetting only needs to do something if a DAQ list is using packed mode and has started\n        writing the packet */\n    if (!isDaqPackedModeEnabled(daqIndex) || daq->currentSample == 0) {\n        return XCP_SUCCESS;\n    }\n\n    for (i = 0; i < daq->odtCount; ++i) {\n        xcpMemFree(daq->odt[i].msgBuffer);\n    }\n\n    daq->currentSample = 0;\n\n    return XCP_SUCCESS;\n}\n\n/**\n Writes xcp data needed at the beginning of an XCP packet for the given ODT. `currentValuePtr` and\n `offsetBytes` are updated accordingly.\n @note The current implementation only supports absolute ODT number.\n*/\nstatic void daqWriteXCPDataForOdt(XcpDaq* daq, uint8_T odtNumber, uint32_T timestamp) {\n    XcpOdt *odt = &daq->odt[odtNumber];\n    uint8_T *packet = odt->currentValuePtr;\n\n#ifdef XCP_EMULATE_BYTE_ADDRESSABLE_TARGET\n    odt->offsetBytes = (XCP_IN_AG(XCP_ID_FIELD_SIZE)) % XCP_HARDWARE_ADDRESS_GRANULARITY_BYTES_NUMBER;\n#else\n    /* Dummy variable used when we are not emulating as BYTE addressable target */\n    odt->offsetBytes = 0;\n#endif\n\n    /* Fill the Identification Field first\n    @note this is hard-coded to support absolute ODT number at the moment */\n    *packet = (uint8_T)(daq->firstPid + odtNumber);\n    packet = XCP_HW_PTR_INCREMENT(packet, XCP_IN_AG(XCP_ID_FIELD_SIZE), odt->offsetBytes);\n\n    /* Add the timestamp for the first DTO\n    @note this is hard-coded to support timestamp size of 4 bytes */\n    if (IS_TIMESTAMP_REQUIRED(daq->mode, odtNumber)) {\n    #ifdef XCP_EMULATE_BYTE_ADDRESSABLE_TARGET\n        size_t srcOffsetBytes = 0;\n        xcpMemcpyByte(packet, odt->offsetBytes, &timestamp, srcOffsetBytes, XCP_IN_HW_BYTES(sizeof(timestamp)));\n    #else\n        XCP_MEMCPY(packet, &timestamp, sizeof(timestamp));\n    #endif\n\n        packet = XCP_HW_PTR_INCREMENT(packet, XCP_IN_AG(XCP_TIMESTAMP_SIZE + odt->offsetBytes), odt->offsetBytes);\n        odt->offsetBytes = XCP_HW_BYTE_OFFSET_UPDATE(odt->offsetBytes, XCP_IN_AG(XCP_TIMESTAMP_SIZE));\n    }\n    odt->currentValuePtr = packet;\n}\n\n/**\n Writes the value of the entries for the given ODT, at the memory pointed by `currentValuePtr` and\n `offsetBytes`, which are updated accordingly.\n*/\nstatic void odtWriteEntries(XcpOdt *odt) {\n    uint8_T entryIndex = 0;\n    uint8_T *packet = odt->currentValuePtr;\n\n    for (entryIndex = 0; entryIndex < odt->entriesCount; ++entryIndex) {\n        XcpOdtEntry *entry = &(odt->entry[entryIndex]);\n        uint8_T const* address = XCP_ADDRESS_GET_READ(entry->addressExtension, entry->address);\n\n        if (entry->bitOffset != 0xFF) {\n            /* Bitwise access has been selected */\n        #ifdef XCP_EMULATE_BYTE_ADDRESSABLE_TARGET\n            uint32_T dword;\n            uint8_T bitValue;\n            size_t srcOffsetBytes = XCP_BYTE_OFFSET_GET(entry->address);\n            xcpMemcpyByte(&dword, 0, address, srcOffsetBytes, 4);\n            bitValue = (uint8_T) ((dword & ((uint32_T)(1 << entry->bitOffset))) != 0);\n            xcpMemcpyByte(packet, odt->offsetBytes, &bitValue, 0, entry->size);\n        #else\n            uint32_T const* dword = (uint32_T const*)address;\n            *packet = (uint8_T) ((*dword & ((uint32_T)(1 << entry->bitOffset))) != 0);\n        #endif\n        }\n        else {\n            /* 'Normal' (non-bitwise) access has been selected */\n        #ifdef XCP_EMULATE_BYTE_ADDRESSABLE_TARGET\n            size_t srcOffsetBytes = XCP_BYTE_OFFSET_GET(entry->address);\n            xcpMemcpyByte(packet, odt->offsetBytes, address, srcOffsetBytes, entry->size);\n        #else\n            XCP_MEMCPY(packet, address, entry->size);\n        #endif\n        }\n\n        packet = XCP_HW_PTR_INCREMENT(packet, entry->size + odt->offsetBytes, odt->offsetBytes);\n        odt->offsetBytes = XCP_HW_BYTE_OFFSET_UPDATE(odt->offsetBytes, entry->size);\n    }\n\n    odt->currentValuePtr = packet;\n}\n\n/**\n Process a DAQ, allocate memory, write pid and timestamp if needed, and copies variables values in\n the XCP packet.\n */\nstatic XcpErrorCode xcpProcessDaq(uint16_T daqIndex, uint32_T timestamp, XcpTransportQueueType_T txQueue) {\n    XcpErrorCode errorCode = XCP_SUCCESS;\n    boolean_T error = false;\n    XcpDaq *daq = NULL;\n    uint8_T odtIndex = 0;\n    boolean_T daqPackedModeEnabled = false;\n    boolean_T transmitRequest = false;\n\n    XCP_ERROR_IF(\n        xcpDynamicDaqLists.daq == NULL || xcpDynamicDaqLists.daqCount <= daqIndex,\n        XCP_INV_ARG,\n        \"xcpProcessDaq: invalid daqIndex\");\n\n    daq = &xcpDynamicDaqLists.daq[daqIndex];\n\n    daqPackedModeEnabled = isDaqPackedModeEnabled(daqIndex);\n    /* In packed Mode we only want to transmit when the expected number of \n        samples has been reached */\n    transmitRequest = !daqPackedModeEnabled ||\n                                ((daq->currentSample + 1) == daq->sampleCount);\n\n    /* @note prescaler is not supported at the moment */\n    for (odtIndex = 0; (odtIndex < daq->odtCount) && !error; odtIndex++) {\n        XcpOdt *odt = &daq->odt[odtIndex];\n        size_t packetOffset = xcpTransportPacketOffset();\n        size_t msgBufferSize = 0;\n\n        /* when packed mode is active the allocation occurs at the first sample */\n        boolean_T requestNewMessageBuffer = !daqPackedModeEnabled || (daq->currentSample == 0);\n\n        if (requestNewMessageBuffer) {\n            /* Calculate the required XCP packet size */\n            odt->packetSize = odtPacketSize(daq, odtIndex);\n\n            /* Calculate the overall message buffer */\n            msgBufferSize = xcpTransportMsgBufferSize(odt->packetSize, XCP_DTO);\n\n            if (daq->poolId != XCP_INVALID_POOL_ID) {\n                /* A dedicated memory pool is available */\n                odt->msgBuffer = (uint8_T *)xcpMemAllocFromPool(daq->poolId, msgBufferSize);\n            } else {\n                /* No memory pool available, use the Main memory instead */\n                odt->msgBuffer = (uint8_T *)xcpMemAlloc(msgBufferSize);\n            }\n\n            if (odt->msgBuffer != NULL) {\n                /* Allocation went well, set current pointer to the beginning of the XCP packet */\n                odt->currentValuePtr = odt->msgBuffer + packetOffset;\n\n                /* let's fill the PID and timestamp field if required */\n                daqWriteXCPDataForOdt(daq, odtIndex, timestamp);\n\n            } else {\n                /* An issue occurred during the memory allocation */\n                error = true;\n                errorCode = XCP_NO_MEMORY;\n            }\n        }\n\n        if (!error && (odt->msgBuffer != NULL)) {\n            if (!IS_USING_CUSTOM_POOL(daq->eventId)) {\n                odtWriteEntries(odt);\n            }\n\n            if (transmitRequest) {\n                /* Send the response back to the Transport Layer */\n                /* Calculate the overall message buffer */\n                msgBufferSize = xcpTransportMsgBufferSize(odt->packetSize, XCP_DTO);\n\n                errorCode = xcpTransportTxPacketSet(txQueue,\n                                                    daqIndex,\n                                                    odt->msgBuffer, msgBufferSize,\n                                                    packetOffset, odt->packetSize);\n                if (errorCode != XCP_SUCCESS) {\n                    xcpMemFree(odt->msgBuffer);\n                }\n            }\n        }\n    }\n\n    daq->currentSample = (daq->currentSample + 1) % daq->sampleCount;\n\n    return errorCode;\n}\n\nXcpErrorCode xcpDaqEvent(XcpEventIdType eventId, uint32_T timestamp, boolean_T resetSamples)\n{\n    XcpErrorCode errorCode = XCP_SUCCESS;\n\n    /* The lock is used to protect against the concurrent execution of XCP commands\n    (within xcpRun()) that can modify the DAQ list data structures */\n    xcpDaqReadLock(eventId);\n\n    if ((xcpDynamicDaqLists.daq != NULL) && (xcpDynamicDaqLists.daqCount > 0)) {\n        uint16_T i = 0;\n        XcpDaq *daq = xcpDynamicDaqLists.daq;\n\n        for (i = 0; (i < xcpDynamicDaqLists.daqCount) && errorCode == XCP_SUCCESS; i++) {\n            if (!XCP_READ_BIT_VALUE(daq[i].mode, XCP_DAQ_MODE_DIRECTION_MASK) && /* it's a DAQ list */\n                (daq[i].status == XCP_DAQ_STARTED) &&                            /* it's running */\n                (daq[i].eventId == eventId)) {                                   /* and associated to this event */\n\n                boolean_T txReady = xcpTransportTxReady(XCP_TRANSPORT_TX_DEFAULT_QUEUE, i);\n                XcpTransportQueueType_T txQueue = txReady ? XCP_TRANSPORT_TX_DEFAULT_QUEUE :\n                                                            XCP_TRANSPORT_DEFERRED_TX_QUEUE;\n\n            #ifdef XCP_LOCKLESS_SYNC_DATA_TRANSFER_SUPPORT\n                if (txReady &&\n                    (daq[i].poolId != XCP_INVALID_POOL_ID)) {\n                    /* If the Tx queue is ready, it is safe to flush the free memory,\n                        so that the deferred free blocks become available for subsequent allocations */\n                    xcpMemReservedPoolFlushFreeMem(daq[i].poolId);\n                }\n            #endif\n\n                if (resetSamples) {\n                    errorCode = xcpResetDaq(i);\n                } else {\n                    errorCode = xcpProcessDaq(i, timestamp, txQueue);\n                }\n\n                if (txReady) {\n                /* Trigger the transmission of the packets that have been enqueued\n                    for this DAQ list */\n                    xcpTransportTxTrigger(XCP_TRANSPORT_TX_DEFAULT_QUEUE, i);\n                }\n\n            }\n        }\n    }\n\n    xcpDaqReadUnlock(eventId);\n\n    return errorCode;\n}\n\nXcpErrorCode xcpDaqEventsFlush(uint32_T timestamp)\n{\n    XcpErrorCode errorCode = XCP_SUCCESS;\n\n    XCP_UNUSED_PARAM(timestamp);\n\n    if (xcpDynamicDaqLists.daq != NULL) {\n        boolean_T locked = xcpDaqLock();\n\n        if (locked) {\n            XcpDaq  *daq = xcpDynamicDaqLists.daq;\n            int32_T  daqCount = xcpDynamicDaqLists.daqCount;\n            uint16_T i = 0;\n\n            for (i = 0; i < daqCount; i++) {\n                boolean_T daqPackedModeEnabled = isDaqPackedModeEnabled(i);\n\n                if (daqPackedModeEnabled &&\n                    (daq[i].status == XCP_DAQ_STARTED) &&\n                    (daq[i].currentSample > 0)) {\n                    \n                    boolean_T txReady = xcpTransportTxReady(XCP_TRANSPORT_TX_DEFAULT_QUEUE, i);\n                    XcpTransportQueueType_T txQueue = txReady ? XCP_TRANSPORT_TX_DEFAULT_QUEUE :\n                                                            XCP_TRANSPORT_DEFERRED_TX_QUEUE;\n                    uint16_T j = 0;\n\n                    for (j = 0; j < daq[i].odtCount; j++) {\n                        if (daq[i].odt[j].msgBuffer != NULL) {\n                            size_t msgBufferSize = xcpTransportMsgBufferSize(daq[i].odt[j].packetSize, XCP_DTO);\n                            size_t packetOffset = xcpTransportPacketOffset();\n                            uint8_T *packet = daq[i].odt[j].msgBuffer + packetOffset;\n                            size_t notInitializedDataSize = XCP_IN_HW_AG(daq[i].odt[j].packetSize) - \n                                                             ((size_t) (daq[i].odt[j].currentValuePtr - packet));\n\n                            XCP_MEMSET(daq[i].odt[j].currentValuePtr, 0, notInitializedDataSize);\n\n                            errorCode = xcpTransportTxPacketSet(txQueue,\n                                                                i,\n                                                                daq[i].odt[j].msgBuffer, msgBufferSize,\n                                                                packetOffset, daq[i].odt[j].packetSize);\n                            if (errorCode != XCP_SUCCESS) {\n                                xcpMemFree(daq[i].odt[j].msgBuffer);\n                            }\n\n                        }\n                    }\n\n                    daq[i].currentSample = 0;\n                }\n            }\n\n            xcpDaqUnlock();\n        } else {\n            errorCode = XCP_BUSY;\n        }\n    }\n\n    return errorCode;\n}\n\n\n\nboolean_T xcpDaqLock(void)\n{\n    boolean_T locked = true;\n#if !defined(XCP_DAQ_LIST_INDEPENDENT_EVENT_LOCK) || (XCP_DAQ_LIST_INDEPENDENT_EVENT_LOCK == 0)\n    locked = xcpDaqWriteLock(0);\n#else\n    XcpEventIdType i = 0;\n\n    for(i = 0; i < XCP_MAX_EVENT_DATA_NUMBER; i++) {\n        xcpDaqWriteLock(i);\n    }\n#endif\n    return locked;\n}\n\n\n/* Unlock DAQ list transmission */\nvoid xcpDaqUnlock(void)\n{\n#if !defined(XCP_DAQ_LIST_INDEPENDENT_EVENT_LOCK) || (XCP_DAQ_LIST_INDEPENDENT_EVENT_LOCK == 0)\n    xcpDaqWriteUnlock(0);\n#else\n    XcpEventIdType i = 0;\n\n    for(i = 0; i < XCP_MAX_EVENT_DATA_NUMBER; i++) {\n        /* Unlock in reverse order, to prevent deadlock */\n    \txcpDaqWriteUnlock(XCP_MAX_EVENT_DATA_NUMBER - 1 - i);\n    }\n#endif\n}\n\n\nboolean_T xcpResetDaqListStatus(void)\n{\n    boolean_T locked = true;\n\n    if (xcpDynamicDaqLists.daq != NULL) {\n        XcpDaq *daq = xcpDynamicDaqLists.daq;\n        int32_T  daqCount = xcpDynamicDaqLists.daqCount;\n\n        locked = xcpDaqLock();\n\n        if (locked) {\n            /* No events were processed, it's safe to remove the DAQ lists */\n            int32_T i = 0;\n            int32_T j = 0;\n\n            /* No events are currently running,\n               it's safe to remove the DAQ lists */\n            xcpDynamicDaqLists.daq = NULL;\n            xcpDynamicDaqLists.daqCount = 0;\n            xcpDynamicDaqLists.firstAvailableDaqPid = 0;\n            xcpDynamicDaqLists.firstAvailableStimPid = 0;\n            \n            /* Reset ID of the DAQ List selected by START_STOP_DAQ_LIST command */\n            startStopDaqListId = XCP_INVALID_DAQ_LIST_ID;\n\n            /* Let's release the locks */\n            xcpDaqUnlock();\n\n            /* Prepare the Transport Layer for subsequent connections\n               (by resetting the Frame Handler counters and deleting the\n               existing packets in TX/RX fifos) */\n            xcpTransportRestart();\n\n            /* Delete all the Dynamic DAQ data structures and\n               reserved  memory pools */\n            for (i = 0; i < daqCount; i++) {\n                if (IS_USING_CUSTOM_POOL(daq[i].eventId)) {\n                    xcpMemCustomPoolDestroy(daq[i].poolId);\n                } else if (i < XCP_MEM_DAQ_RESERVED_POOLS_NUMBER\n                 && daq[i].eventId < XCP_MIN_EVENT_NO_RESERVED_POOL) {\n                    destroyDaqReservedPool(&daq[i]);\n                }\n\n                if (daq[i].odt != NULL) {\n                    for (j = 0; j < daq[i].odtCount; j++) {\n                        if (daq[i].odt[j].entry != NULL) {\n                            xcpMemFree(daq[i].odt[j].entry);\n                        }\n                    }\n\n                    xcpMemFree(daq[i].odt);\n                }\n            }\n\n            xcpMemFree(daq);\n\n            xcpSessionStatusClearMask(XCP_SESSION_DAQ_RUNNING_MASK);\n        }\n    }\n\n    return locked;\n}\n\n\nvoid xcpDaqReset(void)\n{\n    xcpResetDaqListStatus();\n\n    /* reset support for the extended list of DAQ commands */\n    xcpDaqExtendedReset();\n\n    /* Restore the original value for the lookup function */\n    xcpDaqSetPacketLookup(NULL);\n\n#if !defined(XCP_DAQ_LIST_INDEPENDENT_EVENT_LOCK) || (XCP_DAQ_LIST_INDEPENDENT_EVENT_LOCK == 0)\n    XCP_MUTEX_INIT(daqLock);\n#else\n    {\n        uint16_T i = 0;\n\n        for (i = 0; i < XCP_MAX_EVENT_DATA_NUMBER; i++) {\n            XCP_MUTEX_INIT(xcpEventData[i].lock);\n        }\n    }\n#endif\n}\n\n\nXcpErrorCode xcpDaqSetCustomPoolMemoryManager(XcpEventIdType eventId, \n                                              XcpCustomAllocHandler allocHandler, \n                                              XcpCustomFreeHandler freeHandler)\n{\n    if (allocHandler == NULL || freeHandler == NULL) {\n        return XCP_INV_ARG;\n    }\n\n    xcpEventCustomMemoryManager.eventId = eventId;\n    xcpEventCustomMemoryManager.allocHandler = allocHandler;\n    xcpEventCustomMemoryManager.freeHandler = freeHandler;\n\n    return XCP_SUCCESS;\n}\n\n\nXcpErrorCode xcpDaqGetCustomPoolMemoryManager(XcpEventIdType *eventId,\n                                              XcpCustomAllocHandler *allocHandler,\n                                              XcpCustomFreeHandler *freeHandler)\n{\n    if (xcpEventCustomMemoryManager.eventId == XCP_DAQ_CUSTOM_MEMORY_INVALID_EVENT_ID) {\n        return XCP_NOT_INITIALIZED;\n    }\n    if (allocHandler == NULL || freeHandler == NULL) {\n        return XCP_INV_ARG;\n    }\n\n    *eventId = xcpEventCustomMemoryManager.eventId;\n    *allocHandler = xcpEventCustomMemoryManager.allocHandler;\n    *freeHandler = xcpEventCustomMemoryManager.freeHandler;\n\n    return XCP_SUCCESS;\n}\n\n\n#ifdef XCP_INTERNAL_DAQ_CONFIG_ACCESS_SUPPORT\n\nXcpErrorCode xcpDaqGetOdtEntries(XcpEventIdType eventId, \n                                 XcpDaqDirection direction, \n                                 XcpOdtEntry* entries,\n                                 size_t* entriesNumber,\n                                 size_t maxEntriesNumber)\n{\n    XcpErrorCode errorCode = XCP_SUCCESS;\n    XcpOdtEntry* currentEntry = entries;\n    size_t entriesCount = 0;\n    boolean_T memOverflow = false;\n\n    XCP_ERROR_IF(eventId >= XCP_MAX_EVENT_CHANNEL, XCP_INV_ARG, \"xcpDaqGetOdtEntries: invalid eventId\\n\");\n    XCP_ERROR_IF(direction != XCP_DIRECTION_DAQ, XCP_NOT_SUPPORTED, \"xcpDaqGetOdtEntries: direction not supported\\n\");\n    XCP_ERROR_IF(entries == NULL, XCP_INV_ARG, \"xcpDaqGetOdtEntries: invalid entries\\n\");\n    XCP_ERROR_IF(entriesNumber == NULL, XCP_INV_ARG, \"xcpDaqGetOdtEntries: invalid entriesNumber\\n\");\n    XCP_ERROR_IF(maxEntriesNumber == 0, XCP_INV_ARG, \"xcpDaqGetOdtEntries: invalid maxEntriesNumber\\n\");\n\n    /* Extract the ODT entries by navigating the whole DAQ List hierarchy */\n    if (xcpDynamicDaqLists.daq != NULL) {\n        uint16_T daqId = 0;\n        for (daqId = 0; (daqId < xcpDynamicDaqLists.daqCount) && !memOverflow; daqId++) {\n            XcpDaq *daq = &xcpDynamicDaqLists.daq[daqId];\n\n            if ((daq->eventId == eventId) &&\n                ((direction == XCP_DIRECTION_DAQ) &&\n                 !XCP_READ_BIT_VALUE(daq[daqId].mode, XCP_DAQ_MODE_DIRECTION_MASK)) &&\n                 isActiveDaqList(daqId)) {\n                /* only active DAQ lists are considered */\n                if (daq->odt != NULL) {\n                    uint8_T odtId = 0;\n\n                    for (odtId = 0; (odtId < daq->odtCount) && !memOverflow; odtId++) {\n                        XcpOdt *odt = &daq->odt[odtId];\n  \n                        if (odt->entry != NULL) {\n                            uint8_T entryId = 0;\n\n                            for (entryId = 0; (entryId < odt->entriesCount) && !memOverflow; entryId++) {\n                                XcpOdtEntry *odtEntry = &odt->entry[entryId];\n                                \n                                if (entriesCount < maxEntriesNumber) {\n                                    XCP_MEMCPY(currentEntry, odtEntry, sizeof(XcpOdtEntry));\n                                    currentEntry++;\n                                    entriesCount++;\n                                } else {\n                                    memOverflow = true;\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n    \n    /* update number of entries copied and error code */\n    *entriesNumber = entriesCount;\n    if (memOverflow) {\n        errorCode = XCP_NO_MEMORY;\n    }\n\n    return errorCode;\n}\n\n#endif /* XCP_INTERNAL_DAQ_CONFIG_ACCESS_SUPPORT */\n\n\n#ifndef XCP_DAQ_EXTENDED_SUPPORT\n\nvoid xcpDaqExtendedInit(void) {}\nvoid xcpDaqExtendedReset(void) {}\n\n#endif\n\n#endif\n"},{"name":"xcp_drv_rtiostream.c","type":"source","group":"legacy","path":"C:\\Program Files\\MATLAB\\R2023a\\toolbox\\coder\\xcp\\src\\target\\slave\\platform\\default","tag":"","groupDisplay":"Other files","code":"/*\n* Copyright 2016-2022 The MathWorks, Inc.\n*\n* File: xcp_drv_rtiostream.c\n*\n* Abstract:\n*  Implementation of XCP driver based on rtIOStream\n*/\n\n#include \"rtiostream.h\"\n#include \"xcp_common.h\"\n#include \"xcp.h\"\n#include \"xcp_drv.h\"\n\n#define INVALID_DRV_ID  -1\n\n/* Timeout expected for the reception of a packet, once the reception has started */\nstatic const uint32_T XCP_RECEIVE_PACKET_TIMEOUT_IN_MICROSECONDS  = 1000000L;  /* 1s */\n\n/* Delay before attempting the reception of new data */\nstatic const uint32_T XCP_RECEIVE_RETRY_TIME_IN_MICROSECONDS = 10L;  /* 10us */\n\n/* Timeout expected for the transmission of a packet, once the transmission has started */\nstatic const uint32_T XCP_SEND_PACKET_TIMEOUT_IN_MICROSECONDS = 2000000L;   /* 2s */\n\n/* Delay before attempting the transmission of new data */\nstatic const uint32_T XCP_SEND_RETRY_TIME_IN_MICROSECONDS = 10L;  /* 10us */\n\n\n/* According to the XCP standard, the XCP slave only supports the connection\n   with one XCP Master at a time. The active connection is identified by\n   a specific drvID */\nstatic int drvID = INVALID_DRV_ID;\n\n\n/* If set to true, force the xcpDrvSend and xcpDrvRecv APIs to be blocking */\nstatic boolean_T  forceBlocking = false;\n\n\nXcpErrorCode xcpDrvOpen(\n    int   argc,\n    void *argv[]\n    )\n{\n    XcpErrorCode errorCode = XCP_SUCCESS;\n\n    if (drvID != INVALID_DRV_ID) {\n        XCP_PRINTF(\"xcpDrvOpen: XCP driver already initialized\\n\");\n        return XCP_ERROR;\n    }\n\n    /* Open the actual communication channel */\n    drvID = rtIOStreamOpen(argc, argv);\n    if (drvID < 0) {\n        XCP_PRINTF(\"xcpDrvOpen: unable to open communication channel\\n\");\n        drvID = INVALID_DRV_ID;\n        errorCode = XCP_ERROR;\n    }\n\n    return errorCode;\n}\n\n\nXcpErrorCode xcpDrvIoctl(XcpDrvIoctlCommand cmd)\n{\n    XcpErrorCode errorCode = XCP_SUCCESS;\n\n    XCP_ERROR_IF((cmd != XCP_DRV_RESTORE_DEFAULT_BLOCKING_SETUP) &&\n                 (cmd != XCP_DRV_FORCE_BLOCKING), XCP_INV_ARG,\n                 \"xcpDrvIoctl: invalid command\\n\");\n\n    forceBlocking = (cmd == XCP_DRV_FORCE_BLOCKING);\n\n    return errorCode;\n}\n\n\nXcpErrorCode xcpDrvSend(const void *src, size_t size)\n{\n    int ret = RTIOSTREAM_NO_ERROR;\n    XcpErrorCode errorCode = XCP_SUCCESS;\n    size_t   sent = 0;\n    size_t sentBytesCounter = 0;\n    uint32_T elapsedTime = 0;\n    const uint8_T *dataPtr = NULL;\n    boolean_T done = false;\n\n    XCP_ERROR_IF(src == NULL, XCP_INV_ARG, \"xcpDrvSend: invalid src buffer\\n\");\n    XCP_ERROR_IF(size == 0, XCP_INV_ARG, \"xcpDrvSend: invalid size\\n\");\n    XCP_ERROR_IF(drvID == INVALID_DRV_ID, XCP_NOT_INITIALIZED, \"xcpDrvSend: XCP driver not initialized\\n\");\n\n    while (!done) {\n        dataPtr = (const uint8_T *)src + sentBytesCounter;\n        ret = rtIOStreamSend(drvID, dataPtr, (size - sentBytesCounter), &sent);\n\n        if (ret == RTIOSTREAM_NO_ERROR) {\n            if ((sent == 0) && (sentBytesCounter == 0) && !forceBlocking) {\n                /* This will only happen if the rtIOStreamSend function\n                   is non-blocking and we haven't started sending data yet */\n                errorCode = XCP_BUSY;\n            } else {\n                /* Send packet in progress, we need to complete it */\n                sentBytesCounter += sent;\n\n                done = (sentBytesCounter >= size) ;\n\n                if (!done) {\n                    if (elapsedTime >= XCP_SEND_PACKET_TIMEOUT_IN_MICROSECONDS) {\n                        errorCode = XCP_PKT_TX_TIMEOUT_ERROR;\n                    } else {\n                        XCP_SLEEP(0, XCP_SEND_RETRY_TIME_IN_MICROSECONDS);\n                        elapsedTime += XCP_SEND_RETRY_TIME_IN_MICROSECONDS;\n                    }\n                }\n            }\n        } else {\n            errorCode = XCP_ERROR;\n        }\n\n        done = done || (errorCode == XCP_BUSY) || (errorCode == XCP_ERROR) ||\n               (errorCode == XCP_PKT_TX_TIMEOUT_ERROR);\n    }\n\n    return errorCode;\n}\n\n\nXcpErrorCode xcpDrvRecv(void *dst, size_t size)\n{\n    int ret = RTIOSTREAM_NO_ERROR;\n    XcpErrorCode errorCode = XCP_SUCCESS;\n    size_t receivedBytesCounter = 0;\n    size_t received = 0;\n    uint32_T elapsedTime = 0;\n    uint8_T *dataPtr = NULL;\n    boolean_T done = false;\n\n    XCP_ERROR_IF(dst == NULL, XCP_INV_ARG, \"xcpDrvRecv: invalid src buffer\\n\");\n    XCP_ERROR_IF(size == 0, XCP_INV_ARG, \"xcpDrvRecv: invalid size\\n\");\n    XCP_ERROR_IF(drvID == INVALID_DRV_ID, XCP_NOT_INITIALIZED, \"xcpDrvRecv: XCP driver not initialized\\n\");\n\n    while (!done) {\n        dataPtr = (uint8_T *)dst + receivedBytesCounter;\n\n        ret = rtIOStreamRecv(drvID, dataPtr, (size - receivedBytesCounter), &received);\n        if (ret == RTIOSTREAM_NO_ERROR) {\n            if ((received == 0) && (receivedBytesCounter == 0) && !forceBlocking) {\n                /* This will only happen if the rtIOStreamRecv function\n                   is non-blocking and we haven't started receiving data yet */\n                errorCode = XCP_EMPTY;\n            } else {\n                /* Receive packet in progress, we need to complete it */\n                receivedBytesCounter += received;\n                done = (receivedBytesCounter >= size);\n\n                if (!done) {\n                    if (elapsedTime >= XCP_RECEIVE_PACKET_TIMEOUT_IN_MICROSECONDS) {\n                        errorCode = XCP_PKT_RX_TIMEOUT_ERROR;\n                    } else {\n                        XCP_SLEEP(0, XCP_RECEIVE_RETRY_TIME_IN_MICROSECONDS);\n                        elapsedTime += XCP_RECEIVE_RETRY_TIME_IN_MICROSECONDS;\n                    }\n                }\n            }\n        }\n        else {\n            errorCode = XCP_ERROR;\n        }\n        \n        done = done || (errorCode == XCP_EMPTY) || (errorCode == XCP_ERROR) ||\n               (errorCode ==  XCP_PKT_RX_TIMEOUT_ERROR);\n    }\n\n    return errorCode;\n}\n\n\nXcpErrorCode xcpDrvRecvUnknownSize(void *dst, size_t *size, size_t maxSize)\n{\n    int ret = RTIOSTREAM_NO_ERROR;\n    XcpErrorCode errorCode = XCP_SUCCESS;\n    size_t receivedBytes = 0;\n    uint8_T *dataPtr = NULL;\n\n    XCP_ERROR_IF(dst == NULL, XCP_INV_ARG, \"xcpDrvRecvUnknownSize: invalid dst buffer\\n\");\n    XCP_ERROR_IF(size == NULL, XCP_INV_ARG, \"xcpDrvRecvUnknownSize: invalid size pointer\\n\");\n    XCP_ERROR_IF(maxSize == 0, XCP_INV_ARG, \"xcpDrvRecvUnknownSize: invalid maxSize\\n\");\n    XCP_ERROR_IF(drvID == INVALID_DRV_ID, XCP_NOT_INITIALIZED, \"xcpDrvRecvUnknownSize: XCP driver not initialized\\n\");\n\n    dataPtr = (uint8_T *)dst;\n\n    ret = rtIOStreamRecv(drvID, dataPtr, maxSize, &receivedBytes);\n    if (ret == RTIOSTREAM_NO_ERROR) {\n        if (receivedBytes == 0) {\n            /* This will only happen if we haven't yet started receiving data */\n            errorCode = XCP_EMPTY;\n        }\n        else if (receivedBytes <= maxSize) {\n            /* Packet received. Hence, update the actual size */\n            *size = receivedBytes;\n            errorCode = XCP_SUCCESS;\n        }\n        else {\n            errorCode = XCP_ERROR;\n        }\n    }\n    else {\n        errorCode = XCP_ERROR;\n    }\n\n    return errorCode;\n}\n\n\nXcpErrorCode xcpDrvClose(void)\n{\n    int ret = RTIOSTREAM_NO_ERROR;\n    XcpErrorCode errorCode = XCP_SUCCESS;\n\n    if (drvID == INVALID_DRV_ID) {\n        XCP_PRINTF(\"xcpDrvClose: XCP driver already closed\\n\");\n        return XCP_SUCCESS; /* Nothing to do: just printing out a warning message*/\n    }\n\n    ret = rtIOStreamClose(drvID);\n\n    if (ret == RTIOSTREAM_NO_ERROR) {\n        drvID = INVALID_DRV_ID;\n        errorCode = XCP_SUCCESS;\n    }\n    else {\n        errorCode = XCP_ERROR;\n    }\n\n    return errorCode;\n}\n\n"},{"name":"xcp_ext_classic_trigger.c","type":"source","group":"legacy","path":"C:\\Program Files\\MATLAB\\R2023a\\toolbox\\coder\\xcp\\src\\target\\ext_mode\\src","tag":"","groupDisplay":"Other files","code":"/*\n * Copyright 2020-2022 The MathWorks, Inc.\n *\n * File: xcp_ext_classic_trigger.c\n *\n * Abstract:\n *  This file contains the implementation of the External Mode\n *  \"Classic Trigger\" logic.\n *\n */\n\n#include \"xcp_ext_classic_trigger.h\"\n#include \"xcp_ext_common.h\"\n\n#define EXTMODE_TRIG_BASE_RATE_EVENT_ID EXTMODE_BASE_RATE_EVENT_ID\n\n#define DEFAULT_XCP_CLASSIC_TRIGGER_DURATION 1000\n\n\n/* Global variables directly accessible by the XCP Master */\nextmodeEventId_T volatile xcpClassicTriggerEventId = 0;\n\nuint32_T volatile xcpClassicTriggerSignalAddress = 0;\nuint8_T volatile  xcpClassicTriggerSignalAddressExtension = 0;\n\nextmodeClassicTriggerSignal_T volatile xcpClassicTriggerLevel = 0;\n\nuint32_T volatile xcpClassicTriggerDuration = DEFAULT_XCP_CLASSIC_TRIGGER_DURATION;\nuint32_T volatile xcpClassicTriggerHoldOff  = 0;\nint32_T  volatile xcpClassicTriggerDelay    = 0;\n\nXcpClassicTriggerDirection volatile xcpClassicTriggerDirection = XCP_EXTMODE_TRIGGER_RISING;\n\n#if defined(EXTMODE_TRIG_ARMED_ON_START) && EXTMODE_TRIG_ARMED_ON_START == 0\nboolean_T volatile xcpClassicTriggerArmRequest = false;\n#else\n/* Classic Trigger is armed by default */\nboolean_T volatile xcpClassicTriggerArmRequest = true;\n#endif\n\nboolean_T volatile xcpClassicTriggerCancelRequest = false;\n\nXcpClassicTriggerSource volatile xcpClassicTriggerSource = XCP_EXTMODE_TRIGGER_MANUAL;\n\nXcpClassicTriggerMode volatile xcpClassicTriggerMode = XCP_EXTMODE_TRIGGER_NORMAL;\n\nXcpClassicTriggerStatus volatile xcpClassicTriggerStatus = XCP_EXTMODE_TRIGGER_UNARMED;\n\n\nXCP_STATIC extmodeClassicTriggerSignal_T xcpOldSignalValue = 0;\nXCP_STATIC boolean_T                     xcpOldSignalValueAvailable = false;\n\nXCP_STATIC XcpClassicTriggerSource       xcpOldClassicTriggerSource = XCP_EXTMODE_TRIGGER_MANUAL;\n\nXCP_STATIC boolean_T                     xcpTriggerEnabled = false;\nXCP_STATIC boolean_T                     xcpSignalTriggerFired = false;\nXCP_STATIC uint32_T                      xcpTriggerCount = 0;\n\nXCP_STATIC boolean_T                     xcpForcedTriggerEnabled = false;\nXCP_STATIC boolean_T                     xcpForceTriggerEnableRequest = false;\n\n/** The function is responsible for sampling the signal trigger value\n    and setting the xcpSignalTriggerFired boolean to true if\n    the trigger signal has the expected transition across the xcpClassicTriggerLevel.\n    The boolean will always be restored back to false by the base rate\n    when the event is acknowledged and the state transition completed.\n    The function is also setting xcpTriggerEnabled to true if no Delay is required. */\nstatic void sampleSignalTrigger(void)\n{\n    extmodeClassicTriggerSignal_T const* signal = (extmodeClassicTriggerSignal_T const*)\n                                            XCP_ADDRESS_GET_READ(xcpClassicTriggerSignalAddressExtension,\n                                                            xcpClassicTriggerSignalAddress);\n    if ((signal != NULL) &&\n       ((xcpClassicTriggerSignalAddressExtension != 0) ||\n        (xcpClassicTriggerSignalAddress != 0))) {\n        if ((xcpClassicTriggerStatus ==\tXCP_EXTMODE_TRIGGER_ARMED) &&\n            !xcpSignalTriggerFired) {\n            /* Read the new signal value */\n            extmodeClassicTriggerSignal_T signalValue = *signal;\n\n            if (xcpOldSignalValueAvailable) {\n                /* If the trigger is armed and not already fired,\n                   check for the expected transition */\n                boolean_T checkForRising =  (xcpClassicTriggerDirection == XCP_EXTMODE_TRIGGER_RISING) ||\n                                            (xcpClassicTriggerDirection == XCP_EXTMODE_TRIGGER_RISING_OR_FALLING);\n\n                boolean_T checkForFalling = (xcpClassicTriggerDirection == XCP_EXTMODE_TRIGGER_FALLING) ||\n                                            (xcpClassicTriggerDirection == XCP_EXTMODE_TRIGGER_RISING_OR_FALLING);\n\n                if (checkForRising &&\n                   (((signalValue >= xcpClassicTriggerLevel) && (xcpOldSignalValue <  xcpClassicTriggerLevel)) ||\n                    ((signalValue >  xcpClassicTriggerLevel) && (xcpOldSignalValue == xcpClassicTriggerLevel)))) {\n\n                    if (xcpClassicTriggerDelay == 0) {\n                        /* fire the event immediately if needed no Delay is required */\n                        xcpTriggerEnabled = true;\n                    }\n                    xcpSignalTriggerFired   = true; /* the transition from ARMED to FIRING is updated in base rate */\n                }\n                if (checkForFalling &&\n                   (((signalValue < xcpClassicTriggerLevel)  && (xcpOldSignalValue >= xcpClassicTriggerLevel)) ||\n                    ((signalValue == xcpClassicTriggerLevel) && (xcpOldSignalValue >  xcpClassicTriggerLevel)))) {\n\n                    if (xcpClassicTriggerDelay == 0) {\n                        /* fire the event immediately if needed no Delay is required */\n                        xcpTriggerEnabled = true;\n                    }\n                    xcpSignalTriggerFired   = true; /* the transition from ARMED to FIRING is updated in base rate */\n                }\n            }\n\n            /* Update the old signal value. Note: if we just fired, the sampling will start\n               next time the trigger is armed and therefore we reset xcpOldSignalValueAvailable */\n            xcpOldSignalValueAvailable = !xcpSignalTriggerFired;\n            xcpOldSignalValue = signalValue;\n        }\n    }\n}\n\n\n/** The function is executed in the base rate and it is responsible\n    for the handling of the triggering status transitions */\nstatic void updateTriggerStatus(void)\n{\n    /* Process user Arm/Cancel requests common to all states\n       and update the triggerFired variable (depending on the\n       active triggering source) */\n    boolean_T triggerFired = false;\n\n    if (xcpClassicTriggerStatus == XCP_EXTMODE_TRIGGER_UNARMED) {\n        /* This case deserves a separate handling\n           because we would like the transition to the ARMED status\n           to occur in the same cycle.\n           Since we are already UNARMED, any request to cancel \n           the trigger can be ignored */\n        xcpClassicTriggerCancelRequest = false;\n        xcpSignalTriggerFired = false;\n\n        if (xcpClassicTriggerArmRequest) {\n            /* Process arm request */\n            xcpClassicTriggerStatus = XCP_EXTMODE_TRIGGER_ARMED;\n            xcpClassicTriggerArmRequest = false;\n\n            /* If we are using MANUAL trigger, we want to start \n               firing the trigger event straightaway, e.g.\n               when the user selects ExtModeArmWhenConnect */\n            if (xcpClassicTriggerSource == XCP_EXTMODE_TRIGGER_MANUAL) {\n                triggerFired = true;\n            }\n        }\n    } else {\n        /* We are already armed, ignore any request to arm the trigger */\n        xcpClassicTriggerArmRequest = false;\n\n        if (xcpClassicTriggerCancelRequest) {\n            /* No matter what the Status is, a cancel request should\n               always bring the status to UNARMED.\n               We implement the transition here, to avoid code\n               duplication in the states. */\n            xcpTriggerEnabled = false;\n            xcpClassicTriggerStatus = XCP_EXTMODE_TRIGGER_UNARMED;\n            xcpClassicTriggerCancelRequest = false;\n        } else {\n            if (xcpClassicTriggerSource == XCP_EXTMODE_TRIGGER_MANUAL) {\n                /* when manual triggering is selected, we assume that\n                   the trigger event has always been fired when armed */\n                triggerFired = true;\n            } else {\n                /* when signal triggering is selected, we check the status\n                   of the xcpSignalTriggerFired (updated by the\n                   sampleSignalTrigger() logic */\n                triggerFired = xcpSignalTriggerFired;\n                xcpSignalTriggerFired = false;\n            }\n        }\n    }\n\n    /* Handle the remaining state transitions */\n    switch (xcpClassicTriggerStatus) {\n    case XCP_EXTMODE_TRIGGER_UNARMED:\n        if (xcpClassicTriggerArmRequest) {\n            /* Process arm request */\n            xcpClassicTriggerStatus = XCP_EXTMODE_TRIGGER_ARMED;\n            xcpClassicTriggerArmRequest = false;\n        }\n        break;\n\n    case XCP_EXTMODE_TRIGGER_ARMED:\n        if (triggerFired) {\n            if ((xcpClassicTriggerDelay > 0) &&\n                (xcpClassicTriggerSource == XCP_EXTMODE_TRIGGER_SIGNAL)) {\n                /* We need to postpone the enabling of the trigger\n                   by xcpClassicTriggerDelay base periods */\n                xcpTriggerCount = (uint32_T) xcpClassicTriggerDelay;\n                xcpClassicTriggerStatus = XCP_EXTMODE_TRIGGER_DELAYED;\n            } else {\n                /* Negative xcpClassicTriggerDelay are ignored.\n                   The parameter is also ignored if the xcpClassicTriggerSource\n                   is XCP_EXTMODE_TRIGGER_MANUAL\n                   If xcpClassicTriggerDelay is 0 we enable the trigger straight away */\n                if (xcpClassicTriggerDuration > 0) {\n                    xcpTriggerEnabled = true;\n                    xcpTriggerCount = xcpClassicTriggerDuration;\n                    xcpClassicTriggerStatus = XCP_EXTMODE_TRIGGER_FIRING;\n                } else {\n                    /* If duration is 0, we would never be able to send any data.\n                       This situation should be prevented on the host,\n                       we just handle it gracefully here, in case it happens */\n                    XCP_PRINTF(\"Invalid duration value (0) detected.\\n\");\n                    xcpTriggerEnabled = false;\n                    xcpClassicTriggerStatus = XCP_EXTMODE_TRIGGER_UNARMED;\n                }\n            }\n        }\n        break;\n\n    case XCP_EXTMODE_TRIGGER_FIRING:\n        /* Update the base rate counter */\n        if (xcpTriggerCount > 0) {\n            xcpTriggerCount--;\n        }\n\n        if (xcpTriggerCount == 0) {\n            /* Duration has expired */\n            if (xcpClassicTriggerMode == XCP_EXTMODE_TRIGGER_ONESHOT) {\n                /* In the one-shot scenario we just disable the trigger */\n                xcpTriggerEnabled = false;\n                xcpClassicTriggerStatus  = XCP_EXTMODE_TRIGGER_UNARMED;\n            } else {\n                /* In normal mode, we might have to handle the HoldOff and\n                   pause the triggering  */\n                if (xcpClassicTriggerHoldOff > 0) {\n                    xcpTriggerEnabled = false;\n                    xcpTriggerCount = xcpClassicTriggerHoldOff;\n                    xcpClassicTriggerStatus = XCP_EXTMODE_TRIGGER_HOLDING_OFF;\n                } else {\n                    if (triggerFired) {\n                        /* If the trigger has been fired, we start another duration\n                           straight away */\n                        xcpTriggerCount = xcpClassicTriggerDuration;\n                        xcpClassicTriggerStatus = XCP_EXTMODE_TRIGGER_FIRING;\n                    } else {\n                        /* We wait for the next trigger to be fired */\n                        xcpTriggerEnabled = false;\n                        xcpClassicTriggerStatus = XCP_EXTMODE_TRIGGER_ARMED;\n                    }\n                }\n            }\n        }\n        break;\n\n    case XCP_EXTMODE_TRIGGER_DELAYED:\n        /* Update the base rate counter */\n        if (xcpTriggerCount > 0) {\n            xcpTriggerCount--;\n        }\n\n        if (xcpTriggerCount == 0) {\n            /* Delay is over, we can enable the trigger now */\n            if (xcpClassicTriggerDuration > 0) {\n                xcpTriggerEnabled = true;\n                xcpTriggerCount = xcpClassicTriggerDuration;\n                xcpClassicTriggerStatus = XCP_EXTMODE_TRIGGER_FIRING;\n            } else {\n                /* If duration is 0, we would never be able to send any data.\n                   This situation should be prevented on the host,\n                   we just handle it gracefully here, in case it happens */\n                XCP_PRINTF(\"Invalid duration value (0) detected.\\n\");\n                xcpTriggerEnabled = false;\n                xcpClassicTriggerStatus = XCP_EXTMODE_TRIGGER_UNARMED;\n            }\n        }\n        break;\n\n    case XCP_EXTMODE_TRIGGER_HOLDING_OFF:\n        /* Update the base rate counter */\n        if (xcpTriggerCount > 0) {\n            xcpTriggerCount--;\n        }\n\n        if (xcpTriggerCount == 0) {\n            /* HoldOff time has expired */\n            if (triggerFired) {\n                /* If the trigger has been fired, we start another duration\n                   straight away */\n                if (xcpClassicTriggerDuration > 0) {\n                    xcpTriggerEnabled = true;\n                    xcpTriggerCount = xcpClassicTriggerDuration;\n                    xcpClassicTriggerStatus = XCP_EXTMODE_TRIGGER_FIRING;\n                } else {\n                    /* If duration is 0, we would never be able to send any data.\n                       This situation should be prevented on the host,\n                       we just handle it gracefully here, in case it happens */\n                    XCP_PRINTF(\"Invalid duration value (0) detected.\\n\");\n                    xcpTriggerEnabled = false;\n                    xcpClassicTriggerStatus = XCP_EXTMODE_TRIGGER_UNARMED;\n                }\n            } else {\n                /* We wait for the next trigger to be fired */\n                xcpClassicTriggerStatus = XCP_EXTMODE_TRIGGER_ARMED;\n            }\n        }\n        break;\n\n    default:\n        XCP_PRINTF(\"Invalid Trigger Status %d detected\\n\", xcpClassicTriggerStatus);\n        xcpTriggerEnabled = false;\n        xcpSignalTriggerFired = false;\n        xcpClassicTriggerCancelRequest = false;\n        xcpClassicTriggerStatus = XCP_EXTMODE_TRIGGER_UNARMED;\n    }\n}\n\n\n\nXcpErrorCode xcpExtModeClassicTriggerInit(void)\n{\n    xcpOldSignalValue = 0;\n    xcpOldSignalValueAvailable = false;\n\n    xcpOldClassicTriggerSource = xcpClassicTriggerSource;\n\n    xcpTriggerEnabled = false;\n    xcpSignalTriggerFired = false;\n    xcpTriggerCount = 0;\n\n    xcpClassicTriggerStatus  = XCP_EXTMODE_TRIGGER_UNARMED;\n\n    return XCP_SUCCESS;\n}\n\n\n/** The function returns true if the external mode event must be triggered */\nboolean_T xcpExtModeClassicTriggerEnabled(extmodeEventId_T eventId)\n{\n    if (eventId == EXTMODE_TRIG_BASE_RATE_EVENT_ID) {\n        /* Whenever a change of the xcpClassicTriggerSource is detected\n           the xcpClassicTriggerStatus is reset */\n        boolean_T triggerSrcChangeDetected = (xcpClassicTriggerSource != xcpOldClassicTriggerSource);\n        xcpOldClassicTriggerSource = xcpClassicTriggerSource;\n\n        if (triggerSrcChangeDetected) {\n            xcpTriggerEnabled     = false;\n            xcpSignalTriggerFired = false;\n            xcpTriggerCount       = 0;\n\n            xcpClassicTriggerStatus  = XCP_EXTMODE_TRIGGER_UNARMED;\n        }\n\n        /* If XCP_EXTMODE_TRIGGER_SIGNAL is selected we want to start\n           processing the Arm request (or the Hold-off expiration) \n           straightaway and carry out the state transition before \n           sampling for the first time */\n        if ((xcpClassicTriggerSource == XCP_EXTMODE_TRIGGER_SIGNAL)  &&\n            (((xcpClassicTriggerStatus == XCP_EXTMODE_TRIGGER_UNARMED) &&\n               xcpClassicTriggerArmRequest) ||\n             ((xcpClassicTriggerStatus == XCP_EXTMODE_TRIGGER_HOLDING_OFF) &&\n              (xcpTriggerCount == 1)))) {\n               xcpTriggerCount = 0;\n               xcpClassicTriggerArmRequest = false;\n               xcpClassicTriggerStatus = XCP_EXTMODE_TRIGGER_ARMED;\n        }\n    }\n\n    if ((xcpClassicTriggerSource == XCP_EXTMODE_TRIGGER_SIGNAL) &&\n        (eventId == xcpClassicTriggerEventId))  {\n        /* Since we are running at the correct eventID, sample the\n           trigger signal value to determine if the trigger signal\n           needs to be enabled.\n           Note: this will update the boolean straight away and request\n           the state transition (updated at the next base rate) */\n        sampleSignalTrigger();\n    }\n\n    if (eventId == EXTMODE_TRIG_BASE_RATE_EVENT_ID) {\n        /* update trigger status to fulfill user requests */\n        updateTriggerStatus();\n\n        /* If the base rate task has run, then reset the\n         * xcpForceTriggerEnableRequest flag.  The state machine\n         * is up to date. */\n        xcpForceTriggerEnableRequest = false;\n    } else if (xcpForceTriggerEnableRequest) {\n        return xcpForcedTriggerEnabled;\n    }\n\n    return xcpTriggerEnabled;\n}\n\n\n/** Reset External Mode classic triggering logic, by restoring the default status */\nXcpErrorCode xcpExtModeClassicTriggerReset(void)\n{\n    xcpOldSignalValue = 0;\n    xcpOldSignalValueAvailable = false;\n\n    xcpClassicTriggerStatus  = XCP_EXTMODE_TRIGGER_UNARMED;\n    xcpOldClassicTriggerSource = XCP_EXTMODE_TRIGGER_MANUAL;\n    xcpClassicTriggerEventId = 0;\n    xcpTriggerEnabled = false;\n    xcpSignalTriggerFired = false;\n    xcpTriggerCount = 0;\n    xcpForcedTriggerEnabled = false;\n    xcpForceTriggerEnableRequest = false;\n\n    xcpClassicTriggerSignalAddress = 0;\n    xcpClassicTriggerSignalAddressExtension = 0;\n\n    xcpClassicTriggerLevel    = 0;\n    xcpClassicTriggerDuration = DEFAULT_XCP_CLASSIC_TRIGGER_DURATION;\n    xcpClassicTriggerHoldOff  = 0;\n    xcpClassicTriggerDelay    = 0;\n\n    xcpClassicTriggerDirection = XCP_EXTMODE_TRIGGER_RISING;\n\n#if defined(EXTMODE_TRIG_ARMED_ON_START) && EXTMODE_TRIG_ARMED_ON_START == 0\n    xcpClassicTriggerArmRequest = false;\n#else\n/* Classic Trigger is armed by default */\n    xcpClassicTriggerArmRequest = true;\n#endif\n\n    xcpClassicTriggerCancelRequest = false;\n\n    xcpClassicTriggerSource = XCP_EXTMODE_TRIGGER_MANUAL;\n    xcpClassicTriggerMode = XCP_EXTMODE_TRIGGER_NORMAL;\n\n    return XCP_SUCCESS;\n}\n\n\n/** When Manual triggering is enabled, force output of xcpExtModeClassicTriggerEnabled to\n *  match pending Arm or Cancel request for all non-base rate events until requests are \n *  processed at the next base rate event.\n * \n *  In the concurrent execution workflow, it is used to avoid omission\n *  of logging data points if a non-base rate task completes\n *  before the base rate at t = 0.\n * \n *  This is a NO-OP when XCP_EXTMODE_TRIGGER_SIGNAL is active.\n */\nvoid xcpExtModeClassicTriggerForceEnableStatusUpdate(void) {\n    if (xcpClassicTriggerSource == XCP_EXTMODE_TRIGGER_MANUAL) {\n        if (xcpClassicTriggerArmRequest && !xcpClassicTriggerCancelRequest) {\n            /* Force xcpExtModeClassicTriggerEnabled to return true\n            * until the next base rate event. */\n            xcpForcedTriggerEnabled = true;\n            xcpForceTriggerEnableRequest = true;\n        } else if (xcpClassicTriggerCancelRequest & !xcpClassicTriggerArmRequest) {\n            xcpForcedTriggerEnabled = false;\n            xcpForceTriggerEnableRequest = true;\n        } else {\n            xcpForceTriggerEnableRequest = false;\n        }\n    }\n}\n"},{"name":"xcp_ext_common.c","type":"source","group":"legacy","path":"C:\\Program Files\\MATLAB\\R2023a\\toolbox\\coder\\xcp\\src\\target\\ext_mode\\src","tag":"","groupDisplay":"Other files","code":"/*\n * Copyright 2018-2021 The MathWorks, Inc.\n *\n * File: xcp_ext_common.c\n *\n * Abstract:\n *  This file contains the implementation of the common functionalities\n *  used within the XCP External Mode Platform Abstraction layer.\n *\n *  This includes the handling of absolute simulation time and the global\n *  variables to control the execution of the model on the target\n *  (and accessed remotely via XCP communication protocol).\n */\n#if !defined(INTEGER_CODE) || INTEGER_CODE == 0\n#include <float.h>         /* for DBL_EPSILON */\n#include <math.h>\n#endif\n\n#include \"xcp_ext_common.h\"\n#include \"xcp_ext_param.h\"\n#include \"xcp.h\"\n#include \"xcp_internal.h\"\n#include \"xcp_transport.h\"\n#include \"xcp_cfg.h\"\n\n#include \"rtw_extmode.h\"\n\n#ifdef XCP_CUSTOM_ADDRESS_TRANSLATION\nvoid xcpInitCustomAddressGet(void);\n#endif\n\n#ifndef EXTMODE_FLUSH_ALL_DATA_DELAY_TIME_IN_MICROSECONDS\n/* Dummy delay, that forces the background task to pause the execution\n   and reduces the packets transmission rate. \n   This is useful for host-based targets to prevent the saturation\n   of transmission buffers */\n#define EXTMODE_FLUSH_ALL_DATA_DELAY_TIME_IN_MICROSECONDS  10L  /* 10us */\n#endif\n\n\n/* XCP Master can 'directly' access these global variables, in order to control\n   the model state machine */\n\n#if defined(ON_TARGET_WAIT_FOR_START) && ON_TARGET_WAIT_FOR_START == 1\nboolean_T volatile xcpModelStartRequest = false;\n#else\nboolean_T volatile xcpModelStartRequest = true;\n#endif\nboolean_T volatile xcpModelStopRequest = false;\nXcpExtModeStatus volatile xcpModelStatus = XCP_EXTMODE_STATUS_RESET;\n\nuint32_T volatile xcpModelChecksum0   = 0;\nuint32_T volatile xcpModelChecksum1   = 0;\nuint32_T volatile xcpModelChecksum2   = 0;\nuint32_T volatile xcpModelChecksum3   = 0;\nuint32_T volatile xcpModelIntegerCode = 0;\n\n/* Global variable defined when a non-BYTE addressable target is\n   being emulated as a BYTE addressable target. Currently defined \n   only for WORD addressable targets (Eg.:C2000). But, can be\n   extended to DWORD addressable targets */\n#ifdef XCP_EMULATE_BYTE_ADDRESSABLE_TARGET\nuint8_T volatile xcpEmulateWordTargetAsByteTarget = 1;\n#endif\n\n#if defined(INTEGER_CODE) && INTEGER_CODE == 1\nextmodeSimulationTime_T volatile xcpExtmodeFinalSimulationTime = EXTMODE_SIMULATION_RUN_FOREVER;\n#else\nextmodeSimulationTime_T volatile xcpExtmodeFinalSimulationTime = EXTMODE_SIMULATION_TIME_NOT_INITIALIZED;\n#endif\n\nboolean_T               volatile xcpExtmodeSimulationComplete  = false;\n\n#if !defined(INTEGER_CODE) || INTEGER_CODE == 0\n/* Dummy double variable, required to obtain the size of double data type on the target \n   using the symbols parser. */\nextmodeDouble_T volatile xcpDummyDoubleVariable = (extmodeDouble_T) 0;\n#endif\n\n/* Definition of a dummy printf function */\nvoid xcp_void_printf(const char_T *fmt,...){UNUSED_PARAMETER(fmt);}\n\n\n#if (defined(INTEGER_CODE) && INTEGER_CODE == 1) || defined(XCP_EXTMODE_SIMULATION_TIME_IN_TICKS)\n\n/* The mutex is used to protect against the concurrent access to the global\n   variables (related to the simulation time) when xcpExtModeUpdateTime()\n   is executed by different threads.\n   In particular it guarantees that the state of the variables is updated\n   atomically and it is always consistent when the function is executed */\nstatic XCP_MUTEX_DEFINE(xcpExtModeLock);\n\n\nuint32_T xcpCurrentSimulationTimeInTicks[2] = {0};\n\n/* The variable contains the last value of model simulation time \n   received via extmodeEvent() for the Base Rate thread.\n   In particular, the extmodeSimulationTime_T represents absolute time \n   (in baserate ticks)\n   Note: xcpBaseRateSimulationTime is assumed to be monotonically increasing, \n         but a counter overflow could occur */\nXCP_STATIC extmodeSimulationTime_T xcpBaseRateSimulationTime = 0;\n\n/* When LifeSpan is short, the xcpBaseRateSimulationTime variable could \n  \"overflow earlier than expected\", as the generated code may use only \n  a 16bit counter to store the baserate ticks.\n\n  The purpose of xcpTicksCounterL is to convert the xcpBaseRateSimulationTime \n  into a \"normal\" 32bit variable (and it relies on the EXTMODE_MAX_BASE_RATE_SIMULATION_TIME\n  value to understand when the overflow is supposed to occur).\n\n  xcpTicksCounterL and xcpTicksCounterH are then used to obtain \n  the xcpCurrentSimulationTimeInTicks global tick counter */\nXCP_STATIC uint32_T xcpTicksCounterL = 0;\nXCP_STATIC uint32_T xcpTicksCounterH = 0;\n\n/* The variable contains the last value of simulation time converted into a 32 bit\n   value with XCP_TIMESTAMP_UNIT resolution. This variable is only updated when\n   base rate is executed */\nXCP_STATIC uint32_T xcpBaseRateSimulationTimestamp = 0;\n\n#else /* INTEGER_CODE == 0 */\n\nuint32_T xcpCurrentSimulationTimeInMs[2] = {0};\nXCP_STATIC extmodeSimulationTime_T xcpBaseRateSimulationTime = 0;\n\n#endif\n\n#ifndef XCP_BIG_ENDIAN\n\nXCP_STATIC void xcpCopyTimeValue(volatile uint32_T *dst, uint32_T lsb, uint32_T msb)\n{\n    dst[0] = lsb;\n    dst[1] = msb;\n}\n\n#else /* BIG ENDIAN*/\n\n#define XCP_BYTES_SWAP(value)    ((((value) >> 24) & 0x000000ff)| \\\n                                  (((value) >> 8)  & 0x0000ff00)| \\\n                                  (((value) << 8)  & 0x00ff0000)| \\\n                                  (((value) << 24) & 0xff000000))\n\nXCP_STATIC void xcpCopyTimeValue(volatile uint32_T *dst, uint32_T lsb, uint32_T msb)\n{\n    dst[0] = XCP_BYTES_SWAP(lsb);\n    dst[1] = XCP_BYTES_SWAP(msb);\n}\n\n#endif /* BIG ENDIAN*/\n\n\n#if (defined(INTEGER_CODE) && INTEGER_CODE == 1) || defined(XCP_EXTMODE_SIMULATION_TIME_IN_TICKS)\n\n/* Define the XCP_TIMESTAMP_UNITS_PER_MICROSECOND value based on the\n   selected XCP_TIMESTAMP_UNIT */\n#if (XCP_TIMESTAMP_UNIT == XCP_TIMESTAMP_UNIT_1US)\n#define XCP_TIMESTAMP_UNITS_PER_MICROSECOND     1\n#elif (XCP_TIMESTAMP_UNIT == XCP_TIMESTAMP_UNIT_10US)\n#define XCP_TIMESTAMP_UNITS_PER_MICROSECOND     10\n#elif (XCP_TIMESTAMP_UNIT == XCP_TIMESTAMP_UNIT_100US)\n#define XCP_TIMESTAMP_UNITS_PER_MICROSECOND     100\n#elif (XCP_TIMESTAMP_UNIT == XCP_TIMESTAMP_UNIT_1MS)\n#define XCP_TIMESTAMP_UNITS_PER_MICROSECOND     1000\n#elif (XCP_TIMESTAMP_UNIT == XCP_TIMESTAMP_UNIT_10MS)\n#define XCP_TIMESTAMP_UNITS_PER_MICROSECOND     10000\n#elif (XCP_TIMESTAMP_UNIT == XCP_TIMESTAMP_UNIT_100MS)\n#define XCP_TIMESTAMP_UNITS_PER_MICROSECOND     100000\n#elif (XCP_TIMESTAMP_UNIT == XCP_TIMESTAMP_UNIT_1S)\n#define XCP_TIMESTAMP_UNITS_PER_MICROSECOND     1000000\n#else\n#error \"Invalid XCP_TIMESTAMP_UNIT value. When Purely Integer code is selected, it must be greater than or equal to XCP_TIMESTAMP_UNIT_1US.\"\n#endif\n\n\nstatic extmodeSimulationTime_T xcpExtModeMaxBaseRateSimulationTime = EXTMODE_MAX_BASE_RATE_SIMULATION_TIME;\n\n\n/* Internal function that updates absolute simulation time variables:\n   - xcpCurrentSimulationTimeInTicks \n   - xcpBaseRateSimulationTime\n   - xcpBaseRateSimulationTimestamp\n   and detect if the simulation is actually complete\n   (by updating xcpExtmodeSimulationComplete variable)\n \n   The function returns the 32bit XCP Timestamp counter value \n   (in XCP_TIMESTAMP_UNITs) corresponding to the given newTime\n \n   Note: the newTime input represents the model simulation time in base rate ticks */\nstatic uint32_T updateTime(extmodeSimulationTime_T newTime, extmodeEventId_T eventId)\n{\n    uint32_T timestamp = 0;\n\n    XCP_MUTEX_LOCK(xcpExtModeLock);\n    \n    if (eventId == EXTMODE_BASE_RATE_EVENT_ID) {\n        /* Absolute time variables are only updated when \n           base rate thread is executed */\n        extmodeSimulationTime_T ticksIncrement;\n        extmodeSimulationTime_T newCounterTicks;\n\n        /* Detect increment (in ticks) */\n        if (newTime >= xcpBaseRateSimulationTime) {\n            ticksIncrement = newTime - xcpBaseRateSimulationTime;\n        } else {\n            ticksIncrement = newTime + EXTMODE_MAX_BASE_RATE_SIMULATION_TIME - xcpBaseRateSimulationTime + 1;\n        }\n    \n        /* Update xcpTicksCounterL and xcpTicksCounterH tick counters */\n        newCounterTicks = xcpTicksCounterL + ticksIncrement;\n    \n        if (newCounterTicks < xcpTicksCounterL) {\n            xcpTicksCounterH++;\n        }\n        xcpTicksCounterL = newCounterTicks;\n\n        /* Update absolute simulation time values */\n        xcpCopyTimeValue(xcpCurrentSimulationTimeInTicks, xcpTicksCounterL, xcpTicksCounterH);\n\n        /* Save last received base rate simulation time */\n        xcpBaseRateSimulationTime = newTime;\n    \n        /* Update the 32bit XCP Timestamp counter for the base rate, using 32bit unsigned integer arithmetic */\n        xcpBaseRateSimulationTimestamp += ticksIncrement * EXTMODE_STEP_SIZE_IN_MICROSECONDS * XCP_TIMESTAMP_UNITS_PER_MICROSECOND;\n\n        timestamp = xcpBaseRateSimulationTimestamp;\n        \n        /* Check if simulation is complete */\n        if ((xcpExtmodeFinalSimulationTime != EXTMODE_SIMULATION_RUN_FOREVER) &&\n            (xcpExtmodeFinalSimulationTime != EXTMODE_SIMULATION_TIME_NOT_INITIALIZED)) {\n            /* By default, assuming EXTMODE_SIMULATION_RUN_FOREVER */\n            xcpExtmodeSimulationComplete = (xcpTicksCounterL >= xcpExtmodeFinalSimulationTime);\n        }\n    } else {\n        /* For threads different from the base rate, if the execution is\n           really concurrent, the simulationTime value might be different \n           from xcpBaseRateSimulationTime (ahead or behind).\n           The resulting timestamp value is calculated starting from \n           xcpBaseRateSimulationTimestamp and adding/subtracting the \n           difference */\n        extmodeSimulationTime_T ticksIncrement = 0;\n        extmodeSimulationTime_T ticksDecrement = 0;\n        \n        if (xcpExtModeMaxBaseRateSimulationTime < MAX_extmodeSimulationTime_T) {\n            /* If the size of extmodeSimulationTime_T data type allows\n               the representation of numbers bigger than EXTMODE_MAX_BASE_RATE_SIMULATION_TIME\n               then the newTime value needs to be \"converted\" to just use the same\n               amount of bits as the Base Rate (ClockTick0)\n               Note: this happens for example when ClockTicks are uint16_T and\n               extmodeSimulationTime_T is uint32_T. If the first subrate is half\n               of the base rate then\n                   newTime = ClockTick1 * 2\n               and this time would end up being bigger than EXTMODE_MAX_BASE_RATE_SIMULATION_TIME */\n            newTime = newTime % (xcpExtModeMaxBaseRateSimulationTime + 1);\n        }\n\n        if (newTime >= xcpBaseRateSimulationTime) {\n            /* We need to identify one of the two cases:\n               - newTime is ahead of xcpBaseRateSimulationTime\n               - newTime is behind but an overflow occurred\n             */\n            ticksIncrement = newTime - xcpBaseRateSimulationTime;\n            ticksDecrement = xcpBaseRateSimulationTime + EXTMODE_MAX_BASE_RATE_SIMULATION_TIME - newTime + 1;\n\n            if (ticksDecrement <= ticksIncrement) {\n                /* Assuming that newTime is behind and an overflow has occurred */\n                ticksIncrement = 0;\n            } else {\n            \t/* assuming that newTime is ahead */\n                ticksDecrement = 0;\n            }\n        } else {\n            /* We need to identify one of the two cases:\n               - newTime is behind of xcpBaseRateSimulationTime\n               - newTime is ahead but an overflow occurred\n             */\n            ticksIncrement = newTime + EXTMODE_MAX_BASE_RATE_SIMULATION_TIME - xcpBaseRateSimulationTime + 1;\n            ticksDecrement = xcpBaseRateSimulationTime - newTime;\n\n            if (ticksDecrement <= ticksIncrement) {\n                /* Assuming that newTime is behind, as more likely */\n                ticksIncrement = 0;\n            } else {\n            \t/* assuming that newTime is ahead and an overflow has occurred */\n                ticksDecrement = 0;\n            }\n        }\n\n        if (ticksIncrement > 0) {\n            timestamp = xcpBaseRateSimulationTimestamp +\n                        (ticksIncrement * EXTMODE_STEP_SIZE_IN_MICROSECONDS * XCP_TIMESTAMP_UNITS_PER_MICROSECOND);\n        } else {\n            timestamp = xcpBaseRateSimulationTimestamp -\n                        (ticksDecrement * EXTMODE_STEP_SIZE_IN_MICROSECONDS * XCP_TIMESTAMP_UNITS_PER_MICROSECOND);\n        }\n    }\n\n    XCP_MUTEX_UNLOCK(xcpExtModeLock);\n    \n    return timestamp;\n}\n\n/* Update absolute simulation time variables\n   and detect if the simulation is actually complete\n\n   Note: the newTime input represents the current model simulation time */\nvoid xcpExtModeUpdateTime(extmodeSimulationTime_T newTime, extmodeEventId_T eventId)\n{\n    updateTime(newTime, eventId);\n}\n\n/* In addition to updating absolute simulation time variables\n   and detecting if the simulation is actually complete, \n   the function returns the 32bit XCP Timestamp counter value\n   (in XCP_TIMESTAMP_UNITs) corresponding to the given newTime\n\n   Note: the newTime input represents the model simulation time */\nuint32_T xcpExtModeGetUpdatedTimestamp(extmodeSimulationTime_T newTime, extmodeEventId_T eventId)\n{\n    return updateTime(newTime, eventId);\n}\n\n\n#ifdef XCP_TIMESTAMP_BASED_ON_SIMULATION_TIME\n\n/* Return value in XCP_TIMESTAMP_UNITs, based on the current model simulation time */\nuint32_T xcpGetTimestamp(void)\n{\n    uint32_T timestamp;\n\n    /* @note: theoretically the base thread could pre-preempt any thread during the\n       read operation. Since the read of a 32bit value may not be atomic\n       in some architectures we have to protect it with a mutex.\n       We may be able to remove this lock if we extend the Platform Abstraction Layer\n       to include atomic read operations */\n    XCP_MUTEX_LOCK(xcpExtModeLock);\n\n    timestamp = xcpBaseRateSimulationTimestamp;\n\n    XCP_MUTEX_UNLOCK(xcpExtModeLock);\n\n    return timestamp;\n}\n\n#endif /* XCP_TIMESTAMP_BASED_ON_SIMULATION_TIME */\n\n#else /* INTEGER_CODE == 0 */\n\n/* Define the XCP_TIMESTAMP_UNITS_PER_SECOND value based on the\n   selected XCP_TIMESTAMP_UNIT */\n#if (XCP_TIMESTAMP_UNIT == XCP_TIMESTAMP_UNIT_1NS)\n#define XCP_TIMESTAMP_UNITS_PER_SECOND          1e9\n#elif (XCP_TIMESTAMP_UNIT == XCP_TIMESTAMP_UNIT_10NS)\n#define XCP_TIMESTAMP_UNITS_PER_SECOND          1e8\n#elif (XCP_TIMESTAMP_UNIT == XCP_TIMESTAMP_UNIT_100NS)\n#define XCP_TIMESTAMP_UNITS_PER_SECOND          1e7\n#elif (XCP_TIMESTAMP_UNIT == XCP_TIMESTAMP_UNIT_1US)\n#define XCP_TIMESTAMP_UNITS_PER_SECOND          1e6\n#elif (XCP_TIMESTAMP_UNIT == XCP_TIMESTAMP_UNIT_10US)\n#define XCP_TIMESTAMP_UNITS_PER_SECOND          1e5\n#elif (XCP_TIMESTAMP_UNIT == XCP_TIMESTAMP_UNIT_100US)\n#define XCP_TIMESTAMP_UNITS_PER_SECOND          1e4\n#elif (XCP_TIMESTAMP_UNIT == XCP_TIMESTAMP_UNIT_1MS)\n#define XCP_TIMESTAMP_UNITS_PER_SECOND          1e3\n#elif (XCP_TIMESTAMP_UNIT == XCP_TIMESTAMP_UNIT_10MS)\n#define XCP_TIMESTAMP_UNITS_PER_SECOND          1e2\n#elif (XCP_TIMESTAMP_UNIT == XCP_TIMESTAMP_UNIT_100MS)\n#define XCP_TIMESTAMP_UNITS_PER_SECOND          1e1\n#elif (XCP_TIMESTAMP_UNIT == XCP_TIMESTAMP_UNIT_1S)\n#define XCP_TIMESTAMP_UNITS_PER_SECOND            1\n#elif (XCP_TIMESTAMP_UNIT == XCP_TIMESTAMP_UNIT_1PS)\n#define XCP_TIMESTAMP_UNITS_PER_SECOND         1e12\n#elif (XCP_TIMESTAMP_UNIT == XCP_TIMESTAMP_UNIT_10PS)\n#define XCP_TIMESTAMP_UNITS_PER_SECOND         1e11\n#elif (XCP_TIMESTAMP_UNIT == XCP_TIMESTAMP_UNIT_100PS)\n#define XCP_TIMESTAMP_UNITS_PER_SECOND         1e10\n#else\n#error \"invalid XCP_TIMESTAMP_UNIT value\"\n#endif\n\n\n/* Update absolute simulation time variable xcpCurrentSimulationTimeInMs\n   and detect if the simulation is actually complete\n   (by updating xcpExtmodeSimulationComplete variable)\n\n   The function returns the 32bit XCP Timestamp counter value\n   (in XCP_TIMESTAMP_UNITs) corresponding to the given newTime\n\n   Note: the newTime input represents the model simulation time in seconds */\nvoid xcpExtModeUpdateTime(extmodeSimulationTime_T newTime, extmodeEventId_T eventId)\n{\n    if (eventId == EXTMODE_BASE_RATE_EVENT_ID) {\n        /* Absolute time variables are only updated when base rate\n           thread is executed, no need to use any lock */\n        real_T   timeInMs = newTime * 1000.0;\n        uint32_T timeInMsL = (uint32_T)fmod(timeInMs, (extmodeSimulationTime_T) XCP_UINT32_MAX + 1);\n        uint32_T timeInMsH = 0;\n\n        if (timeInMs > XCP_UINT32_MAX) {\n            /* cast truncates, rounding to zero */\n            timeInMsH = (uint32_T)(timeInMs / XCP_UINT32_MAX);\n        }\n\n        /* Update absolute simulation time variables */\n        xcpCopyTimeValue(xcpCurrentSimulationTimeInMs, timeInMsL, timeInMsH);\n\n        /* Check if simulation is complete */\n        if ((xcpExtmodeFinalSimulationTime != EXTMODE_SIMULATION_RUN_FOREVER) &&\n            (xcpExtmodeFinalSimulationTime != EXTMODE_SIMULATION_TIME_NOT_INITIALIZED)) {\n            /* By default, assuming EXTMODE_SIMULATION_RUN_FOREVER */\n           xcpExtmodeSimulationComplete = (xcpExtmodeFinalSimulationTime - newTime) <\n                                          (newTime * (DBL_EPSILON));\n        }\n\n        /* Update the current simulation time */\n        xcpBaseRateSimulationTime = newTime;\n    }\n}\n\n/* In addition to updating absolute simulation time variables\n   and detecting if the simulation is actually complete, \n   the function returns the 32bit XCP Timestamp counter value\n   (in XCP_TIMESTAMP_UNITs) corresponding to the given newTime\n\n   Note: the newTime input represents the model simulation time */\nuint32_T xcpExtModeGetUpdatedTimestamp(extmodeSimulationTime_T newTime, extmodeEventId_T eventId)\n{\n    uint32_T timestamp = 0;\n\n    xcpExtModeUpdateTime(newTime, eventId);\n\n    /* Convert the newTime into the 32 bits XCP Timestamp counter, based on XCP configuration */\n    timestamp = (uint32_T)fmod(newTime * (extmodeSimulationTime_T) XCP_TIMESTAMP_UNITS_PER_SECOND + 0.5, \n                              (extmodeSimulationTime_T)XCP_UINT32_MAX + 1);\n\n    return timestamp;\n}\n\n\n#ifdef XCP_TIMESTAMP_BASED_ON_SIMULATION_TIME\n\n/* This function is supposed to return the value of the XCP Timestamp in XCP_TIMESTAMP_UNITs.\n   Specifically it is invoked within the xcpEvent().\n   When XCP_TIMESTAMP_BASED_ON_SIMULATION_TIME is defined, both extmodeEvent() and \n   rtExtModeUpload() use xcpEventExternalTimestamp() instead, so we should never hit this function.\n   However we need to provide a dummy implementation as the function is required by the \n   Platform Abstraction Layer. */\nuint32_T xcpGetTimestamp(void)\n{\n    return 0;\n}\n\n#endif /* XCP_TIMESTAMP_BASED_ON_SIMULATION_TIME */\n\n#endif /* INTEGER_CODE == 1 */\n\n\nuint32_T xcpExtModeGetSimulationTime(void)\n{  \n#ifdef XCP_TIMESTAMP_BASED_ON_SIMULATION_TIME\n    /* Even if not thread-safe, this implementation has been added for backward compatibility \n       as Code Execution Profiling was invoking the xcpEvent() API directly */\n    return xcpExtModeGetUpdatedTimestamp(xcpBaseRateSimulationTime, EXTMODE_BASE_RATE_EVENT_ID);\n#else\n    return 0;\n#endif\n}\n\n\nXcpErrorCode xcpExtModeInit(void)\n{\n    int_T parNumber = 0;\n    void **parList = NULL;\n    XcpErrorCode errorCode = XCP_SUCCESS;\n    \n#if !defined(INTEGER_CODE) || INTEGER_CODE == 0\n    /* Use dummy variable to prevent optimization in some compilers */\n    xcpDummyDoubleVariable = (extmodeDouble_T) 0;\n#endif\n\n#if defined(INTEGER_CODE) && INTEGER_CODE == 1\n    XCP_MUTEX_INIT(xcpExtModeLock);\n#endif\n\n#ifdef XCP_CUSTOM_ADDRESS_TRANSLATION\n    xcpInitCustomAddressGet();\n#endif\n\n    /* Retrieve XCP Transport Layer initialization parameters */\n    xcpTransportGetInitParameters(&parNumber, &parList);\n\n    /* Initialize XCP Transport Layer */\n    errorCode = xcpTransportInit(parNumber, parList);\n    if (errorCode != XCP_SUCCESS) {\n        XCP_PRINTF(\"xcpExtModeInit: xcpTransportInit error\\n\");\n        return errorCode;\n    }\n\n    /* Retrieve XCP Protocol Layer initialization parameters */\n    xcpGetInitParameters(&parNumber, &parList);\n\n    /* Initialize XCP Protocol layer */\n    errorCode = xcpInit(parNumber, parList);\n    if (errorCode != XCP_SUCCESS) {\n        XCP_PRINTF(\"xcpExtModeInit: xcpInit error: code %d\\n\", errorCode);\n    }\n\n    return errorCode;\n}\n\n\nXcpErrorCode xcpExtModeRunBackground(boolean_T flushAllData)\n{\n    XcpErrorCode errorCode = XCP_SUCCESS;\n    boolean_T done = false;\n\n    /* Add a dummy delay, that forces the task to pause the execution\n       (leaving the 'running' state). This gives Simulink the opportunity\n       to run when connecting to host-based targets in External Mode */\n    XCP_SLEEP(0, 0);\n\n    do {\n        boolean_T dataAvailable = false;\n\n        /* Retrieve a new Rx packet from interface */\n        errorCode = xcpTransportRx();\n\n        if ((errorCode != XCP_SUCCESS) && (errorCode != XCP_EMPTY)) {\n            XCP_PRINTF(\"xcpExtModeRunBackground: xcpTransportRx error, code %d\\n\", errorCode);\n            done = true;\n        } else {\n            dataAvailable = dataAvailable || (errorCode != XCP_EMPTY);\n        }\n\n        if (!done) {\n            /* Process it within the protocol layer.\n               By checking the return code value, diagnostic info on\n               XCP packet processing can be collected.\n               Every run corresponds to the processing of one single XCP packet */\n            errorCode = xcpRun();\n\n            if ((errorCode != XCP_SUCCESS) && (errorCode != XCP_EMPTY)) {\n                XCP_PRINTF(\"xcpExtModeRunBackground: xcpRun error, code %d\\n\", errorCode);\n                done = true;\n            } else {\n                dataAvailable = dataAvailable || (errorCode != XCP_EMPTY);\n            }\n        }\n\n        if (!done) {\n            /* Send one of the pending Tx packets over the network */\n            errorCode = xcpTransportTx();\n            if ((errorCode != XCP_SUCCESS) && (errorCode != XCP_EMPTY)) {\n                XCP_PRINTF(\"xcpExtModeRunBackground: xcpTransportTx error, code %d\\n\", errorCode);\n                done = true;\n            } else {\n                dataAvailable = dataAvailable || (errorCode != XCP_EMPTY);\n            }\n        }\n\n        if (flushAllData) {\n#if EXTMODE_FLUSH_ALL_DATA_DELAY_TIME_IN_MICROSECONDS > 0\n            /* Dummy delay, that forces the background task to pause the execution\n               and reduces the packets transmission rate, for host-based targets. */\n            XCP_SLEEP(0, EXTMODE_FLUSH_ALL_DATA_DELAY_TIME_IN_MICROSECONDS);\n#endif\n            /* The xcpExtModeRunBackground will continue to process packets until\n               the TX and RX queues are empty or an error occurred. */\n            done = done || !dataAvailable;\n        } else {\n            /* The xcpExtModeRunBackground will only carry out one iteration and then return.\n               The remaining packets will be processed at the next round. */\n            done = true;\n        }\n    } while (!done);\n\n    return errorCode;\n}\n\n\nXcpErrorCode xcpExtModeReset(void)\n{\n    XcpErrorCode errorCode = XCP_SUCCESS;\n    extmodeRealTime_T elapsedTime;\n    XcpStatus status;\n\n    if (xcpExtmodeSimulationComplete) {\n        /* When DAQ Packed Mode is enabled, if we reached the nominal end of the\n           simulation we trigger the transmission of a packet containing the samples \n           received so far. The trailing '0's will be removed and not displayed\n           in the output of the simulation */\n        xcpPackedModeEventsFlush(0);\n    }\n\n    /* Wait for the XCP master to complete the clean disconnection procedure */\n    status = xcpGetStatus();\n\n    elapsedTime = 0;\n    while ((elapsedTime < EXTMODE_SHUTDOWN_TIMEOUT_IN_MICROSECONDS) &&\n           (status != XCP_DISCONNECTED)) {\n\n        XCP_SLEEP(0, EXTMODE_RETRY_TIME_IN_MICROSECONDS);\n        elapsedTime += EXTMODE_RETRY_TIME_IN_MICROSECONDS;\n\n        /* Run the XCP Stack to keep the communication 'alive',\n           forcing the flush of all data */\n        xcpExtModeRunBackground(true);\n\n        /* Check the XCP stack status again */\n        status = xcpGetStatus();\n    }\n\n    /* Reset XCP Protocol Layer */\n    errorCode = xcpReset();\n    if (errorCode != XCP_SUCCESS) {\n        XCP_PRINTF(\"xcpReset error: code %d\\n\", errorCode);\n    }\n\n    /* Reset XCP Transport Layer */\n    errorCode = xcpTransportReset();\n    if (errorCode != XCP_SUCCESS) {\n        XCP_PRINTF(\"xcpTransportReset error: code %d\\n\", errorCode);\n    }\n\n    /* Restore the global variables to the default value */\n#if defined(ON_TARGET_WAIT_FOR_START) && ON_TARGET_WAIT_FOR_START == 1\n    xcpModelStartRequest = false;\n#else\n    xcpModelStartRequest = true;\n#endif\n\n    xcpModelStopRequest = false;\n\n    xcpModelChecksum0   = 0;\n    xcpModelChecksum1   = 0;\n    xcpModelChecksum2   = 0;\n    xcpModelChecksum3   = 0;\n    xcpModelIntegerCode = 0;\n\n#if defined(INTEGER_CODE) && INTEGER_CODE == 1\n    xcpExtmodeFinalSimulationTime = EXTMODE_SIMULATION_RUN_FOREVER;\n\n    xcpBaseRateSimulationTime = 0;\n\n    xcpTicksCounterL = 0;\n    xcpTicksCounterH = 0;\n\n    xcpBaseRateSimulationTimestamp = 0;\n#else\n    xcpExtmodeFinalSimulationTime = EXTMODE_SIMULATION_TIME_NOT_INITIALIZED;\n#endif\n\n    xcpExtmodeSimulationComplete  = false;\n\n#if (defined(INTEGER_CODE) && INTEGER_CODE == 1) || defined(XCP_EXTMODE_SIMULATION_TIME_IN_TICKS)\n    XCP_MEMSET(xcpCurrentSimulationTimeInTicks, 0, sizeof(xcpCurrentSimulationTimeInTicks));\n\n    xcpBaseRateSimulationTime = 0;\n\n    xcpTicksCounterL = 0;\n    xcpTicksCounterH = 0;\n\n    xcpBaseRateSimulationTimestamp = 0;\n#else\n    XCP_MEMSET(xcpCurrentSimulationTimeInMs, 0, sizeof(xcpCurrentSimulationTimeInMs));\n    xcpBaseRateSimulationTime = 0;\n#endif\n\n    return errorCode;\n}\n"},{"name":"xcp_ext_mode.c","type":"source","group":"legacy","path":"C:\\Program Files\\MATLAB\\R2023a\\toolbox\\coder\\xcp\\src\\target\\ext_mode\\src","tag":"","groupDisplay":"Other files","code":"/*\n * Copyright 2017-2022 The MathWorks, Inc.\n *\n * File: xcp_ext_mode.c\n *\n * Abstract:\n *  The file provides the implementation of the ext_mode.h interface\n *  based on XCP communication protocol\n */\n\n#if !defined(EXTMODE_DISABLE_ARGS_PROCESSING)\n#include <stdio.h>\n#endif\n\n#include <string.h>        /* optional for strcmp */\n\n#include \"xcp_ext_common.h\"\n#include \"xcp_ext_param.h\"\n#include \"xcp_internal.h\"\n#include \"ext_mode.h\"\n\n\n#ifdef EXTMODE_XCP_TRIGGER_SUPPORT\n\n#include \"xcp_ext_classic_trigger.h\"\n\n#ifndef EXTMODE_XCP_MAX_TRIGGER_NUMBER\n#if defined(XCP_MEM_DAQ_RESERVED_POOLS_NUMBER) && (XCP_MEM_DAQ_RESERVED_POOLS_NUMBER > 0)\n/* If XCP_MEM_DAQ_RESERVED_POOLS_NUMBER is defined, the value of this macro should be at least\n   equal to the number of sample times in the model. This can be one more than the number of DAQ\n   lists that use reserved pools if Tid 0 and 1 are mapped to the same DAQ list. */\n#define EXTMODE_XCP_MAX_TRIGGER_NUMBER XCP_MEM_DAQ_RESERVED_POOLS_NUMBER + 1\n#else\n#define EXTMODE_XCP_MAX_TRIGGER_NUMBER EXTMODE_MAX_EVENT_ID\n#endif\n#endif /* EXTMODE_XCP_MAX_TRIGGER_NUMBER */\n\n#if (EXTMODE_XCP_MAX_TRIGGER_NUMBER > EXTMODE_MAX_EVENT_ID) || (EXTMODE_XCP_MAX_TRIGGER_NUMBER < 1)\n#error Invalid EXTMODE_XCP_MAX_TRIGGER_NUMBER value.\n#endif\n\nstatic extmodeEventTriggerEnable xcpCustomTriggerFunction[EXTMODE_XCP_MAX_TRIGGER_NUMBER];\n\n#endif\n\n\nextmodeErrorCode_T extmodeParseArgs(int_T   argc,\n                                    const char_T *argv[])\n{\n    extmodeErrorCode_T errorCode = EXTMODE_SUCCESS;\n\n#ifdef  EXTMODE_DISABLE_ARGS_PROCESSING\n    /* Some targets do not support command line args */\n    UNUSED_PARAMETER(argc);\n    UNUSED_PARAMETER(argv);\n#else\n    boolean_T  parseError = false;\n    int_T  count = 1;\n\n    if (argc < 0) {\n        XCP_PRINTF(\"extmodeParseArgs: argc must be a positive number\\n\");\n        return EXTMODE_INV_ARG;\n    }\n\n    if ((argc > 0) && (argv == NULL)) {\n        XCP_PRINTF(\"extmodeParseArgs: invalid argv value\\n\");\n        return EXTMODE_INV_ARG;\n    }\n\n    /*\n     * Parse the External Mode Platform-independent Abstraction Layer parameters.\n     * Let all unrecognized parameters pass through to the XCP External Mode \n     * Platform-specific Abstraction Layer.\n     * NULL out all args handled so that they can ignored by the lower layer.\n     */\n    while (count < argc) {\n        const char_T *option = argv[count++];\n\n        if (option != NULL) {\n            /* final time */\n            if ((strcmp(option, \"-tf\") == 0) && (count != argc)) {\n                const char_T *timeValueString = argv[count++];\n                extmodeSimulationTime_T  timeValue = 0;\n                char_T        stringBuffer[201];\n\n                XCP_MEMSET(stringBuffer, 0, sizeof(stringBuffer));\n\n                sscanf(timeValueString, \"%200s\", stringBuffer);\n                if (strcmp(stringBuffer, \"inf\") == 0) {\n                    timeValue = EXTMODE_SIMULATION_RUN_FOREVER;\n                }\n                else {\n                    char_T tmpString[2];\n\n#if (defined(INTEGER_CODE) && INTEGER_CODE == 1) || defined(XCP_EXTMODE_SIMULATION_TIME_IN_TICKS)\n                    int tmpValue;\n\n                    if ((sscanf(stringBuffer, \"%d%1s\", &tmpValue, tmpString) != 1) ||\n                        (tmpValue < 0)) {\n                        XCP_PRINTF(\"External mode final simulation time must be a positive, integer value or inf\\n\");\n                        parseError = true;\n                        break;\n                    }\n                    timeValue = (extmodeSimulationTime_T) tmpValue;\n#else\n                    if ((sscanf(stringBuffer, \"%lf%1s\", &timeValue, tmpString) != 1) ||\n                        (timeValue < (extmodeSimulationTime_T)0)) {\n                        XCP_PRINTF(\"External mode final simulation time must be a positive, real value or inf\\n\");\n                        parseError = true;\n                        break;\n                    }\n#endif\n                }\n                xcpExtmodeFinalSimulationTime = timeValue;\n\n                argv[count - 2] = NULL;\n                argv[count - 1] = NULL;\n            }\n            /* -w (wait for packet from host) option */\n            else if (strcmp(option, \"-w\") == 0) {\n                xcpModelStartRequest = false;\n                argv[count - 1] = NULL;\n            }\n        }\n    }\n\n    if (parseError) {\n        XCP_PRINTF(\"\\nUsage: model_name -option1 val1 -option2 val2 -option3 \"\n            \"...\\n\\n\");\n\n#if (defined(INTEGER_CODE) && INTEGER_CODE == 1) || defined(XCP_EXTMODE_SIMULATION_TIME_IN_TICKS)\n        XCP_PRINTF(\"\\t-tf 20 - sets final time to 20 ticks\\n\");\n#else\n        XCP_PRINTF(\"\\t-tf 20 - sets final time to 20 seconds\\n\");\n#endif\n\n        return EXTMODE_INV_ARG;\n    }\n\n    /* Extract XCP specific initialization parameters, by invoking the \n       XCP External Mode Platform-specific Abstraction Layer API */\n    xcpExtModeParseArgs(argc, argv);\n\n    /*\n     * Check for unprocessed (\"unhandled\") args.\n     */\n    {\n        int i;\n        for (i = 1; i<argc; i++) {\n            if (argv[i] != NULL) {\n                XCP_PRINTF(\"Unexpected command line argument: %s\\n\", argv[i]);\n                return EXTMODE_INV_ARG;\n            }\n        }\n    }\n\n#endif /* EXTMODE_DISABLE_ARGS_PROCESSING */\n\n    return errorCode;\n}\n\n\nextmodeErrorCode_T extmodeInit(RTWExtModeInfo *extmodeInfo, extmodeSimulationTime_T *finalTime)\n{\n    XcpErrorCode errorCode = XCP_SUCCESS;\n\n    if (extmodeInfo == NULL) {\n        XCP_PRINTF(\"extmodeInit: invalid extmodeInfo\\n\");\n        return EXTMODE_INV_ARG;\n    }\n\n    if (finalTime == NULL) {\n        XCP_PRINTF(\"extmodeInit: invalid finalTime variable\\n\");\n        return EXTMODE_INV_ARG;\n    }\n\n    if (xcpExtmodeFinalSimulationTime == EXTMODE_SIMULATION_TIME_NOT_INITIALIZED) {\n#if (defined(INTEGER_CODE) && INTEGER_CODE == 1)  || defined(XCP_EXTMODE_SIMULATION_TIME_IN_TICKS)\n        /* If the model final simulation time in External Mode has NOT been initialized,\n           then EXTMODE_SIMULATION_RUN_FOREVER is assumed, as the Real-time Model\n           structure doesn't contain any final time information when PurelyIntegerCode\n           is selected */\n        xcpExtmodeFinalSimulationTime = EXTMODE_SIMULATION_RUN_FOREVER;\n#else\n        /* If the model final simulation time in External Mode has NOT been initialized,\n           then the finalTime argument is considered an INPUT */\n        xcpExtmodeFinalSimulationTime = *finalTime;\n#endif\n    }\n    else {\n        /* If the model final simulation time in External Mode has been initialized\n           (e.g.via '-tf ' parameter detected by extmodeParseArgs() or\n            via explicit call of extmodeSetFinalSimulationTime())\n           then the finalTime argument is considered an OUTPUT */\n        *finalTime = xcpExtmodeFinalSimulationTime;\n    }\n\n    if (xcpExtmodeFinalSimulationTime == EXTMODE_SIMULATION_RUN_FOREVER) {\n        XCP_PRINTF(\"\\n**warning: the simulation will run with no stop time due \"\n            \"to external mode infinite final simulation time.\\n\");\n    }\n\n    /* Initialize the model checksum information */\n    xcpModelChecksum0 = rteiGetChecksum0(extmodeInfo);\n    xcpModelChecksum1 = rteiGetChecksum1(extmodeInfo);\n    xcpModelChecksum2 = rteiGetChecksum2(extmodeInfo);\n    xcpModelChecksum3 = rteiGetChecksum3(extmodeInfo);\n\n#if defined(INTEGER_CODE) && INTEGER_CODE == 1\n    xcpModelIntegerCode = 1;\n#else\n    xcpModelIntegerCode = 0;\n#endif\n\n#ifdef EXTMODE_XCP_TRIGGER_SUPPORT\n    xcpExtModeClassicTriggerInit();\n\n    /* By default, use Classic Triggering */\n    {\n        unsigned i = 0;\n        for (i = 0; i < EXTMODE_XCP_MAX_TRIGGER_NUMBER; i++) {\n            xcpCustomTriggerFunction[i] = xcpExtModeClassicTriggerEnabled;\n        }\n    }\n#endif\n\n    /* Initialize the platform abstraction layer common services */\n    errorCode = xcpExtModeInit();\n    \n    if (errorCode == XCP_SUCCESS) {\n        xcpModelStatus = XCP_EXTMODE_STATUS_INITIALIZED;\n    }\n\n    return XCP_TO_EXTMODE_ERROR_CODE(errorCode);\n}\n\n\nextmodeErrorCode_T extmodeWaitForHostRequest(extmodeRealTime_T timeoutInMicroseconds)\n{\n    extmodeErrorCode_T errorCode = EXTMODE_SUCCESS;\n    extmodeRealTime_T elapsedTime = 0;\n    boolean_T timeoutExpired = false;\n    boolean_T waitForHostRequest = !xcpModelStartRequest;\n    xcpModelStatus = XCP_EXTMODE_STATUS_WAITING_TO_START;\n\n    timeoutExpired = (timeoutInMicroseconds == 0) && !xcpModelStartRequest && !xcpModelStopRequest;\n\n    /*\n     * Pause until the XCP master modifies the xcpModelStartRequest value\n     * or a stop request has been issued\n     */\n    while (!xcpModelStartRequest && !xcpModelStopRequest && !timeoutExpired) {\n        XCP_SLEEP(0L, EXTMODE_RETRY_TIME_IN_MICROSECONDS);\n        elapsedTime += EXTMODE_RETRY_TIME_IN_MICROSECONDS;\n\n        timeoutExpired = (timeoutInMicroseconds != EXTMODE_WAIT_FOREVER) &&\n                         (elapsedTime > timeoutInMicroseconds);\n\n        xcpExtModeRunBackground(DEFAULT_XCP_EXTMODE_RUN_BACKGROUND_FLUSH);\n    }\n\n    xcpModelStatus = XCP_EXTMODE_STATUS_READY_TO_RUN;\n\n    if (timeoutExpired) {\n        errorCode = EXTMODE_TIMEOUT_ERROR;\n    }\n\n#ifdef EXTMODE_XCP_TRIGGER_SUPPORT\n    /* Avoid missing logged data points at t = 0 in concurrent execution workflows. */\n    if (waitForHostRequest) {\n        xcpExtModeClassicTriggerForceEnableStatusUpdate();\n    }\n#endif\n    return errorCode;\n}\n\n\nextmodeErrorCode_T extmodeEvent(extmodeEventId_T eventId, extmodeSimulationTime_T simulationTime)\n{\n    XcpErrorCode errorCode  = XCP_SUCCESS;\n    boolean_T triggerEnable = true;\n\n#if (!defined(INTEGER_CODE) || (INTEGER_CODE == 0)) && (!defined(XCP_EXTMODE_SIMULATION_TIME_IN_TICKS))\n    if (simulationTime < 0) {\n        XCP_PRINTF(\"extmodeEvent error: invalid simulationTime, must be non-negative\\n\");\n        return EXTMODE_INV_ARG;\n    }\n#endif\n\n    if (eventId > EXTMODE_MAX_EVENT_ID) {\n        XCP_PRINTF(\"extmodeEvent error: invalid eventId (%d), must be less than %d\\n\", eventId, EXTMODE_MAX_EVENT_ID);\n        return EXTMODE_INV_ARG;\n    }\n    \n    if ((xcpModelStatus == XCP_EXTMODE_STATUS_READY_TO_RUN) ||\n        (xcpModelStatus == XCP_EXTMODE_STATUS_INITIALIZED)) {\n        /* Update model status, as soon as the extmodeEvent() gets invoked */\n        xcpModelStatus = XCP_EXTMODE_STATUS_RUNNING;\n    }\n\n#ifdef EXTMODE_XCP_TRIGGER_SUPPORT\n    if ((eventId < EXTMODE_XCP_MAX_TRIGGER_NUMBER) &&\n        (xcpCustomTriggerFunction[eventId] != NULL)) {\n        /* Trigger logic should be applied only when the synchronous\n           data transfer is active */\n        XcpStatus xcpStatus = xcpGetStatus();\n        if (xcpStatus == XCP_SYNC_DATA_TRANSFER) {\n            triggerEnable = xcpCustomTriggerFunction[eventId](eventId);\n        }\n    }\n#endif\n    {\n        XcpEventIdType xcpEventId = (XcpEventIdType) eventId;\n\n#ifdef XCP_TIMESTAMP_BASED_ON_SIMULATION_TIME\n        /* Update local absolute time variables*/\n        uint32_T timestampBasedOnSimTime = xcpExtModeGetUpdatedTimestamp(simulationTime, eventId);\n#else\n        /* Update local absolute time variables*/\n        xcpExtModeUpdateTime(simulationTime, eventId);\n#endif\n\n        if (triggerEnable) {\n#ifdef XCP_TIMESTAMP_BASED_ON_SIMULATION_TIME\n            /* Notify XCP Stack about the eventId */\n            errorCode = xcpEventExternalTimestamp(xcpEventId, timestampBasedOnSimTime);\n#else\n            /* Notify XCP Stack about the eventId, using the timestamp read\n               from the HW timer supported by XCP Platform Abstraction layer */\n            errorCode = xcpEvent(xcpEventId);\n#endif\n        } else {\n            /* reset pending packed DAQ lists if the trigger did not fire so that we do not send\n               packets with non-consecutive samples */\n            xcpPackedModeEventReset(xcpEventId);\n        }\n    }\n\n    if (errorCode != XCP_SUCCESS) {\n        XCP_PRINTF(\"extmodeEvent error: code %d\\n\", errorCode);\n    }\n\n    return XCP_TO_EXTMODE_ERROR_CODE(errorCode);\n}\n\n\nextmodeErrorCode_T extmodeBackgroundRun(void)\n{\n    XcpErrorCode errorCode = XCP_SUCCESS;\n\n    errorCode = xcpExtModeRunBackground(DEFAULT_XCP_EXTMODE_RUN_BACKGROUND_FLUSH);\n\n    return XCP_TO_EXTMODE_ERROR_CODE(errorCode);\n}\n\n\nextmodeErrorCode_T extmodeReset(void)\n{\n    XcpErrorCode errorCode = XCP_SUCCESS;\n\n    xcpModelStatus = XCP_EXTMODE_STATUS_RESETTING;\n    \n    errorCode = xcpExtModeReset();\n\n#ifdef EXTMODE_XCP_TRIGGER_SUPPORT\n    XCP_MEMSET(xcpCustomTriggerFunction, 0, sizeof(xcpCustomTriggerFunction));\n\n    xcpExtModeClassicTriggerReset();\n#endif\n\n    xcpModelStatus = XCP_EXTMODE_STATUS_RESET;\n    \n    return XCP_TO_EXTMODE_ERROR_CODE(errorCode);\n}\n\nboolean_T extmodeStopRequested(void)\n{\n    return xcpModelStopRequest;\n}\n\nboolean_T extmodeStartRequested(void)\n{\n    return xcpModelStartRequest;\n}\n\n\nboolean_T extmodeSimulationComplete(void)\n{\n    return xcpExtmodeSimulationComplete;\n}\n\nextmodeErrorCode_T extmodeGetFinalSimulationTime(extmodeSimulationTime_T *finalTime)\n{\n    if (finalTime == NULL) {\n        XCP_PRINTF(\"extmodeGetFinalSimulationTime: invalid finalTime variable\\n\");\n        return EXTMODE_INV_ARG;\n    }\n\n    if (xcpExtmodeFinalSimulationTime == EXTMODE_SIMULATION_TIME_NOT_INITIALIZED) {\n        XCP_PRINTF(\"extmodeGetFinalSimulationTime: finalTime not initialized\\n\");\n        return EXTMODE_NOT_INITIALIZED;\n    }\n\n    *finalTime = xcpExtmodeFinalSimulationTime;\n\n    return EXTMODE_SUCCESS;\n}\n\nextmodeErrorCode_T extmodeSetFinalSimulationTime(extmodeSimulationTime_T finalTime)\n{\n#if (!defined(INTEGER_CODE) || (INTEGER_CODE == 0)) && (!defined(XCP_EXTMODE_SIMULATION_TIME_IN_TICKS))\n    if ((finalTime < 0) && (finalTime != EXTMODE_SIMULATION_RUN_FOREVER)) {\n        XCP_PRINTF(\"extmodeSetFinalSimulationTime: invalid finalTime value\\n\");\n        return EXTMODE_INV_ARG;\n    }\n#endif\n\n    xcpExtmodeFinalSimulationTime = finalTime;\n\n    return EXTMODE_SUCCESS;\n}\n\n#ifdef EXTMODE_XCP_TRIGGER_SUPPORT\n\nextmodeErrorCode_T extmodeGetEventTriggerEnable(extmodeEventId_T eventId, extmodeEventTriggerEnable *triggerEnable)\n{\n    if (eventId >= EXTMODE_XCP_MAX_TRIGGER_NUMBER) {\n        XCP_PRINTF(\"extmodeGetEventTriggerEnable: invalid eventId value\\n\");\n        return EXTMODE_INV_ARG;\n    }\n\n    if (triggerEnable == NULL) {\n        XCP_PRINTF(\"extmodeGetEventTriggerEnable: invalid triggerEnabled value\\n\");\n        return EXTMODE_INV_ARG;\n    }\n\n    *triggerEnable = xcpCustomTriggerFunction[eventId];\n\n    return EXTMODE_SUCCESS;\n}\n\nextmodeErrorCode_T extmodeSetEventTriggerEnable(extmodeEventId_T eventId, extmodeEventTriggerEnable triggerEnable)\n{\n    if (eventId >= EXTMODE_XCP_MAX_TRIGGER_NUMBER) {\n        XCP_PRINTF(\"extmodeSetEventTriggerEnable: invalid eventId value\\n\");\n        return EXTMODE_INV_ARG;\n    }\n\n    xcpCustomTriggerFunction[eventId] = triggerEnable;\n    return EXTMODE_SUCCESS;\n}\n\n#else\n\nextmodeErrorCode_T extmodeGetEventTriggerEnable(extmodeEventId_T eventId, extmodeEventTriggerEnable *triggerEnable)\n{\n    UNUSED_PARAMETER(eventId);\n\n    if (triggerEnable != NULL) {\n        *triggerEnable = NULL;\n    }\n\n    return EXTMODE_SUCCESS;\n}\n\nextmodeErrorCode_T extmodeSetEventTriggerEnable(extmodeEventId_T eventId, extmodeEventTriggerEnable triggerEnable)\n{\n    UNUSED_PARAMETER(eventId);\n    UNUSED_PARAMETER(triggerEnable);\n\n    return EXTMODE_SUCCESS;\n}\n\n#endif\n"},{"name":"xcp_ext_param_default_serial.c","type":"source","group":"legacy","path":"C:\\Program Files\\MATLAB\\R2023a\\toolbox\\coder\\xcp\\src\\target\\ext_mode\\src","tag":"","groupDisplay":"Other files","code":"/*\n * Copyright 2017-2022 The MathWorks, Inc.\n *\n * File: xcp_ext_param_default_serial.c     \n *\n * Abstract:\n *  The file provides the implementation of the xcp_ext_param.h \n *  interface specific for the XCP Default Platform Abstraction Layer\n *  for the Serial transport layer.\n */\n\n#include \"rtwtypes.h\"\n\n#include \"rtw_extmode.h\"\n\n#include \"xcp_common.h\"\n#include \"xcp_ext_param.h\"\n\n#ifndef EXTMODE_DISABLE_ARGS_PROCESSING\n\n /** Transport Layer initialization parameters \n     @note the default values can be overwritten when parsing the\n           External Mode command line arguments */\nstatic const void* xcpTransportLayerParams[] =\n{\n    \"-port\", \"1\",\n    \"-baud\", \"57600\",\n    \"-verbose\", \"0\",\n};\n\n#endif /* EXTMODE_DISABLE_ARGS_PROCESSING */\n\nvoid xcpExtModeParseArgs(int_T argc, const char_T *argv[])\n{\n#ifdef  EXTMODE_DISABLE_ARGS_PROCESSING\n    /* Some targets do not support command line args */\n    UNUSED_PARAMETER(argc);\n    UNUSED_PARAMETER(argv);\n#else\n    if ((argv != NULL) && (argc > 0)) {\n        int_T optionId = 1;\n        uint_T idx;\n\n        while (optionId < argc) {\n            const char_T *option = argv[optionId];\n\n            optionId++;\n\n            if ((option != NULL) && (optionId != argc)) {\n                boolean_T isXcpOption = false;\n\n                for (idx = 0; idx < sizeof(xcpTransportLayerParams)/sizeof(xcpTransportLayerParams[0]); idx = idx + 2){\n                    if (strcmp(option, xcpTransportLayerParams[idx]) == 0) {\n                        xcpTransportLayerParams[idx+1] = argv[optionId];\n                        isXcpOption = true;\n                        break;\n                    }\n                }\n\n                if (isXcpOption) {\n                    /* Mark arguments as \"processed\" */\n                    argv[optionId - 1] = NULL;\n                    argv[optionId] = NULL;\n                }\n                \n                optionId++;\n            }\n        }\n    }\n#endif\n}\n\nvoid xcpTransportGetInitParameters(int_T *parNumber, void **parList[])\n{\n#ifdef  EXTMODE_DISABLE_ARGS_PROCESSING\n    if ((parNumber != NULL) && (parList != NULL)) {\n        /* No Transport Layer parameters defined (assuming rtiostream default) */\n        *parNumber = 0;\n        *parList = NULL;\n    }\n#else    \n    if ((parNumber != NULL) && (parList != NULL)) {\n        *parNumber = XCP_ELEMENTS_NUMBER(xcpTransportLayerParams);\n        *parList = (void **) &xcpTransportLayerParams;\n    }\n#endif\n}\n\nvoid xcpGetInitParameters(int_T *parNumber, void **parList[])\n{\n    if ((parNumber != NULL) && (parList != NULL)) {\n        /* No Protocol Layer parameters available at the moment */\n        *parNumber = 0;\n        *parList = NULL;\n    }\n}\n\n\n"},{"name":"xcp_fifo.c","type":"source","group":"legacy","path":"C:\\Program Files\\MATLAB\\R2023a\\toolbox\\coder\\xcp\\src\\target\\slave\\transport\\src","tag":"","groupDisplay":"Other files","code":"/*\n* Copyright 2016-2020 The MathWorks, Inc.\n*\n* File: xcp_fifo.c\n*\n* Abstract:\n*  Implementation of FIFO data structure based on single linked list\n*/\n\n#include \"xcp_common.h\"\n#include \"xcp_fifo.h\"\n\n\nvoid xcpFifoInit(struct xcpFifo * fifo)\n{\n    fifo->first = NULL;\n    fifo->last = &(fifo)->first;\n}\n\n\nvoid xcpFifoEnqueue(struct xcpFifo *fifo, struct xcpFifoEntry *element)\n{\n    element->next = NULL;\n    *(fifo)->last = element;\n    fifo->last = &(element->next);\n}\n\n\nvoid xcpFifoDequeue(struct xcpFifo *fifo, struct xcpFifoEntry **element)\n{\n    *element = fifo->first;\n\n    if (fifo->first != NULL) {\n        fifo->first = fifo->first->next;\n\n        if (fifo->first == NULL)\n            fifo->last = &(fifo)->first;\n    }\n}\n\n\nvoid xcpFifoEnqueueHead(struct xcpFifo *fifo, struct xcpFifoEntry *element)\n{\n    element->next = (fifo)->first;\n\n    if ((fifo)->first == NULL) {\n        (fifo)->last = &(element->next);\n    }\n\n    (fifo)->first = element;\n}\n\n\nvoid xcpFifoSpliceHead(struct xcpFifo *dstFifo, struct xcpFifo *srcFifo)\n{\n    if (srcFifo->first != NULL) {\n        *(srcFifo->last) = dstFifo->first;\n        dstFifo->first = srcFifo->first;\n         \n        srcFifo->first = NULL;\n        srcFifo->last = &(srcFifo)->first;\n    }\n}\n\n\nboolean_T xcpFifoEmpty(struct xcpFifo *fifo)\n{\n    return ((fifo)->first == NULL);\n}\n\n\nvoid xcpFifoReset(struct xcpFifo * fifo)\n{\n    xcpFifoInit(fifo);\n}\n"},{"name":"xcp_frame_serial.c","type":"source","group":"legacy","path":"C:\\Program Files\\MATLAB\\R2023a\\toolbox\\coder\\xcp\\src\\target\\slave\\transport\\src","tag":"","groupDisplay":"Other files","code":"/*\n* Copyright 2016-2020 The MathWorks, Inc.\n*\n* File: xcp_frame_serial.c\n*\n* Abstract:\n*  XCP Frame Handler implementation for the Serial transport layer.\n*/\n\n#include \"xcp_common.h\"\n#include \"xcp.h\"\n#include \"xcp_frame.h\"\n#include \"xcp_frame_serial.h\"\n#include \"xcp_drv.h\"\n#include \"xcp_mem.h\"\n#include \"xcp_types.h\"\n\n\n/* Frame Handler internal counters */\n#if XCP_SERIAL_USES_CTR\nstatic uintCTR_T txCounter = 0;\nstatic uintCTR_T rxCounter = 0;\nstatic int       firstRxCounterReceived = 0;\n#endif\n\n/* true if the Frame Handler has been successfully initialized */\nstatic boolean_T initialized = false;\n\n/* ID for of the memory pool reserved for the allocation of\n    CTO XCP Packets */\nstatic xcpPoolId_T xcpCtoReservedMemPoolId = -1;\n\n\nuint16_T xcpSxiHtons(uint16_T hostShort)\n{\n#ifndef XCP_BIG_ENDIAN\n    return hostShort;\n#else\n    return ((hostShort & 0xFF00) >> 8) | ((hostShort & 0x00FF) << 8);\n#endif\n}\n\n\nuint16_T xcpSxiNtohs(uint16_T networkShort)\n{\n    return xcpSxiHtons(networkShort);\n}\n\n#if XCP_SERIAL_USES_CS\n /*\n  * Checksum is calculated for all octets in a target memory location.\n  * length : number of target memory locations.\n  */\n#if XCP_ADDRESS_GRANULARITY == XCP_ADDRESS_GRANULARITY_BYTE\n    uintCS_T xcpSxiChecksum(const void *buffer, uintLEN_T length){\n        const uint8_T *buf = buffer;\n        uintCS_T checkSum = 0;\n        while (length-- > 0) {\n            /* buf is a uint8_T* so endian transformation is not required. */\n            checkSum += *buf++;\n        }\n        return checkSum;\n    }\n#elif XCP_ADDRESS_GRANULARITY == XCP_ADDRESS_GRANULARITY_WORD\n    uintCS_T xcpSxiChecksum(const void *buffer, uintLEN_T length){\n        const uint16_T *buf = buffer;\n        uintCS_T checkSum = 0;\n        while (length-- > 0){\n            checkSum += *buf & 0x00FF;\n            checkSum += (*buf++) >> 8;\n        }\n        return checkSum;\n    }\n#endif\n\n#endif\n\nXcpErrorCode xcpFrameInit(\n    int   argc,   /**< [in] number of init parameters              */\n    void *argv[]  /**< [in] array of parameters values (C strings) */\n    )\n{\n    XcpErrorCode errorCode = XCP_SUCCESS;\n\n    XCP_ERROR_IF(initialized, XCP_ERROR, \"xcpFrameInit: frame handler already initialized\\n\");\n\n    /* Open the XCP driver */\n    errorCode = xcpDrvOpen(argc, argv);\n    if (errorCode == XCP_SUCCESS) {\n#if XCP_SERIAL_USES_CTR\n        txCounter = 0;\n        rxCounter = 0;\n        firstRxCounterReceived = 0;\n#endif\n        initialized = true;\n    }\n\n    return errorCode;\n}\n\n\nXcpErrorCode xcpFrameMsgSend(\n    void    *msgBuffer,  /**< [in] pointer to the base address of the buffer where the message is stored */\n    size_t   msgOffset,  /**< [in] offset (from base address in AG units) where the XCP message frame is stored */\n    size_t   msgSize     /**< [in] size (in AG units) of XCP message frame */\n    )\n{\n    /* This function works properly only if the XCP_SERIAL_HEADER_FORMAT is LEN_WORD_CTR_WORD and \n     * XCP_SERIAL_TAIL_FORMAT is CHECKSUM_WORD.\n     */\n    uint8_T *bufferPtr = NULL;\n    struct XcpHeader *header = NULL;\n    uintLEN_T lengthInBytes = 0;\n    XcpErrorCode errorCode = XCP_SUCCESS;\n\n#if XCP_SERIAL_USES_CS\n    uintCS_T checksum;\n    struct XcpTail *tail;\n#endif\n\n    XCP_ERROR_IF(msgBuffer == NULL, XCP_INV_ARG, \"xcpFrameMsgSend: invalid msgBuffer\\n\");\n    XCP_ERROR_IF(msgSize < sizeof(struct XcpHeader) + XCP_IN_AG(XCP_SERIAL_TAIL_SIZE), XCP_INV_ARG, \"xcpFrameMsgSend: invalid msgSize\\n\");\n    XCP_ERROR_IF(!initialized, XCP_NOT_INITIALIZED, \"xcpFrameMsgSend: frame handler not initialized\\n\");\n\n    bufferPtr = (uint8_T *) msgBuffer + msgOffset;\n\n    header = (struct XcpHeader *) bufferPtr;\n    lengthInBytes = LenSxiNtoH(header->length);\n\n    if ( ( lengthInBytes == 0 ) ||\n         ( msgSize < ( sizeof(struct XcpHeader) + XCP_IN_AG(XCP_SERIAL_TAIL_SIZE) + XCP_IN_AG(lengthInBytes) ) )\n       ) {\n        XCP_PRINTF(\"xcpFrameMsgSend: invalid message format detected\\n\");\n        return XCP_INV_MSG_FORMAT;\n    }\n\n#if XCP_SERIAL_USES_CTR\n    /* Set the value of the transport layer txCounter immediately before\n     * sending the message so that it reflects the correct order for the\n     * sequence of frames that are sent rather than the sequence in which\n     * they are constructed (which could be different in the case where\n     * there are multiple prioritized queues). */\n    header->counter = CtrSxiHtoN(txCounter);\n#endif\n\n#if XCP_SERIAL_USES_CS\n    tail = (struct XcpTail *) ((char *) header + sizeof(struct XcpHeader) + XCP_IN_AG(lengthInBytes));\n    checksum = CsSxiHtoN(xcpSxiChecksum(header, sizeof(struct XcpHeader) + XCP_IN_AG(lengthInBytes)));\n    XCP_MEMCPY(&tail->cs, &checksum, sizeof(tail->cs));\n#endif\n\n    /* Send the XCP Frame Header\n     * If the xcpDrvSend() is blocking, the return code should be XCP_SUCCESS\n     * If the xcpDrvSend() is non-blocking, the return code could be XCP_SUCCESS or XCP_BUSY.\n     * If something went wrong we should get XCP_ERROR or XCP_PKT_TX_TIMEOUT_ERROR */\n    errorCode = xcpDrvSend(bufferPtr, XCP_SERIAL_HEADER_SIZE);\n    if(errorCode != XCP_SUCCESS){\n        return errorCode;\n    }\n    bufferPtr += XCP_IN_AG(XCP_SERIAL_HEADER_SIZE);\n\n    /* Since have already started sending the packet, we should wait until \n     * the remaining part is sent, or a XCP_PKT_TX_TIMEOUT_ERROR has occurred.\n     * For this reason we force the subsequent xcpDrvRecv to be blocking */\n    xcpDrvIoctl(XCP_DRV_FORCE_BLOCKING);\n\n    /* Send the XCP Packet */\n    errorCode = xcpDrvSend(bufferPtr, lengthInBytes);\n    if(errorCode != XCP_SUCCESS){\n        goto txError;\n    }\n    bufferPtr += XCP_IN_AG(lengthInBytes);\n\n    /* Send the XCP Frame Tail */\n    errorCode = xcpDrvSend(bufferPtr, XCP_SERIAL_TAIL_SIZE);\n    if (errorCode != XCP_SUCCESS){\n        goto txError;\n    }\n\n    /* If successfully sent, the buffer can be freed */\n    if (errorCode == XCP_SUCCESS) {\n        xcpMemFree(msgBuffer);\n    }\n\n#if XCP_SERIAL_USES_CTR\n    /* Don't increment the counter if the transfer of the packet is delayed\n       due to the transport layer being busy. */\n    if (errorCode != XCP_BUSY) {\n        txCounter++;\n    }\n#endif\n\ntxError:\n    /* The packet has been sent, or an error occurred. In any case\n     * we can restore the default blocking/non-blocking behavior */\n    xcpDrvIoctl(XCP_DRV_RESTORE_DEFAULT_BLOCKING_SETUP);\n\n    return errorCode;\n}\n\n\nXcpErrorCode xcpFrameMsgRecv(\n    void  **msgBuffer,  /**< [out] pointer to the base address of the buffer where the message is stored */\n    size_t  msgOffset,  /**< [in] offset (from base address in AG units) where the XCP message frame is stored */\n    size_t *msgSize     /**< [out] size (in AG units) of the XCP message frame that has been received */\n    )\n{\n    XcpErrorCode errorCode = XCP_SUCCESS;\n    struct XcpHeader rxHeader;\n    uintLEN_T lengthInBytes = 0;\n    uint8_T *buffer;\n    uint8_T *bufferPtr;\n\n    XCP_ERROR_IF(msgBuffer == NULL, XCP_INV_ARG, \"xcpFrameMsgRecv: invalid msgBuffer pointer\\n\");\n    XCP_ERROR_IF(msgSize == NULL, XCP_INV_ARG, \"xcpFrameMsgRecv: invalid msgSize pointer\\n\");\n    XCP_ERROR_IF(!initialized, XCP_NOT_INITIALIZED, \"xcpFrameMsgRecv: frame handler not initialized\\n\");\n\n    /* Receive message header first.\n     * If the xcpDrvRecv() is blocking, the return code should be XCP_SUCCESS\n     * If the xcpDrvRecv() is non-blocking, the return code could be XCP_SUCCESS or XCP_EMPTY\n     * If something went wrong we should get XCP_ERROR or XCP_PKT_RX_TIMEOUT_ERROR */\n    errorCode = xcpDrvRecv(&rxHeader, XCP_SERIAL_HEADER_SIZE);\n    if (errorCode != XCP_SUCCESS) {\n        return errorCode;\n    }\n\n    /* Infer the number of BYTES in the XCP Packet from the received header.\n     * This may not be a multiple of XCP_ADDRESS_GRANULARITY */\n    lengthInBytes = LenSxiNtoH(rxHeader.length);\n    if (lengthInBytes == 0) {\n        XCP_PRINTF(\"xcpFrameMsgRecv: invalid message format detected\\n\");\n        errorCode = XCP_INV_MSG_FORMAT;\n        return errorCode;\n    }\n\n    /* Request to the XCP allocator the memory for the message to be received.\n     * STIM packets are not supported at the moment. For this reason\n     * the XCP Slave can only receive CTOs */\n    buffer = xcpMemAllocFromPool(xcpCtoReservedMemPoolId,\n                msgOffset\n                + XCP_IN_AG(XCP_SERIAL_HEADER_SIZE)\n                + XCP_IN_AG(lengthInBytes)\n                + XCP_IN_AG(XCP_SERIAL_TAIL_SIZE) );\n\n    if (buffer == NULL) {\n        errorCode = XCP_NO_MEMORY;\n        return errorCode;\n    }\n\n    bufferPtr = buffer;\n\n    /* Initialize the header part */\n    XCP_MEMSET(bufferPtr, 0, msgOffset);\n    bufferPtr += msgOffset;\n\n    XCP_MEMCPY(bufferPtr, &rxHeader, sizeof(rxHeader));\n    bufferPtr += sizeof(rxHeader);\n\n    /* Since have already started receiving the packet, we should wait until\n     * the remaining part is received, or a XCP_PKT_RX_TIMEOUT_ERROR has occurred.\n     * For this reason we force the subsequent xcpDrvRecv to be blocking */\n    xcpDrvIoctl(XCP_DRV_FORCE_BLOCKING);\n\n    /* Receive the XCP packet */\n    errorCode = xcpDrvRecv(bufferPtr, lengthInBytes);\n    if (errorCode != XCP_SUCCESS) {\n        XCP_PRINTF(\"xcpFrameMsgRecv: received XCP header, but XCP packet is not available or packet size is incorrect\\n\");\n        errorCode = XCP_INV_MSG_FORMAT;\n        goto rxError;\n    }\n\n    bufferPtr  += XCP_IN_AG(lengthInBytes);\n\n    /* Receive the XCP packet */\n    errorCode = xcpDrvRecv(bufferPtr, XCP_SERIAL_TAIL_SIZE);\n\n    if (errorCode != XCP_SUCCESS) {\n        XCP_PRINTF(\"xcpFrameMsgRecv: received XCP header and XCP packet, but XCP tail is not available or packet size is incorrect\\n\");\n        errorCode = XCP_INV_MSG_FORMAT;\n        goto rxError;\n    }\n\n    /* The packet has been received, so we can restore\n     * the default blocking/non-blocking behavior */\n    xcpDrvIoctl(XCP_DRV_RESTORE_DEFAULT_BLOCKING_SETUP);\n\n    *msgBuffer = buffer;\n    *msgSize = sizeof(rxHeader) + XCP_IN_AG(lengthInBytes) + XCP_IN_AG(XCP_SERIAL_TAIL_SIZE);\n\n    return errorCode;\n\nrxError:\n    /* An error occurred while receiving a packet, so we can restore\n     * the default blocking/non-blocking behavior */\n    xcpDrvIoctl(XCP_DRV_RESTORE_DEFAULT_BLOCKING_SETUP);\n\n    *msgBuffer = NULL;\n    *msgSize = 0;\n    xcpMemFree(buffer);\n\n    return errorCode;\n}\n\n\nXcpErrorCode xcpFrameCreateMsg(\n    void        *msgFrame,           /**< [out] pointer to the buffer containing the full message frame */\n    size_t       msgFrameBufferSize, /**< [in]  max size (in AG units) of the buffer where the message frame is copied */\n    size_t      *msgFrameSize,       /**< [out] size (in AG units) of the generated msg frame */\n    size_t       xcpPacketSize       /**< [in]  size (in BYTEs) of the XCP packet. */\n    )\n{\n    struct XcpHeader *header = (struct XcpHeader *) msgFrame;\n\n    /* Input parameters validation */\n    XCP_ERROR_IF(msgFrame == NULL, XCP_INV_ARG, \"xcpFrameCreateMsg: invalid msgFrame buffer\\n\");\n    XCP_ERROR_IF(msgFrameSize == NULL, XCP_INV_ARG, \"xcpFrameCreateMsg: invalid msgFrameSize pointer\\n\");\n    XCP_ERROR_IF(xcpPacketSize == 0, XCP_INV_ARG, \"xcpFrameCreateMsg: invalid xcpPacketSize\\n\");\n    XCP_ERROR_IF(msgFrameBufferSize < (XCP_IN_AG(xcpPacketSize) + sizeof(struct XcpHeader) + XCP_IN_AG(XCP_SERIAL_TAIL_SIZE)), XCP_INV_ARG, \"xcpFrameCreateMsg: invalid msgFrameBufferSize\\n\");\n\n    /* update XCP header */\n    /* header->length = number of BYTES in the XCP Packet */\n    header->length = LenSxiHtoN((uint16_T)xcpPacketSize);\n\n    *msgFrameSize = XCP_IN_AG(xcpPacketSize) + sizeof(struct XcpHeader) + XCP_IN_AG(XCP_SERIAL_TAIL_SIZE);\n\n    return XCP_SUCCESS;\n}\n\n\nXcpErrorCode xcpFrameExtractPacket(\n    const void  *msgFrame,      /**< [in]  pointer to the buffer containing full message frame content */\n    size_t       msgFrameSize,  /**< [in]  size (in AG units) of the full message frame */\n    size_t      *xcpPacketSize  /**< [out] size (in BYTEs) of the XCP packet that has been processed */\n    )\n{\n    const struct XcpHeader *header = (const struct XcpHeader *) msgFrame;\n    uintLEN_T length = 0;\n#if XCP_SERIAL_USES_CTR\n    uintCTR_T counter = 0;\n#endif\n#if XCP_SERIAL_USES_CS\n    const struct XcpTail *tail;\n    uintCS_T checksum = 0;\n#endif\n    XcpErrorCode errorCode = XCP_SUCCESS;\n\n    /* Input parameters validation */\n    XCP_ERROR_IF(msgFrame == NULL, XCP_INV_ARG, \"xcpFrameExtractPacket: invalid msgFrame\\n\");\n    XCP_ERROR_IF(xcpPacketSize == NULL, XCP_INV_ARG, \"xcpFrameExtractPacket: invalid xcpPacketSize pointer\\n\");\n    XCP_ERROR_IF(msgFrameSize <= sizeof(struct XcpHeader), XCP_INV_ARG, \"xcpFrameExtractPacket: invalid msgFrameSize\\n\");\n    XCP_ERROR_IF(!initialized, XCP_NOT_INITIALIZED, \"xcpFrameExtractPacket: frame handler not initialized\\n\");\n\n    /* Extract info from the received message */\n    length = LenSxiNtoH(header->length);\n#if XCP_SERIAL_USES_CTR\n    counter = CtrSxiNtoH(header->counter);\n#endif\n\n    /* Check message length */\n    if (msgFrameSize != (XCP_IN_AG(length) + XCP_IN_AG(XCP_SERIAL_HEADER_SIZE) + XCP_IN_AG(XCP_SERIAL_TAIL_SIZE))) {\n        XCP_PRINTF(\"xcpFrameExtractPacket: Xcp packet has an invalid size\\n\");\n        return XCP_INV_MSG_FORMAT;\n    }\n\n#if XCP_SERIAL_USES_CTR\n    /* Check message counter */\n    if (!firstRxCounterReceived) {\n        /* No checks can be carried out the first time */\n        firstRxCounterReceived = 1;\n    }\n    else {\n        if (counter < (rxCounter + 1)) {\n            errorCode = XCP_PKT_OUT_OF_SEQUENCE;\n        }\n        else if (counter >(rxCounter + 1)) {\n            errorCode = XCP_PKT_LOST;\n        }\n    }\n    rxCounter = counter;\n#endif\n\n    /* Verify the checksum */\n#if XCP_SERIAL_USES_CS\n    tail = (const struct XcpTail *) ((const char *) msgFrame + sizeof(struct XcpHeader) + XCP_IN_AG(length));\n    XCP_MEMCPY(&checksum, &tail->cs, sizeof(checksum));\n    checksum = CsSxiNtoH(checksum);\n    XCP_ERROR_IF(checksum != xcpSxiChecksum(header, sizeof(struct XcpHeader) + XCP_IN_AG(length)), XCP_PKT_CHECKSUM_ERROR, \"xcpFrameExtractPacket: invalid checksum\\n\");\n#endif\n    *xcpPacketSize = length;\n\n    return errorCode;\n}\n\n/* Returns the number of BYTEs in an XCP Frame Header */\nsize_t xcpFrameHeaderSize(void)\n{\n    return XCP_SERIAL_HEADER_SIZE;\n}\n\n/* Returns the number of BYTEs in an XCP Tail */\nsize_t xcpFrameTailSize(void)\n{\n    return XCP_SERIAL_TAIL_SIZE;\n}\n\n\nsize_t xcpFrameMaxDtoSize(void)\n{\n    return XCP_MAX_DTO_SIZE;\n}\n\n\nsize_t xcpFrameMaxCtoSize(void)\n{\n    return XCP_MAX_CTO_SIZE;\n}\n\n\nXcpErrorCode xcpFrameRestart(void)\n{\n#if XCP_SERIAL_USES_CTR\n    txCounter = 0;\n    rxCounter = 0;\n    firstRxCounterReceived = 0;\n#endif\n\n    return XCP_SUCCESS;\n}\n\n\nvoid xcpFrameSetCtoReservedMemPoolId(xcpPoolId_T poolId)\n{\n    xcpCtoReservedMemPoolId = poolId;\n}\n\n\nXcpErrorCode xcpFrameReset(void)\n{\n    XcpErrorCode errorCode = XCP_SUCCESS;\n\n    if (!initialized) {\n        XCP_PRINTF(\"xcpFrameReset: frame handler already reset\\n\");\n        return XCP_SUCCESS; /* Nothing to do: just printing out a warning message*/\n    }\n\n    /* Close the actual communication channel */\n    errorCode = xcpDrvClose();\n    if (errorCode == XCP_SUCCESS) {\n#if XCP_SERIAL_USES_CTR\n        txCounter = 0;\n        rxCounter = 0;\n        firstRxCounterReceived = 0;\n#endif\n        initialized = false;\n    } else {\n        XCP_PRINTF(\"xcpFrameReset: xcpDrvClose error\\n\");\n    }\n\n    return errorCode;\n}\n"},{"name":"xcp_mem_default.c","type":"source","group":"legacy","path":"C:\\Program Files\\MATLAB\\R2023a\\toolbox\\coder\\xcp\\src\\target\\slave\\platform\\default","tag":"","groupDisplay":"Other files","code":"/*\n* Copyright 2016-2022 The MathWorks, Inc.\n*\n* File: xcp_mem_default.c\n*\n* Abstract:\n*  Implementation of default XCP Slave memory allocator\n*/\n\n#include \"xcp_common.h\"\n#include \"xcp_mem.h\"\n#include \"xcp_mem_default.h\"\n#include \"xcp_utils.h\"\n\n#define PADDING (XCP_MEM_ALIGNMENT-1)\n\n/* Array of XcpMemPoolDescriptor for each block size to allow freeing and\n   allocating blocks.\n\n   @note this includes both the Main Memory area and the Reserved Pools\n         Memory Area */\nstatic XcpMemPoolDescriptor xcpMemPoolDescriptors[XCP_MEM_MAIN_RESERVED_POOL_NUMBER];\n\n/* xcpMemCustomPoolDescriptor stores the custom memory functions to allocate and\n   free memory for a specific memory pool */\nstatic XcpMemCustomPoolDescriptor xcpMemCustomPoolDescriptors[XCP_MEM_CUSTOM_POOL_MAX_NUMBER];\n\n\n/* Main memory chunk from which blocks are allocated using the xcpMemAlloc\n * This may not be aligned to XCP_MEM_ALIGNMENT depending on the compiler \n * and/or build flags.\n * Add padding bytes to the end to enable aligning blocks in xcpMemMainChunk\n * to aligned addresses if needed.\n */\nXCP_MEM_DATA_SECTION_BEGIN\nstatic uint8_T xcpMemMainChunk[XCP_MEM_MAIN_TOTAL_SIZE + PADDING];\nXCP_MEM_DATA_SECTION_END\n\n\n/* Reserved pools memory chunk from which pool blocks are allocated using the\n * xcpMemAllocFromPool()\n * Also refer to comments in xcpMemMainChunk\n */\nXCP_MEM_DATA_SECTION_BEGIN\nstatic uint8_T xcpMemReservedPoolsChunk[XCP_MEM_RESERVED_POOLS_TOTAL_SIZE + PADDING];\nXCP_MEM_DATA_SECTION_END\n\nstatic size_t  xcpMemReservedPoolsChunkUsedBytes;\n\n/* Mutex to prevent concurrent access to xcpMemPoolDescriptors, xcpMemMainChunk\n   and xcpMemReservedPoolsChunk\n   @note: the insertion/removal of blocks within each reserved pool is protected by a dedicated\n          lock, to reduce the interference between threads in multi-core applications */\nstatic XCP_MUTEX_DEFINE(xcpMemLock);\n\n\n/* Initialize pool's memory chunk, by creating the pool's memory blocks and as a linked list */\nstatic void xcpInitializePoolMemoryArea(uint8_T *memoryPtr, size_t blockSize, size_t blocksNumber)\n{\n    if (memoryPtr != NULL) {\n        XcpMemHeader *p, *prev = NULL;\n        size_t i;\n        /* Initialize memory to zero */\n        size_t totSize = XCP_MEM_BLOCK_SIZE_WITH_OVERHEAD(blockSize) * blocksNumber;\n        XCP_MEMSET(memoryPtr,  0, totSize);\n\n        for(i = 0 ; i < blocksNumber; ++i) {\n            p = (XcpMemHeader*) memoryPtr;\n            p -> next = NULL;\n            p -> poolId = XCP_FREE_POOL_ID;\n            if (prev) {\n                prev -> next = p;\n            }\n            memoryPtr += XCP_MEM_BLOCK_SIZE_WITH_OVERHEAD(blockSize);\n            prev = p;\n        }\n    }\n}\n\nXcpErrorCode xcpMemInit(void)\n{\n    uint8_T poolIdx;\n    uint8_T *memoryPtr = (uint8_T *)XCP_ALIGNED(xcpMemMainChunk);\n\n    XCP_MUTEX_INIT(xcpMemLock);\n\n\n#ifndef XCP_NO_MAIN_MEM_ALLOCATED\n    /* Sort main memory block */\n    xcpSortArray(xcpMemMainBlockSizes, xcpMemMainBlocksNumber, (size_t)XCP_MEM_MAIN_POOLS_NUMBER);\n\n    /* Initialize Main memory */\n    for(poolIdx = 0; poolIdx < XCP_MEM_MAIN_POOLS_NUMBER; ++poolIdx) {\n        size_t blocksCount = xcpMemMainBlocksNumber[poolIdx];\n        size_t blockSize = xcpMemMainBlockSizes[poolIdx];\n\n        xcpMemPoolDescriptors[poolIdx].head = (XcpMemHeader*) memoryPtr;\n        xcpMemPoolDescriptors[poolIdx].totalBlocksCount = blocksCount;\n        xcpMemPoolDescriptors[poolIdx].freeBlocksCount = blocksCount;\n        xcpMemPoolDescriptors[poolIdx].blockSize = blockSize;\n        xcpMemPoolDescriptors[poolIdx].poolSize =\n            blocksCount * XCP_MEM_BLOCK_SIZE_WITH_OVERHEAD(blockSize);\n#ifdef XCP_MEM_RESERVED_POOLS_LOCKLESS_SUPPORT\n        xcpMemPoolDescriptors[poolIdx].deferredFreeHead = NULL;\n        xcpMemPoolDescriptors[poolIdx].deferredFreeTail = NULL;\n        xcpMemPoolDescriptors[poolIdx].deferredFreeBlocksCount = 0;\n#else\n        XCP_MUTEX_INIT(xcpMemPoolDescriptors[poolIdx].lock);\n#endif\n\n        xcpInitializePoolMemoryArea(memoryPtr, blockSize, blocksCount);\n        memoryPtr += xcpMemPoolDescriptors[poolIdx].poolSize;\n    }\n#else\n    (void)memoryPtr;\n#endif\n\n    /* Initialize Reserved pools memory\n       @note since the allocation of the memory pools is dynamic,\n             the creation of the blocks for each pool is deferred\n             and carried out within the xcpMemReservedPoolCreate() */\n    XCP_MEMSET(xcpMemReservedPoolsChunk, 0, sizeof(xcpMemReservedPoolsChunk));\n    xcpMemReservedPoolsChunkUsedBytes = 0;\n\n    for(poolIdx = XCP_MEM_MAIN_POOLS_NUMBER; poolIdx < XCP_MEM_MAIN_RESERVED_POOL_NUMBER; ++poolIdx) {\n        xcpMemPoolDescriptors[poolIdx].head = XCP_FREE_POOL;\n        xcpMemPoolDescriptors[poolIdx].totalBlocksCount = 0;\n        xcpMemPoolDescriptors[poolIdx].freeBlocksCount = 0;\n        xcpMemPoolDescriptors[poolIdx].blockSize = 0;\n        xcpMemPoolDescriptors[poolIdx].poolSize = 0;\n#ifdef XCP_MEM_RESERVED_POOLS_LOCKLESS_SUPPORT\n        xcpMemPoolDescriptors[poolIdx].deferredFreeHead = NULL;\n        xcpMemPoolDescriptors[poolIdx].deferredFreeTail = NULL;\n        xcpMemPoolDescriptors[poolIdx].deferredFreeBlocksCount = 0;\n#else\n        XCP_MUTEX_INIT(xcpMemPoolDescriptors[poolIdx].lock);\n#endif\n    }\n\n    for(poolIdx = 0; poolIdx < XCP_MEM_CUSTOM_POOL_MAX_NUMBER; poolIdx++) {\n        xcpMemCustomPoolDescriptors[poolIdx].allocHandler = NULL;\n        xcpMemCustomPoolDescriptors[poolIdx].freeHandler = NULL;\n    }\n\n    return XCP_SUCCESS;\n}\n\n\nvoid* xcpMemAlloc(size_t size)\n{\n\n#ifndef XCP_NO_MAIN_MEM_ALLOCATED\n\n    uint8_T poolIdx;\n    size_t blockSize = 0;\n    XcpMemHeader *poolHead = NULL;\n\n    /* a size of 0 is considered an invalid argument */\n    if (size == 0) {\n        return NULL;\n    }\n\n    XCP_MUTEX_LOCK(xcpMemLock);\n\n    /* find the first large enough pool */\n    for(poolIdx = 0; poolIdx <  XCP_MEM_MAIN_POOLS_NUMBER; ++poolIdx) {\n        blockSize = xcpMemMainBlockSizes[poolIdx];\n        if ((size <= blockSize) && (xcpMemPoolDescriptors[poolIdx].freeBlocksCount > 0)) {\n            poolHead = xcpMemPoolDescriptors[poolIdx].head;\n            break;\n        }\n    }\n\n    if (!poolHead) { /* size is too large, or there are no more free blocks */\n       XCP_MUTEX_UNLOCK(xcpMemLock);\n       return NULL;\n    }\n\n    xcpMemPoolDescriptors[poolIdx].head = poolHead->next;\n    (xcpMemPoolDescriptors[poolIdx].freeBlocksCount)--;\n    poolHead->poolId = poolIdx;\n\n    XCP_MUTEX_UNLOCK(xcpMemLock);\n\n    /* return a pointer past just the poolId */\n    return ((uint8_T*) poolHead) + XCP_MEM_POOLID_SIZE;\n\n#else\n\n    (void)size;\n    return NULL;\n\n#endif\n\n}\n\n\nvoid xcpMemFree(void *ptr)\n{\n    if (ptr) {\n        /* the XcpMemHeader cell is 'behind' the user's pointer */\n        XcpMemHeader *hd = (XcpMemHeader*) ((uint8_T*)ptr - XCP_MEM_POOLID_SIZE);\n        uint8_T poolIdx = hd -> poolId;\n\n        if (poolIdx >= XCP_MEM_CUSTOM_POOLS_OFFSET && poolIdx < XCP_MEM_CUSTOM_POOLS_UPPER_BOUND) {\n            poolIdx = poolIdx - XCP_MEM_CUSTOM_POOLS_OFFSET;\n            if (xcpMemCustomPoolDescriptors[poolIdx].freeHandler) {\n                /* For custom memory pools, protection against concurrent\n                   exclusion must be guaranteed within the custom free method */\n                xcpMemCustomPoolDescriptors[poolIdx].freeHandler((uint8_T*)ptr - XCP_MEM_POOLID_SIZE);\n            }\n            return;\n        }\n\n        if ((poolIdx == XCP_FREE_POOL_ID) || (poolIdx >= XCP_MEM_MAIN_RESERVED_POOL_NUMBER)){\n            /* ill-formed block or already freed pointer */\n            XCP_PRINTF(\"xcpMemFree: invalid or double-freed pointer %p\\n\", ptr);\n            return;\n        }\n\n#ifndef XCP_NO_MAIN_MEM_ALLOCATED\n        /* insert the new free block in the front of the pool */\n        if (poolIdx < XCP_MEM_MAIN_POOLS_NUMBER) {\n            XCP_MUTEX_LOCK(xcpMemLock);\n\n            hd -> poolId = XCP_FREE_POOL_ID;\n            hd -> next = xcpMemPoolDescriptors[poolIdx].head;\n\n            xcpMemPoolDescriptors[poolIdx].head = hd;\n            ++(xcpMemPoolDescriptors[poolIdx].freeBlocksCount);\n\n            XCP_MUTEX_UNLOCK(xcpMemLock);\n        }\n        else\n#endif\n        {\n        #ifdef XCP_MEM_RESERVED_POOLS_LOCKLESS_SUPPORT\n            /* If lockless support is enabled, the freed memory block is\n               not immediately available for subsequent allocations,\n               until xcpMemReservedPoolFlushFreeMem is invoked */\n            hd -> poolId = XCP_FREE_POOL_ID;\n            hd -> next = xcpMemPoolDescriptors[poolIdx].deferredFreeHead;\n\n            if (xcpMemPoolDescriptors[poolIdx].deferredFreeTail == NULL) {\n                /* Let's save a reference to the first block in the pool\n                   that has been freed */\n                xcpMemPoolDescriptors[poolIdx].deferredFreeTail = hd;\n            }\n\n            xcpMemPoolDescriptors[poolIdx].deferredFreeHead = hd;\n            ++(xcpMemPoolDescriptors[poolIdx].deferredFreeBlocksCount);\n        #else\n            XCP_MUTEX_LOCK(xcpMemPoolDescriptors[poolIdx].lock);\n\n            hd -> poolId = XCP_FREE_POOL_ID;\n            hd -> next = xcpMemPoolDescriptors[poolIdx].head;\n\n            xcpMemPoolDescriptors[poolIdx].head = hd;\n            ++(xcpMemPoolDescriptors[poolIdx].freeBlocksCount);\n            XCP_MUTEX_UNLOCK(xcpMemPoolDescriptors[poolIdx].lock);\n        #endif\n        }\n    }\n}\n\n\nXcpErrorCode xcpMemReservedPoolCreate(size_t blockSize, size_t blocksNumber, xcpPoolId_T* poolId)\n{\n    uint8_T poolIdx;\n    uint8_T *currentHead = (uint8_T *) XCP_ALIGNED(xcpMemReservedPoolsChunk);\n    XcpErrorCode errorCode = XCP_SUCCESS;\n\n    xcpPoolId_T pool = XCP_INVALID_POOL_ID;\n    size_t requestedPoolSize;\n\n    if ((poolId == NULL) || (blockSize == 0) || (blocksNumber == 0)) {\n        XCP_PRINTF(\"xcpMemReservedPoolCreate: invalid input parameter\\n\");\n        return XCP_INV_ARG;\n    }\n\n    /* blockSize needs to be a multiple of XCP_MEM_ALIGNMENT in order to align blocks to aligned addresses.\n     * If the size is not a multiple, adjustment is done here.\n     */\n    blockSize = (size_t) XCP_ALIGNED(blockSize);\n\n    requestedPoolSize = blocksNumber * XCP_MEM_BLOCK_SIZE_WITH_OVERHEAD(blockSize);\n\n    XCP_MUTEX_LOCK(xcpMemLock);\n\n    for(poolIdx = XCP_MEM_MAIN_POOLS_NUMBER; poolIdx < XCP_MEM_MAIN_RESERVED_POOL_NUMBER; ++poolIdx) {\n        if (xcpMemPoolDescriptors[poolIdx].head == XCP_FREE_POOL) {\n            /* The pool is free, let's check if it is big enough */\n            if ((xcpMemPoolDescriptors[poolIdx].poolSize) == 0) {\n                /* The pool has never been allocated before, so this must be the last\n                   usable pool in the list */\n                if (requestedPoolSize <= (XCP_MEM_RESERVED_POOLS_TOTAL_SIZE - xcpMemReservedPoolsChunkUsedBytes)) {\n                    /* It is big enough, so let's mark it as allocated */\n                    xcpMemPoolDescriptors[poolIdx].head = (XcpMemHeader*) currentHead;\n                    xcpMemPoolDescriptors[poolIdx].totalBlocksCount = blocksNumber;\n                    xcpMemPoolDescriptors[poolIdx].freeBlocksCount = blocksNumber;\n                    xcpMemPoolDescriptors[poolIdx].blockSize = blockSize;\n                    xcpMemPoolDescriptors[poolIdx].poolSize = requestedPoolSize;\n                #ifdef XCP_MEM_RESERVED_POOLS_LOCKLESS_SUPPORT\n                    xcpMemPoolDescriptors[poolIdx].deferredFreeHead = NULL;\n                    xcpMemPoolDescriptors[poolIdx].deferredFreeTail = NULL;\n                    xcpMemPoolDescriptors[poolIdx].deferredFreeBlocksCount = 0;\n                #endif\n\n                    xcpInitializePoolMemoryArea(currentHead, blockSize, blocksNumber);\n                    xcpMemReservedPoolsChunkUsedBytes += requestedPoolSize;\n\n                    pool = poolIdx;\n                }\n                break; /* No more pools to process, exit from the loop */\n            } else {\n                /* The pool has already been allocated so it can't be re-sized */\n                if (requestedPoolSize <= xcpMemPoolDescriptors[poolIdx].poolSize) {\n                    /* It is big enough, so let's mark it as allocated */\n                    xcpMemPoolDescriptors[poolIdx].head = (XcpMemHeader*) currentHead;\n                    xcpMemPoolDescriptors[poolIdx].totalBlocksCount = blocksNumber;\n                    xcpMemPoolDescriptors[poolIdx].freeBlocksCount = blocksNumber;\n                    xcpMemPoolDescriptors[poolIdx].blockSize = blockSize;\n                #ifdef XCP_MEM_RESERVED_POOLS_LOCKLESS_SUPPORT\n                    xcpMemPoolDescriptors[poolIdx].deferredFreeHead = NULL;\n                    xcpMemPoolDescriptors[poolIdx].deferredFreeTail = NULL;\n                    xcpMemPoolDescriptors[poolIdx].deferredFreeBlocksCount = 0;\n                #endif\n\n                    xcpInitializePoolMemoryArea(currentHead, blockSize, blocksNumber);\n                    pool = poolIdx;\n                    break; /* We found what we were looking for, exit from the loop */\n                }\n            }\n        }\n\n        /* Let's continue to see if there are bigger memory areas available */\n        currentHead += xcpMemPoolDescriptors[poolIdx].poolSize;\n    }\n\n    XCP_MUTEX_UNLOCK(xcpMemLock);\n\n    if (pool == XCP_INVALID_POOL_ID) {\n        errorCode = XCP_NO_MEMORY;\n    }\n\n    *poolId = pool;\n\n    return errorCode;\n}\n\n\nXcpErrorCode xcpMemReservedPoolDestroy(xcpPoolId_T poolId)\n{\n    uint8_T poolIdx;\n    boolean_T isLastPool = true;\n\n    if ((poolId < XCP_MEM_MAIN_POOLS_NUMBER) || (poolId >= XCP_MEM_MAIN_RESERVED_POOL_NUMBER)) {\n        XCP_PRINTF(\"xcpMemReservedPoolDestroy: invalid input parameter\\n\");\n        return XCP_INV_ARG;\n    }\n\n    XCP_MUTEX_LOCK(xcpMemLock);\n\n    /* Check if the pool is the last one (i.e. the used pool with the highest id) */\n    for(poolIdx = (XCP_MEM_MAIN_RESERVED_POOL_NUMBER - 1); poolIdx > poolId; --poolIdx) {\n        if ((xcpMemPoolDescriptors[poolIdx].head != XCP_FREE_POOL) ||\n            (xcpMemPoolDescriptors[poolIdx].poolSize != 0)) {\n            isLastPool = false;\n            break; /* the pool is not the last, exit from the loop */\n        }\n    }\n\n    xcpMemPoolDescriptors[poolId].head = XCP_FREE_POOL;\n    xcpMemPoolDescriptors[poolId].totalBlocksCount = 0;\n    xcpMemPoolDescriptors[poolId].freeBlocksCount = 0;\n    xcpMemPoolDescriptors[poolId].blockSize = 0;\n\n#ifdef XCP_MEM_RESERVED_POOLS_LOCKLESS_SUPPORT\n    xcpMemPoolDescriptors[poolId].deferredFreeHead = NULL;\n    xcpMemPoolDescriptors[poolId].deferredFreeTail = NULL;\n    xcpMemPoolDescriptors[poolId].deferredFreeBlocksCount = 0;\n#endif\n\n    if (isLastPool) {\n        /* If it's the last pool we can de-allocate the memory, taking into account this pool\n           as well as the previous ones that have already been deallocated (out of order) */\n        for(poolIdx = XCP_MEM_MAIN_POOLS_NUMBER; poolIdx < XCP_MEM_MAIN_RESERVED_POOL_NUMBER; ++poolIdx) {\n            if ((xcpMemPoolDescriptors[poolIdx].head == XCP_FREE_POOL) &&\n                (xcpMemPoolDescriptors[poolIdx].poolSize != 0)) {\n                xcpMemReservedPoolsChunkUsedBytes -= xcpMemPoolDescriptors[poolIdx].poolSize;\n                xcpMemPoolDescriptors[poolIdx].poolSize = 0;\n            }\n        }\n    }\n\n    XCP_MUTEX_UNLOCK(xcpMemLock);\n\n    return XCP_SUCCESS;\n}\n\n\nXcpErrorCode xcpMemCustomPoolCreate(XcpCustomAllocHandler allocHandler, XcpCustomFreeHandler freeHandler, xcpPoolId_T* poolId)\n{\n    XcpErrorCode errorCode = XCP_SUCCESS;\n    uint8_T poolIdx;\n\n    xcpPoolId_T pool = XCP_INVALID_POOL_ID;\n\n    if ((poolId == NULL) || (allocHandler == NULL) || (freeHandler == NULL)) {\n        XCP_PRINTF(\"xcpMemCustomPoolCreate: invalid input parameter\\n\");\n        return XCP_INV_ARG;\n    }\n\n    XCP_MUTEX_LOCK(xcpMemLock);\n\n    for (poolIdx = 0; poolIdx < XCP_MEM_CUSTOM_POOL_MAX_NUMBER; poolIdx++) {\n        if (xcpMemCustomPoolDescriptors[poolIdx].allocHandler == NULL && xcpMemCustomPoolDescriptors[poolIdx].freeHandler == NULL) {\n            pool = poolIdx + XCP_MEM_CUSTOM_POOLS_OFFSET;\n            xcpMemCustomPoolDescriptors[poolIdx].allocHandler = allocHandler;\n            xcpMemCustomPoolDescriptors[poolIdx].freeHandler = freeHandler;\n            break;\n        }\n    }\n\n    XCP_MUTEX_UNLOCK(xcpMemLock);\n\n    if (pool == XCP_INVALID_POOL_ID) {\n        errorCode = XCP_NO_MEMORY;\n    }\n\n    *poolId = pool;\n\n    return errorCode;\n}\n\n\nXcpErrorCode xcpMemCustomPoolDestroy(xcpPoolId_T poolId)\n{\n    if (poolId < XCP_MEM_CUSTOM_POOLS_OFFSET || poolId >= XCP_MEM_CUSTOM_POOLS_UPPER_BOUND) {\n        XCP_PRINTF(\"xcpMemCustomPoolDestroy: invalid poolId\\n\");\n        return XCP_INV_ARG;\n    }\n\n    XCP_MUTEX_LOCK(xcpMemLock);\n\n    xcpMemCustomPoolDescriptors[poolId - XCP_MEM_CUSTOM_POOLS_OFFSET].allocHandler = NULL;\n    xcpMemCustomPoolDescriptors[poolId - XCP_MEM_CUSTOM_POOLS_OFFSET].freeHandler = NULL;\n\n    XCP_MUTEX_UNLOCK(xcpMemLock);\n\n    return XCP_SUCCESS;\n}\n\n\nvoid* xcpMemAllocFromPool(xcpPoolId_T poolId, size_t size)\n{\n    XcpMemHeader *poolHead = NULL;\n\n    /* a size of 0 is considered an invalid argument */\n    if (size == 0) {\n        return NULL;\n    }\n\n    /* Check if memory allocation is delegated to a custom handler.\n       For custom memory pools, protection against concurrent execution must be\n       implemented withing the allocation method */\n    if (poolId >= XCP_MEM_CUSTOM_POOLS_OFFSET && poolId < XCP_MEM_CUSTOM_POOLS_UPPER_BOUND) {\n        if (xcpMemCustomPoolDescriptors[poolId - XCP_MEM_CUSTOM_POOLS_OFFSET].allocHandler) {\n            /* Memory must be added explicitly to store the pool ID */\n            poolHead = (XcpMemHeader *) xcpMemCustomPoolDescriptors[poolId - XCP_MEM_CUSTOM_POOLS_OFFSET].allocHandler(size + XCP_MEM_POOLID_SIZE);\n            if (!poolHead) {\n                return NULL;\n            }\n            poolHead->poolId = (uint8_T) poolId;\n            return ((uint8_T*) poolHead) + XCP_MEM_POOLID_SIZE;\n        }\n        return NULL;\n    }\n    \n    if ((poolId < XCP_MEM_MAIN_POOLS_NUMBER) || (poolId >= XCP_MEM_MAIN_RESERVED_POOL_NUMBER) ||\n        (xcpMemPoolDescriptors[poolId].head == XCP_FREE_POOL) ||\n        (xcpMemPoolDescriptors[poolId].blockSize < size)) {\n        /* No memory block of the given size is available from this pool */\n        return NULL;\n    }\n\n#ifndef XCP_MEM_RESERVED_POOLS_LOCKLESS_SUPPORT\n    XCP_MUTEX_LOCK(xcpMemPoolDescriptors[poolId].lock);\n#endif\n\n    if (xcpMemPoolDescriptors[poolId].freeBlocksCount > 0) {\n        poolHead = xcpMemPoolDescriptors[poolId].head;\n    }\n\n    if (!poolHead){ /* there are no more free blocks */\n#ifndef XCP_MEM_RESERVED_POOLS_LOCKLESS_SUPPORT\n       XCP_MUTEX_UNLOCK(xcpMemPoolDescriptors[poolId].lock);\n#endif\n       return NULL;\n    }\n\n    xcpMemPoolDescriptors[poolId].head = poolHead->next;\n    (xcpMemPoolDescriptors[poolId].freeBlocksCount)--;\n    poolHead->poolId = (uint8_T) poolId;\n\n#ifndef XCP_MEM_RESERVED_POOLS_LOCKLESS_SUPPORT\n    XCP_MUTEX_UNLOCK(xcpMemPoolDescriptors[poolId].lock);\n#endif\n\n    /* return a pointer past just the poolId */\n    return ((uint8_T*) poolHead) + XCP_MEM_POOLID_SIZE;\n\n}\n\n\n#ifdef XCP_MEM_RESERVED_POOLS_LOCKLESS_SUPPORT\nvoid xcpMemReservedPoolFlushFreeMem(xcpPoolId_T poolId)\n{\n    if ((poolId >= XCP_MEM_MAIN_POOLS_NUMBER) &&\n        (poolId < XCP_MEM_MAIN_RESERVED_POOL_NUMBER) &&\n        (xcpMemPoolDescriptors[poolId].deferredFreeTail != NULL)) {\n        /* Let's move the deferred free blocks to the list of free blocks\n           available for subsequent allocations */\n        xcpMemPoolDescriptors[poolId].deferredFreeTail->next = xcpMemPoolDescriptors[poolId].head;\n        xcpMemPoolDescriptors[poolId].head = xcpMemPoolDescriptors[poolId].deferredFreeHead;\n        xcpMemPoolDescriptors[poolId].freeBlocksCount += xcpMemPoolDescriptors[poolId].deferredFreeBlocksCount;\n        xcpMemPoolDescriptors[poolId].deferredFreeBlocksCount = 0;\n        xcpMemPoolDescriptors[poolId].deferredFreeTail = NULL;\n    }\n}\n#endif\n\n\nXcpErrorCode xcpMemReset(void){\n    XCP_MEMSET(xcpMemMainChunk,          0, sizeof(xcpMemMainChunk));\n    XCP_MEMSET(xcpMemReservedPoolsChunk, 0, sizeof(xcpMemReservedPoolsChunk));\n    xcpMemReservedPoolsChunkUsedBytes = 0;\n\n    XCP_MEMSET(xcpMemPoolDescriptors,    0, sizeof(xcpMemPoolDescriptors));\n\n    XCP_MEMSET(xcpMemCustomPoolDescriptors, 0, sizeof(xcpMemCustomPoolDescriptors));\n\n    return XCP_SUCCESS;\n}\n\n#ifdef XCP_DEBUG_SUPPORT\n\nvoid xcpMemPrintDiagnostics(void)\n{\n    uint8_T poolIdx;\n    XCP_PRINTF(\"#############################\\n\");\n    XCP_PRINTF(\"             Header size: %7zu B\\n\", XCP_MEM_HEADER_SIZE);\n    XCP_PRINTF(\"             Offset size: %7zu B\\n\", XCP_MEM_POOLID_SIZE);\n    XCP_PRINTF(\"      Main System memory: %7zu B\\n\", XCP_MEM_MAIN_SYSTEM_SIZE);\n    XCP_PRINTF(\"        Main User memory: %7zu B\\n\", XCP_MEM_MAIN_USER_SIZE);\n    XCP_PRINTF(\"       Main Total memory: %7zu B\\n\", XCP_MEM_MAIN_TOTAL_SIZE);\n\n    for(poolIdx = 0 ; poolIdx < XCP_MEM_MAIN_POOLS_NUMBER ; ++poolIdx) {\n        size_t bsThisPool = xcpMemMainBlockSizes[poolIdx];\n        size_t nbBlocksThisPool = xcpMemPoolDescriptors[poolIdx].totalBlocksCount;\n        size_t nbFreeBlocksThisPool = xcpMemPoolDescriptors[poolIdx].freeBlocksCount;\n        XCP_PRINTF(\"%6zu B blocks: %4zu/%-4zu\\n\", bsThisPool, nbFreeBlocksThisPool, nbBlocksThisPool);\n    }\n    XCP_PRINTF(\"               (free)/(total)\\n\");\n    XCP_PRINTF(\"#############################\\n\");\n\n    XCP_PRINTF(\"        Res Pools Number: %7d   \\n\", XCP_MEM_RESERVED_POOLS_NUMBER);\n    XCP_PRINTF(\"  Res Pools Total memory: %7zu B\\n\", (size_t)XCP_MEM_RESERVED_POOLS_TOTAL_SIZE);\n    XCP_PRINTF(\"   Res Pools Used memory: %7zu B\\n\", xcpMemReservedPoolsChunkUsedBytes);\n\n    for(poolIdx = XCP_MEM_MAIN_POOLS_NUMBER ; poolIdx < XCP_MEM_MAIN_RESERVED_POOL_NUMBER ; ++poolIdx) {\n        size_t nbBlocksThisPool = xcpMemPoolDescriptors[poolIdx].totalBlocksCount;\n        size_t nbFreeBlocksThisPool = xcpMemPoolDescriptors[poolIdx].freeBlocksCount;\n        size_t sizeBlocksThisPool = xcpMemPoolDescriptors[poolIdx].blockSize;\n        XCP_PRINTF(\"Pool %3d blocks: %4zu/%-4zu of size %7zu\\n\", poolIdx, nbFreeBlocksThisPool, nbBlocksThisPool, sizeBlocksThisPool);\n    }\n    XCP_PRINTF(\"               (free)/(total)\\n\");\n}\n\n#endif\n\n#ifdef XCP_MEM_BYTE_COPY_SUPPORT\n/* xcpMemcpyByte() currently supports byte-wise copy on WORD (HW_AG=2) addressable targets only */\nvoid xcpMemcpyByte(void *pDst, uint8_T dstOffsetBytes, void const* pSrc, uint8_T srcOffsetBytes, size_t numOfBytes)\n{\n    uint16_T *dst = (uint16_T *)pDst;\n    uint16_T const* src = (uint16_T const*)pSrc;\n\n    if (numOfBytes >= 1) {\n        size_t numOfAGUnits = ((numOfBytes + 1) >> 1);\n        \n        if ((dstOffsetBytes == 0) && (srcOffsetBytes == 0)){\n            if (numOfBytes % 2){\n                numOfAGUnits--;\n                XCP_MEMCPY(dst, src, numOfAGUnits);\n                dst[numOfAGUnits] &= 0xff00;\n                dst[numOfAGUnits] |= (src[numOfAGUnits] & 0x00ff);\n            }\n            else {\n                XCP_MEMCPY(dst, src, numOfAGUnits);\n            }\n        }\n        else if ((dstOffsetBytes == 1) && (srcOffsetBytes == 0)){\n            uint32_T i = 0;\n            dst[0] &= 0x00ff;\n            dst[0] |= ((src[0] & 0x00ff) << 8);\n            for (i = 1; i < numOfAGUnits; i++){\n                dst[i]  = ((src[i-1] & 0xff00) >> 8);\n                dst[i] |= ((src[i] & 0x00ff) << 8);\n            }\n            if ((numOfBytes % 2) == 0){\n                dst[i] &= 0xff00;\n                dst[i] |= ((src[i-1] & 0xff00) >> 8);\n            }\n        }\n        else if ((dstOffsetBytes == 0) && (srcOffsetBytes == 1)){\n            uint32_T i = 0;\n            dst[0] = ((src[0] & 0xff00) >> 8);\n            if (numOfBytes >= 2) {\n                dst[0] |= ((src[1] & 0x00ff) << 8);\n                for (i = 1; i < numOfAGUnits-1; i++){\n                    dst[i]  = ((src[i] & 0xff00) >> 8);\n                    dst[i] |= ((src[i+1] & 0x00ff) << 8);\n                }\n                if (numOfBytes % 2){\n                    dst[i] &= 0xff00;\n                    dst[i] |= ((src[i] & 0xff00) >> 8);\n                }\n            }\n        }\n        else if ((dstOffsetBytes == 1) && (srcOffsetBytes == 1)){\n            dst[0] &= 0x00ff;\n            dst[0] |= (src[0] & 0xff00);\n            numOfBytes--;\n            numOfAGUnits--;\n            dst++;\n            src++;\n            XCP_MEMCPY(dst, src, numOfAGUnits);\n            if ((numOfBytes % 2) != 0){\n                dst[numOfAGUnits] &= 0xff00;\n                dst[numOfAGUnits] |= (src[numOfAGUnits] & 0x00ff);\n            }\n        }\n    }\n}\n\n#endif\n"},{"name":"xcp_standard.c","type":"source","group":"legacy","path":"C:\\Program Files\\MATLAB\\R2023a\\toolbox\\coder\\xcp\\src\\target\\slave\\protocol\\src","tag":"","groupDisplay":"Other files","code":"/*\n* Copyright 2016-2022 The MathWorks, Inc.\n*\n* File: xcp_standard.c\n*\n* Abstract:\n*  Implementation of XCP Protocol Layer standard commands\n*/\n\n#include \"xcp_common.h\"\n#include \"xcp.h\"\n#include \"xcp_cfg.h\"\n#include \"xcp_types.h\"\n#include \"xcp_transport_internal.h\"\n#include \"xcp_daq.h\"\n#include \"xcp_standard.h\"\n#include \"xcp_standard_ext.h\"\n#include \"xcp_standard_types.h\"\n\n\n/*****************************************************************************\n    Internal Variables\n******************************************************************************/\nstatic XcpAddress xcpMta = {0,0};   /* MTA and MTA extension in same format as in SET_MTA packet, used by (SHORT)_UPLOAD, (SHORT)_DOWNLOAD */\nstatic uint8_T xcpUploadSize = 0;\n\n\n/*****************************************************************************\n    Internal Utility Functions\n******************************************************************************/\nstatic boolean_T isValidUploadSize(uint8_T size)\n{\n    size_t addressGranularity = XCP_ADDRESS_GRANULARITY_BYTES_NUMBER;\n    size_t maxCtoSize = xcpTransportMaxCtoSize();\n\n    return (size < ((maxCtoSize) / addressGranularity));\n}\n\n/** memcpy function used to copy data from MTA address to the packet */\nstatic void xcpMemcpyFromMTA(uint8_T *pktData, uint8_T dstOffsetBytes)\n{\n    /* Retrieve memory address */\n    uint8_T *xcpMTARawPointer = xcpStandardGetAddressFromMta();\n\n    XCP_PRINTF(\"reading at address %p\\n\", xcpMTARawPointer);\n\n#ifdef XCP_EMULATE_BYTE_ADDRESSABLE_TARGET\n{\n    uint32_T address;\n    uint8_T addressExtension;\n    uint8_T srcOffsetBytes;\n    xcpStandardGetMta(&address, &addressExtension);\n    srcOffsetBytes = XCP_BYTE_OFFSET_GET(address);\n    if (dstOffsetBytes) { pktData--; }\n    xcpMemcpyByte(pktData, dstOffsetBytes, xcpMTARawPointer, srcOffsetBytes, xcpUploadSize);\n}\n#else\n    XCP_UNUSED_PARAM(dstOffsetBytes);\n    XCP_MEMCPY(pktData, xcpMTARawPointer, xcpUploadSize);\n#endif\n\n}\n\n/*****************************************************************************\n    XCP CONNECT\n******************************************************************************/\n#define XCP_NO_RESOURCES  0x00\n\nstatic const uint8_T xcpResourceValue = (\n    XCP_NO_RESOURCES\n#ifdef XCP_DAQ_SUPPORT\n    | XCP_RESOURCE_DAQ_MASK\n#endif\n#ifdef XCP_STIM_SUPPORT\n    | XCP_RESOURCE_STIM_MASK\n#endif\n#ifdef XCP_PGM_SUPPORT\n    | XCP_RESOURCE_PGM_MASK\n#endif\n#ifdef XCP_CALIBRATION_SUPPORT\n    | XCP_RESOURCE_CAL_PAG_MASK\n#endif\n    );\n\nstatic const uint8_T xcpCommModeBaseValue = (\n    (XCP_ADDRESS_GRANULARITY << XCP_COMM_MODE_ADDRESS_GRANULARITY_OFFSET)\n#if (XCP_BYTE_ORDER != 0)\n    | XCP_COMM_MODE_BYTE_ORDER_MASK\n#endif\n#ifdef XCP_BLOCK_MODE_SUPPORT\n    | XCP_COMM_MODE_SLAVE_BLOCK_MODE_MASK\n#endif\n#ifdef XCP_COMM_MODE_INFO_SUPPORT\n    | XCP_COMM_MODE_OPTIONAL_MASK\n#endif\n    );\n\nstatic XcpProtoErrorCode connectInputPacketHandler(void   *msgBuffer,\n                                                   size_t  xcpPacketOffset,\n                                                   size_t *outputPacketSize)\n{\n    XcpProtoErrorCode protoErrorCode = XCP_PROTO_SUCCESS;\n    uint8_T *packet = (uint8_T *)msgBuffer + xcpPacketOffset;\n    XcpConnectCmdPacketFrame *frame = (XcpConnectCmdPacketFrame *) packet;\n    boolean_T ok = false;\n\n    /* If DAQ List support is enabled, reset the status of dynamic DAQ list data structures */\n    ok = xcpResetDaqListStatus();\n\n    XCP_INPUT_PKT_ERROR_IF(!ok, XCP_PROTO_BUSY,\n        (\"CONNECT: DAQ lists reset cannot be carried out, as an event was processed\\n\"));\n\n    /* Validate command inputs */\n    ok = (frame->mode == XCP_CONNECT_MODE_NORMAL) || (frame->mode == XCP_CONNECT_MODE_USER_DEFINED);\n    XCP_INPUT_PKT_ERROR_IF(!ok, XCP_PROTO_OUT_OF_RANGE,\n                          (\"CONNECT: invalid mode detected %xH\\n\", frame->mode));\n\n    /* Everything is fine -> updating the Protocol Layer status */\n    XCP_PRINTF(\"CONNECT: entering XCP_CONNECTED status\\n\");\n    xcpStatusSet(XCP_CONNECTED);\n\n    protoErrorCode = XCP_PROTO_SUCCESS;\n    *outputPacketSize = XCP_CONNECT_RES_PACKET_SIZE_IN_BYTES;\n\n    return protoErrorCode;\n}\n\nstatic void connectOutputPacketHandler(XcpProtoErrorCode inputCode, void *packet, size_t packetSize)\n{\n    if (inputCode == XCP_PROTO_SUCCESS) {\n        /* Fill connect response */\n        XcpConnectResPacketFrame *frame = (XcpConnectResPacketFrame *)packet;\n        XCP_MEMSET(frame, 0, sizeof(*frame));\n\n        frame->PID = XCP_PID_RES;\n\n        /* Update resource field */\n        frame->resource = xcpResourceValue;\n\n        /* Update commModeBasic field */\n        frame->commModeBasic = xcpCommModeBaseValue;\n\n        /* Update Max CTO and DTO fields */\n        frame->maxCtoSize = (uint8_T)xcpTransportMaxCtoSize();\n        frame->maxDtoSize = (uint16_T)xcpTransportMaxDtoSize();\n\n        /* Update Protocol and Transport Version fields */\n        frame->xcpProtocolVersion  = XCP_MAJOR_NUMBER(XCP_PROTOCOL_LAYER_VERSION);\n        frame->xcpTransportVersion = XCP_MAJOR_NUMBER(XCP_TRANSPORT_LAYER_VERSION);\n\n        XCP_PRINTF(\"* Resource:          %xH\\n\", frame->resource);\n        XCP_PRINTF(\"* Comm Mode Basic:   %xH\\n\", frame->commModeBasic);\n        XCP_PRINTF(\"* Max CTO size:      %d\\n\",  frame->maxCtoSize);\n        XCP_PRINTF(\"* Max DTO size:      %d\\n\",  frame->maxDtoSize);\n        XCP_PRINTF(\"* Protocol Version:  %d\\n\",  frame->xcpProtocolVersion);\n        XCP_PRINTF(\"* Transport Version: %d\\n\",  frame->xcpTransportVersion);\n    }\n    else {\n        genericOutputPacketHandler(inputCode, packet, packetSize);\n    }\n}\n\n/*****************************************************************************\n    XCP DISCONNECT\n******************************************************************************/\nstatic XcpProtoErrorCode disconnectInputPacketHandler(void   *msgBuffer,\n                                                      size_t  xcpPacketOffset,\n                                                      size_t *outputPacketSize)\n{\n    boolean_T ok = true;\n\n    XCP_UNUSED_PARAM(msgBuffer);\n    XCP_UNUSED_PARAM(xcpPacketOffset);\n\n    /* If DAQ List support is enabled, reset the status of dynamic DAQ list data structures */\n    ok = xcpResetDaqListStatus();\n\n    XCP_INPUT_PKT_ERROR_IF(!ok, XCP_PROTO_BUSY,\n        (\"DISCONNECT: DAQ lists reset cannot be carried out, as an event was processed\\n\"));\n\n    /* Everything is fine -> proceed with the status update */\n    XCP_PRINTF(\"DISCONNECT: entering XCP_DISCONNECTED status\\n\");\n    xcpStatusSet(XCP_DISCONNECTED);\n\n    *outputPacketSize = XCP_GENERIC_RES_PACKET_SIZE_IN_BYTES;\n\n    return XCP_PROTO_SUCCESS;\n}\n\n/*****************************************************************************\n    XCP GET_STATUS\n******************************************************************************/\nstatic XcpProtoErrorCode getStatusInputPacketHandler(void   *msgBuffer,\n                                                     size_t  xcpPacketOffset,\n                                                     size_t *outputPacketSize)\n{\n    XCP_UNUSED_PARAM(msgBuffer);\n    XCP_UNUSED_PARAM(xcpPacketOffset);\n\n    XCP_PRINTF(\"GET STATUS\\n\");\n\n    *outputPacketSize = XCP_GET_STATUS_RES_PACKET_SIZE_IN_BYTES;\n\n    return XCP_PROTO_SUCCESS;\n}\n\nstatic void getStatusOutputPacketHandler(XcpProtoErrorCode inputCode, void *packet, size_t packetSize)\n{\n    XcpGetStatusResPacketFrame *frame = (XcpGetStatusResPacketFrame *)packet;\n\n    XCP_UNUSED_PARAM(inputCode);\n    XCP_UNUSED_PARAM(packetSize);\n\n    /* Fill Get Status response */\n    XCP_MEMSET(frame, 0, sizeof(*frame));\n\n    frame->PID                      = XCP_PID_RES;\n    frame->sessionStatus            = xcpSessionStatusGet();\n    frame->resourceProtectionStatus = xcpResourceProtectionStatusGet();\n    frame->sessionConfigurationId   = xcpSessionConfigurationIdGet();\n\n    XCP_PRINTF(\"* Session Status:              %xH\\n\", frame->sessionStatus);\n    XCP_PRINTF(\"* Resource Protection Status:  %xH\\n\", frame->resourceProtectionStatus);\n    XCP_PRINTF(\"* Session Config Id:           %d\\n\", frame->sessionConfigurationId);\n}\n\n/*****************************************************************************\n    XCP SYNCH\n******************************************************************************/\n#define XCP_SYNC_RES_PACKET_SIZE_IN_BYTES 2\n\nstatic XcpProtoErrorCode synchInputPacketHandler(void   *msgBuffer,\n                                                 size_t  xcpPacketOffset,\n                                                 size_t *outputPacketSize)\n{\n    boolean_T locked = false;\n\n    XCP_UNUSED_PARAM(msgBuffer);\n    XCP_UNUSED_PARAM(xcpPacketOffset);\n\n    XCP_PRINTF(\"SYNCH\\n\");\n\n    /* Make sure that no DAQ list is currently\n       in the process of sending packets */\n    locked = xcpDaqLock();\n\n    if (locked) {\n        /* Re-synchronizing the transport layer, by flushing the TX packets currently\n           in the TX FIFO and restarting the frame handler */\n        xcpTransportResynch();\n\n        xcpDaqUnlock();\n    }\n\n    *outputPacketSize = XCP_SYNC_RES_PACKET_SIZE_IN_BYTES;\n\n    return XCP_PROTO_SYNCH;\n}\n\n\n#if XCP_SET_MTA_ENABLE == 1\n/*****************************************************************************\n    XCP SET_MTA\n******************************************************************************/\n    static XcpProtoErrorCode setMTAInputPacketHandler(void  *msgBuffer, \n        size_t  xcpPacketOffset, \n        size_t *outputPacketSize) {\n\n        XcpProtoErrorCode protoErrorCode = XCP_PROTO_SUCCESS;\n        uint8_T *packet = (uint8_T *)msgBuffer + xcpPacketOffset;\n        XcpSetMTACmdPacketFrame *frame = (XcpSetMTACmdPacketFrame *)packet;\n        boolean_T ok = false;\n\n        /* Check if the memory address is valid and set the MTA pointer */\n        ok = xcpStandardSetMta(frame->address, (uint8_T)frame->addressExtension);\n        XCP_INPUT_PKT_ERROR_IF(!ok, XCP_PROTO_ACCESS_DENIED, (\"SET_MTA: invalid address\\n\"));\n        \n        XCP_PRINTF(\"SET_MTA: setting MTA value to %x and extension %x\\n\", frame->address, frame->addressExtension);    \n\n        *outputPacketSize = sizeof(XcpGenericResPacketFrame);\n\n        return protoErrorCode;\n    }\n\n/*****************************************************************************\n    XCP UPLOAD\n******************************************************************************/\n    static XcpProtoErrorCode uploadInputPacketHandler(void   *msgBuffer,\n        size_t  xcpPacketOffset,\n        size_t *outputPacketSize) {\n\n        XcpProtoErrorCode protoErrorCode = XCP_PROTO_SUCCESS;\n        uint8_T *packet = (uint8_T *)msgBuffer + xcpPacketOffset;\n        XcpUploadCmdPacketFrame *frame = (XcpUploadCmdPacketFrame *)packet;\n        boolean_T ok = false;\n        uint8_T *xcpMTARawPointer = xcpStandardGetAddressFromMta();\n\n        /* Check if the number of data elements is valid */\n        ok = isValidUploadSize((uint8_T)frame->size);\n        XCP_INPUT_PKT_ERROR_IF(!ok, XCP_PROTO_OUT_OF_RANGE,\n            (\"UPLOAD: invalid number of data elements (%d)\\n\", (uint8_T)frame->size));\n        \n        /* Check if a valid MTA address is available */\n        XCP_INPUT_PKT_ERROR_IF(xcpMTARawPointer == 0, XCP_PROTO_ACCESS_DENIED,\n            (\"UPLOAD: invalid address\\n\"));\n        \n        xcpUploadSize = (uint8_T)frame->size;\n        *outputPacketSize = XCP_UPLOAD_RES_PACKET_SIZE_IN_BYTES + XCP_IN_BYTES(xcpUploadSize);\n\n        return protoErrorCode;\n    }\n\n    \n    static void uploadOutputPacketHandler(XcpProtoErrorCode inputCode, void *packet, size_t packetSize) {\n        \n        if (inputCode == XCP_PROTO_SUCCESS) {\n\n            /* Fill Upload response */\n            uint8_T *xcpMTARawPointer = xcpStandardGetAddressFromMta();\n            XcpUploadResPacketFrame *frame = (XcpUploadResPacketFrame *)packet;\n            XCP_MEMSET(frame, 0, sizeof(*frame));\n            frame->PID = XCP_PID_RES;\n\n            if ((xcpMTARawPointer != NULL) &&\n                (packetSize == (XCP_UPLOAD_RES_PACKET_SIZE_IN_BYTES + XCP_IN_BYTES(xcpUploadSize)))\n                ) {\n                uint8_T *pktData = (uint8_T *)packet + XCP_IN_AG(XCP_UPLOAD_RES_PACKET_SIZE_IN_BYTES);\n                uint8_T dstOffsetBytes = (XCP_UPLOAD_RES_PACKET_SIZE_IN_BYTES % XCP_HARDWARE_ADDRESS_GRANULARITY_BYTES_NUMBER);\n\n                XCP_PRINTF(\"UPLOAD: \");\n                \n                /* Copy the memory content to the packet data area */\n                xcpMemcpyFromMTA(pktData, dstOffsetBytes);\n\n                /* Post-increment MTA by the frame size in address granularity units */\n                xcpStandardIncrementMta(xcpUploadSize);\n                xcpUploadSize = 0;\n            }\n            else {\n                /* This is a software error and it should never happen */\n                XCP_PRINTF(\"UPLOAD: invalid data detected\\n\");\n            }\n        }\n        else {\n            genericOutputPacketHandler(inputCode, packet, packetSize);\n        }\n    }\n#endif  /* XCP_SET_MTA_ENABLE == 1  */\n\n\n/*****************************************************************************\n    XCP SHORT_UPLOAD\n******************************************************************************/\nstatic XcpProtoErrorCode shortUploadInputPacketHandler(void   *msgBuffer,\n    size_t  xcpPacketOffset,\n    size_t *outputPacketSize)\n{\n    XcpProtoErrorCode protoErrorCode = XCP_PROTO_SUCCESS;\n    uint8_T *packet = (uint8_T *)msgBuffer + xcpPacketOffset;\n    XcpShortUploadCmdPacketFrame *frame = (XcpShortUploadCmdPacketFrame *)packet;\n    boolean_T ok = false;\n\n    /* Check if the number of data elements is valid */\n    ok = isValidUploadSize((uint8_T)frame->size);\n    XCP_INPUT_PKT_ERROR_IF(!ok, XCP_PROTO_OUT_OF_RANGE,\n        (\"SHORT_UPLOAD: invalid number of data elements (%d)\\n\", (uint8_T)frame->size));\n\n    /* Check if the memory address is valid and set the MTA pointer */\n    ok = xcpStandardSetMta(frame->address, (uint8_T)frame->addressExtension);\n    XCP_INPUT_PKT_ERROR_IF(!ok, XCP_PROTO_ACCESS_DENIED, (\"SHORT_UPLOAD: invalid address\\n\"));\n\n    xcpUploadSize = (uint8_T)frame->size;\n\n    *outputPacketSize = XCP_SHORT_UPLOAD_RES_PACKET_SIZE_IN_BYTES + XCP_IN_BYTES(xcpUploadSize);\n\n    return protoErrorCode;\n}\n\nstatic void shortUploadOutputPacketHandler(XcpProtoErrorCode inputCode, void *packet, size_t packetSize)\n{    \n    if (inputCode == XCP_PROTO_SUCCESS) {\n\n        /* Fill Short Upload response */\n        uint8_T *xcpMTARawPointer = xcpStandardGetAddressFromMta();\n        XcpShortUploadResPacketFrame *frame = (XcpShortUploadResPacketFrame *)packet;\n        XCP_MEMSET(frame, 0, sizeof(*frame));\n\n        frame->PID = XCP_PID_RES;\n\n        if ((xcpMTARawPointer != NULL) &&\n            (packetSize == XCP_SHORT_UPLOAD_RES_PACKET_SIZE_IN_BYTES + XCP_IN_BYTES(xcpUploadSize) )\n           ) {\n            uint8_T *pktData = (uint8_T *)packet + XCP_IN_AG(XCP_SHORT_UPLOAD_RES_PACKET_SIZE_IN_BYTES);\n            uint8_T dstOffsetBytes = (XCP_SHORT_UPLOAD_RES_PACKET_SIZE_IN_BYTES % XCP_HARDWARE_ADDRESS_GRANULARITY_BYTES_NUMBER);\n\n            XCP_PRINTF(\"SHORT_UPLOAD: \");\n\n            /* Copy the memory content to the packet data area */\n            xcpMemcpyFromMTA(pktData, dstOffsetBytes);\n\n            /* Post-increment MTA by the frame size in address granularity units */\n            xcpStandardIncrementMta(xcpUploadSize);\n\n            xcpUploadSize = 0;\n        }\n        else {\n            /* This is a software error and it should never happen */\n            XCP_PRINTF(\"SHORT_UPLOAD: invalid data detected\\n\");\n        }\n    }\n    else {\n        genericOutputPacketHandler(inputCode, packet, packetSize);\n    }\n}\n\n\n/** This table contains the list of supported Rx packets and the corresponding handlers */\nstatic const XcpPacketHandlers standardSupportedRxPacket[] =\n{\n    { XCP_PID_CONNECT,      connectInputPacketHandler,     connectOutputPacketHandler },\n    { XCP_PID_DISCONNECT,   disconnectInputPacketHandler,  genericOutputPacketHandler },\n    { XCP_PID_GET_STATUS,   getStatusInputPacketHandler,   getStatusOutputPacketHandler },\n    { XCP_PID_SYNCH,        synchInputPacketHandler,       genericOutputPacketHandler },\n#if XCP_SET_MTA_ENABLE == 1  \n    { XCP_PID_SET_MTA,      setMTAInputPacketHandler,      genericOutputPacketHandler },\n    { XCP_PID_UPLOAD,       uploadInputPacketHandler,      uploadOutputPacketHandler},\n#endif\n    { XCP_PID_SHORT_UPLOAD, shortUploadInputPacketHandler, shortUploadOutputPacketHandler }\n};\n\n\n\n/*****************************************************************************\n    XCP Packet Lookup Function for basic standard commands\n******************************************************************************/\n\n/* Default Standard Packet Lookup function, supporting only basic commands\n   listed in the table above */\nstatic const XcpPacketHandlers* getPacket(XcpRxPidCode pid)\n{\n    return xcpFindPacket(pid, standardSupportedRxPacket,\n                         XCP_ELEMENTS_NUMBER(standardSupportedRxPacket));\n}\n\nstatic XcpPacketLookupFunction packetLookup = NULL;\n\n\n\n/*****************************************************************************\n    Public Functions (invoked within the Protocol Layer)\n******************************************************************************/\nvoid xcpStandardInit(void)\n{\n    /* Initialize the packet lookup function to support only basic\n       standard commands */\n    xcpStandardSetPacketLookup(getPacket);\n\n    /* Initialize support for the extended list of Standard commands\n       @note this may override the default Packet lookup function\n             by adding support for more (optional) commands */\n    xcpStandardExtendedInit();\n}\n\n\nXcpPacketLookupFunction xcpStandardGetPacketLookup(void)\n{\n    return packetLookup;\n}\n\n\nvoid xcpStandardSetPacketLookup(XcpPacketLookupFunction getPacket)\n{\n    packetLookup = getPacket;\n}\n\n\nvoid xcpStandardReset(void)\n{\n    /* reset support for the extended list of Standard commands */\n    xcpStandardExtendedReset();\n\n    /* Restore the original value for the lookup function */\n    xcpStandardSetPacketLookup(NULL);\n}\n\n\nuint8_T* xcpStandardGetAddressFromMta(void) {\n    return XCP_ADDRESS_GET_WRITE(xcpMta.addressExtension, xcpMta.address);\n}\n\n\nboolean_T xcpStandardSetMta(uint32_T address, uint8_T addressExtension) {\n    if ((addressExtension == 0) && (address == 0)) {\n        return false;\n    } else {\n        xcpMta.address = address;\n        xcpMta.addressExtension = addressExtension;\n        return true;\n    }\n}\n\n\nvoid xcpStandardGetMta(uint32_T *address, uint8_T *addressExtension) {\n    *address = xcpMta.address;\n    *addressExtension = xcpMta.addressExtension;\n}\n\n\nvoid xcpStandardIncrementMta(uint8_T incr) {\n    xcpMta.address += incr;\n}\n\n\n#ifndef XCP_STANDARD_EXTENDED_SUPPORT\n\nvoid xcpStandardExtendedInit(void) {}\nvoid xcpStandardExtendedReset(void) {}\n\n#endif\n"},{"name":"xcp_transport.c","type":"source","group":"legacy","path":"C:\\Program Files\\MATLAB\\R2023a\\toolbox\\coder\\xcp\\src\\target\\slave\\transport\\src","tag":"","groupDisplay":"Other files","code":"/*\n* Copyright 2016-2021 The MathWorks, Inc.\n*\n* File: xcp_transport.c\n*\n* Abstract:\n*  Implementation of XCP Transport Layer.\n*  The file contains the common part that is responsible for the handling\n*  of Tx/Rx buffers and relies on the Xcp Driver and Xcp Frame Handler layers\n*  for sending and receiving data to/from the supported transport layer specification\n*/\n\n#include \"xcp_common.h\"\n#include \"xcp.h\"\n#include \"xcp_transport.h\"\n#include \"xcp_transport_types.h\"\n#include \"xcp_transport_internal.h\"\n#include \"xcp_frame.h\"\n#include \"xcp_fifo.h\"\n#include \"xcp_mem.h\"\n#ifdef XCP_LOCKLESS_SYNC_DATA_TRANSFER_SUPPORT\n#include \"xcp_daq_types.h\"\n#endif\n\n/** Number of supported Tx queues */\n\n#define XCP_TRANSPORT_TX_QUEUES_TYPES_NUMBER     2\n\n/** Number of supported Rx queues */\n#define XCP_TRANSPORT_RX_QUEUES_TYPES_NUMBER  1\n\n\n/* In this Transport Layer implementation, the memory buffer associated with a generic\n   XCP message has the following format:\n\n   --------------      +---->  --------------\n  | xcpFifoEntry | ----+      | xcpFifoEntry |\n   --------------              --------------\n  | XCP Header   |            | XCP Header   |\n   --------------              --------------\n  | XCP Packet   |            | XCP Packet   |\n   --------------              --------------\n\n  xcpFifoEntry is an internal data structure used to implement a FIFO through a single linked list\n*/\n\n\n\n/* Transmit FIFOs */\nstatic struct xcpFifo txFifo[XCP_TRANSPORT_TX_QUEUES_TYPES_NUMBER];\n\nstatic XCP_MUTEX_DEFINE(txLock);\n\n/* Receive FIFOs */\nstatic struct xcpFifo rxFifo[XCP_TRANSPORT_RX_QUEUES_TYPES_NUMBER];\n\nstatic XCP_MUTEX_DEFINE(rxLock);\n\n\n#ifdef XCP_LOCKLESS_SYNC_DATA_TRANSFER_SUPPORT\n\n#if XCP_MEM_DAQ_RESERVED_POOLS_NUMBER <= 0\n#error  \"XCP_LOCKLESS_SYNC_DATA_TRANSFER_SUPPORT requires a XCP_MEM_DAQ_RESERVED_POOLS_NUMBER value greater than 0\"\n#endif\n\nstatic struct xcpFifo daqDeferredTxFifo[XCP_MEM_DAQ_RESERVED_POOLS_NUMBER];\nstatic struct xcpFifo daqTxFifo[XCP_MEM_DAQ_RESERVED_POOLS_NUMBER];\nstatic boolean_T      daqTxRequest[XCP_MEM_DAQ_RESERVED_POOLS_NUMBER];\nstatic uint16_T       lastDaqIdTx = 0xFFFF;\n\n#endif\n\n\n/* true if the Transport Layer has been successfully initialized */\nstatic boolean_T  initialized = false;\n\n/* ID of the memory pool reserved for the allocation of\n    CTO XCP Packets */\nstatic xcpPoolId_T xcpCtoReservedMemPoolId = -1;\n\n\n#ifdef XCP_DEBUG_SUPPORT\nstatic const char *xcpTransportDiagDataString[XCP_TRANSPORT_COUNTERS_NUMBER] = {\n    \"XCP_TRANSPORT_INIT_COUNTER               \",\n    \"XCP_TRANSPORT_TX_COUNTER                 \",\n    \"XCP_TRANSPORT_TX_PACKET_SET_COUNTER      \",\n    \"XCP_TRANSPORT_RX_PACKET_GET_COUNTER      \",\n    \"XCP_TRANSPORT_RX_COUNTER                 \",\n    \"XCP_TRANSPORT_RESTART_COUNTER            \",\n    \"XCP_TRANSPORT_RESYNCH_COUNTER            \",\n    \"XCP_TRANSPORT_RESET_COUNTER              \",\n    \"XCP_TRANSPORT_MEM_INIT_ERROR             \",\n    \"XCP_TRANSPORT_MEM_RESET_ERROR            \",\n    \"XCP_TRANSPORT_FRAME_INIT_ERROR           \",\n    \"XCP_TRANSPORT_FRAME_CREATE_MSG_ERROR     \",\n    \"XCP_TRANSPORT_FRAME_SEND_ERROR           \",\n    \"XCP_TRANSPORT_FRAME_RECV_ERROR           \",\n    \"XCP_TRANSPORT_FRAME_EXTRACT_PACKET_ERROR \",\n    \"XCP_TRANSPORT_FRAME_RESTART_ERROR        \",\n    \"XCP_TRANSPORT_FRAME_RESET_ERROR          \",\n    \"XCP_TRANSPORT_TX_PACKET_IN_COUNTER       \",\n    \"XCP_TRANSPORT_TX_PACKET_OUT_COUNTER      \",\n    \"XCP_TRANSPORT_TX_PACKET_FREED_COUNTER    \",\n    \"XCP_TRANSPORT_TX_IS_EMPTY_COUNTER        \",\n    \"XCP_TRANSPORT_RX_PACKET_IN_COUNTER       \",\n    \"XCP_TRANSPORT_RX_PACKET_OUT_COUNTER      \",\n    \"XCP_TRANSPORT_RX_PACKET_FREED_COUNTER    \",\n    \"XCP_TRANSPORT_RX_IS_EMPTY_COUNTER        \"\n};\n\nstatic XcpTransportDiagnostic xcpTransportDiagnostic;\n\n\nvoid xcpTransportDiagnosticReset(void)\n{\n    XCP_MEMSET(&xcpTransportDiagnostic, 0, sizeof(xcpTransportDiagnostic));\n}\n\n\nvoid xcpTransportDiagnosticGet(XcpTransportDiagnostic *diag)\n{\n    XCP_MEMCPY(diag, &xcpTransportDiagnostic, sizeof(xcpTransportDiagnostic));\n}\n\n\nvoid xcpTransportDiagnosticPrint(const XcpTransportDiagnostic *diag)\n{\n    if (diag != NULL) {\n        int i = 0;\n        for (i = 0; i < XCP_TRANSPORT_COUNTERS_NUMBER; i++) {\n            XCP_PRINTF(\"%s = %lu\\n\", xcpTransportDiagDataString[i], (unsigned long) xcpTransportDiagnostic.data[i]);\n        }\n    }\n}\n\n#define XCP_DIAG_UPDATE(counterId)     xcpTransportDiagnostic.data[counterId]++\n\n#else\n\n#define XCP_DIAG_UPDATE(counterId) \n\n#endif\n\n/* Empty the TX FIFO by deleting the existing packets */\nstatic void xcpTransportEmptyTxFifo(void)\n{\n    struct xcpFifoEntry *msgBufferHeader = NULL;\n    uint16_T i = 0;\n\n    XCP_MUTEX_LOCK(txLock);\n\n    for (i = 0; i < XCP_TRANSPORT_TX_QUEUES_TYPES_NUMBER; i++) {\n        do {\n            xcpFifoDequeue(&txFifo[i], &msgBufferHeader);\n\n            if (msgBufferHeader != NULL) {\n                xcpMemFree(msgBufferHeader);\n                XCP_DIAG_UPDATE(XCP_TRANSPORT_TX_PACKET_FREED_COUNTER);\n            }\n        } while (msgBufferHeader != NULL);\n    }\n\n    XCP_MUTEX_UNLOCK(txLock);\n\n#ifdef XCP_LOCKLESS_SYNC_DATA_TRANSFER_SUPPORT\n    for (i = 0; i < XCP_MEM_DAQ_RESERVED_POOLS_NUMBER; i++) {\n        do {\n            xcpFifoDequeue(&daqTxFifo[i], &msgBufferHeader);\n\n            if (msgBufferHeader != NULL) {\n                xcpMemFree(msgBufferHeader);\n                XCP_DIAG_UPDATE(XCP_TRANSPORT_TX_PACKET_FREED_COUNTER);\n            }\n        } while (msgBufferHeader != NULL);\n\n        do {\n            xcpFifoDequeue(&daqDeferredTxFifo[i], &msgBufferHeader);\n\n            if (msgBufferHeader != NULL) {\n                xcpMemFree(msgBufferHeader);\n                XCP_DIAG_UPDATE(XCP_TRANSPORT_TX_PACKET_FREED_COUNTER);\n            }\n        } while (msgBufferHeader != NULL);\n\n        daqTxRequest[i] = false;\n    }\n    lastDaqIdTx = 0xFFFF;\n#endif\n}\n\n\n/* Empty the RX FIFO by deleting the existing packets */\nstatic void xcpTransportEmptyRxFifo(void)\n{\n    struct xcpFifoEntry *msgBufferHeader = NULL;\n    XcpTransportQueueType_T i = 0;\n\n    XCP_MUTEX_LOCK(rxLock);\n\n    for (i = 0; i < XCP_TRANSPORT_RX_QUEUES_TYPES_NUMBER; i++) {\n        do {\n            xcpFifoDequeue(&rxFifo[i], &msgBufferHeader);\n\n            if (msgBufferHeader != NULL) {\n                xcpMemFree(msgBufferHeader);\n                XCP_DIAG_UPDATE(XCP_TRANSPORT_RX_PACKET_FREED_COUNTER);\n            }\n        } while (msgBufferHeader != NULL);\n    }\n\n    XCP_MUTEX_UNLOCK(rxLock);\n}\n\n\nXcpErrorCode xcpTransportInit(int argc, void * argv[])\n{\n    XcpErrorCode errorCode = XCP_SUCCESS;\n    uint16_T i = 0;\n\n    XCP_ERROR_IF(initialized, XCP_ERROR, \"xcpTransportInit: transport layer already initialized\\n\");\n\n    XCP_DIAG_UPDATE(XCP_TRANSPORT_INIT_COUNTER);\n\n    /* Initialize Tx and Rx data structures*/\n    for (i = 0; i < XCP_TRANSPORT_TX_QUEUES_TYPES_NUMBER; i++) {\n        xcpFifoInit(&txFifo[i]);\n    }\n    XCP_MUTEX_INIT(txLock);\n\n#ifdef XCP_LOCKLESS_SYNC_DATA_TRANSFER_SUPPORT\n    for (i = 0; i < XCP_MEM_DAQ_RESERVED_POOLS_NUMBER; i++) {\n        xcpFifoInit(&daqTxFifo[i]);\n        xcpFifoInit(&daqDeferredTxFifo[i]);\n        daqTxRequest[i] = false;\n    }\n    lastDaqIdTx = 0xFFFF;\n#endif\n\n    for (i = 0; i < XCP_TRANSPORT_RX_QUEUES_TYPES_NUMBER; i++) {\n        xcpFifoInit(&rxFifo[i]);\n    }\n    XCP_MUTEX_INIT(rxLock);\n\n    /* Initialize XCP memory allocator */\n    errorCode = xcpMemInit();\n    if (errorCode != XCP_SUCCESS) {\n        XCP_PRINTF(\"xcpTransportInit: error (%d) detected during memory allocator initialization\\n\", errorCode);\n        XCP_DIAG_UPDATE(XCP_TRANSPORT_MEM_INIT_ERROR);\n        return errorCode;\n    }\n\n    {\n        /* Allocate the memory pool reserved for the allocation\n           of CTO, EV and SERV XCP Packets */\n        size_t maxCtoSize = xcpTransportMaxCtoSize();\n        size_t maxBufferSize = xcpTransportMsgBufferSize(maxCtoSize, XCP_CTO);\n\n        errorCode = xcpMemReservedPoolCreate(maxBufferSize, XCP_MEM_CTO_RESERVED_POOL_BLOCKS_NUMBER,\n                                             &xcpCtoReservedMemPoolId);\n\n        if (errorCode != XCP_SUCCESS) {\n            XCP_PRINTF(\"xcpTransportInit: error (%d) detected during allocation of reserved memory pool\\n\", errorCode);\n            XCP_DIAG_UPDATE(XCP_TRANSPORT_MEM_INIT_ERROR);\n            return errorCode;\n        }\n\n        xcpFrameSetCtoReservedMemPoolId(xcpCtoReservedMemPoolId);\n    }\n\n    /* Initialize XCP Frame handler */\n    errorCode = xcpFrameInit(argc, argv);\n    if (errorCode != XCP_SUCCESS) {\n        XCP_PRINTF(\"xcpTransportInit: error (%d) detected during frame handler initialization\\n\", errorCode);\n        XCP_DIAG_UPDATE(XCP_TRANSPORT_FRAME_INIT_ERROR);\n        return errorCode;\n    }\n\n    initialized = true;\n\n    return errorCode;\n}\n\n\n#ifdef XCP_LOCKLESS_SYNC_DATA_TRANSFER_SUPPORT\n\nboolean_T xcpTransportTxReady(\n    XcpTransportQueueType_T queueType, /**< [in] type of the TX queue the packet has to be sent to */\n\tuint16_T daqId                     /**< [in] id of the DAQ list the packet refers to */\n)\n{\n    boolean_T ready = true;\n    /* In the lockless implementation we enqueue data only\n       if the previous transmission has been completed */\n    if ((queueType == XCP_TRANSPORT_TX_DEFAULT_QUEUE) &&\n        (daqId <  XCP_MEM_DAQ_RESERVED_POOLS_NUMBER)) {\n        ready = !daqTxRequest[daqId];\n    }\n\n    return ready;\n}\n\n\n/** If lockless streaming is enabled, trigger the transmission of\n    packets previously enqueued (by invoking xcpTransportTxPacketSet.\n    The function returns XCP_BUSY if the TX request is already\n    in progress */\nXcpErrorCode  xcpTransportTxTrigger(\n    XcpTransportQueueType_T queueType, /**< [in] type of the TX queue the packet has to be sent to */\n    uint16_T daqId                     /**< [in] id of the DAQ list the packet refers to */\n)\n{\n    XcpErrorCode errorCode = XCP_SUCCESS;\n\n    if ((queueType != XCP_TRANSPORT_TX_DEFAULT_QUEUE) ||\n        (daqId >= XCP_MEM_DAQ_RESERVED_POOLS_NUMBER)) {\n        return XCP_INV_ARG;\n    }\n\n    if (!daqTxRequest[daqId]) {\n        if (!xcpFifoEmpty(daqDeferredTxFifo)) {\n            /* If the transmission of any packets was deferred \n               from previous run, we need to enqueue them at the\n               head of the daqTxFifo, as they need to be sent first */\n            xcpFifoSpliceHead(daqTxFifo, daqDeferredTxFifo);\n        }\n\n        XCP_MEM_BARRIER();\n        daqTxRequest[daqId] = true;\n    } else {\n        errorCode = XCP_BUSY;\n    }\n\n    return errorCode;\n}\n\n#else\n\nboolean_T xcpTransportTxReady(\n    XcpTransportQueueType_T queueType, /**< [in] type of the TX queue the packet has to be sent to */\n    uint16_T daqId                     /**< [in] id of the DAQ list the packet refers to */\n)\n{\n    XCP_UNUSED_PARAM(queueType);\n    XCP_UNUSED_PARAM(daqId);\n\n    /* In the standard (mutex-based) implementation we can always enqueue\n       new packets and therefore TX is always ready*/\n    return true;\n}\n\n\nXcpErrorCode  xcpTransportTxTrigger(\n    XcpTransportQueueType_T queueType, /**< [in] type of the TX queue the packet has to be sent to */\n    uint16_T daqId                     /**< [in] id of the DAQ list the packet refers to */\n)\n{\n    /* In the standard (mutex-based) implementation the transmission\n       is always in progress, as long as there are samples in the TX fifo.\n       For this reasons this method has no effect in this case */\n    XCP_UNUSED_PARAM(queueType);\n    XCP_UNUSED_PARAM(daqId);\n\n    return XCP_SUCCESS;\n}\n\n#endif\n\n\nXcpErrorCode xcpTransportTxPacketSet(\n    XcpTransportQueueType_T queueType, /**< [in] id of the TX queue the packet has to be sent to */\n    uint16_T daqId,       /**< [in] id of the DAQ list the packet refers to */\n    void  *msgBuffer,       /* [in] pointer to the buffer containing the full XCP message */\n    size_t msgBufferSize,   /* [in] size (in AG units) of the buffer */\n    size_t xcpPktOffset,    /* [in] offset (in AG units) where the actual XCP packet content has been copied (within xcpMsg buffer)  */\n    size_t xcpPktSize       /* [in] size (in BYTEs) of the XCP packet */\n    )\n{\n    struct xcpFifoEntry *msgBufferHeader = NULL;\n    uint8_T *msgFrame = NULL;\n    size_t msgFrameMaxSize = 0;\n    size_t msgFrameSize = 0;\n    XcpErrorCode errorCode = XCP_SUCCESS;\n#ifdef XCP_LOCKLESS_SYNC_DATA_TRANSFER_SUPPORT\n    /* Lock must be excluded for DAQ lists associated to reserved memory pools */\n    boolean_T locklessTx = ((queueType == XCP_TRANSPORT_TX_DEFAULT_QUEUE)   ||\n                            (queueType == XCP_TRANSPORT_DEFERRED_TX_QUEUE)) &&\n                            (daqId < XCP_MEM_DAQ_RESERVED_POOLS_NUMBER);\n#else\n    XCP_UNUSED_PARAM(daqId);\n#endif\n\n    /* Input parameters validation */\n    XCP_ERROR_IF((queueType != XCP_TRANSPORT_DEFERRED_TX_QUEUE) && \n                 ((queueType < 0) || (queueType >= XCP_TRANSPORT_TX_QUEUES_TYPES_NUMBER)), \n                 XCP_INV_ARG, \"xcpTransportTxPacketSet: invalid queueType\\n\");\n    XCP_ERROR_IF(msgBuffer == NULL, XCP_INV_ARG, \"xcpTransportTxPacketSet: invalid msgBuffer\\n\");\n    XCP_ERROR_IF(xcpPktOffset != xcpTransportPacketOffset(), XCP_INV_ARG, \"xcpTransportTxPacketSet: invalid packet offset\\n\");\n    XCP_ERROR_IF(xcpPktSize == 0, XCP_INV_ARG, \"xcpTransportTxPacketSet: invalid packet size\\n\");\n    XCP_ERROR_IF(msgBufferSize < (xcpPktOffset + XCP_IN_HW_AG(xcpPktSize)), XCP_INV_ARG, \"xcpTransportTxPacketSet: invalid msgBufferSize\\n\");\n    XCP_ERROR_IF(!initialized, XCP_NOT_INITIALIZED, \"xcpTransportTxPacketSet: transport layer not initialized\\n\");\n\n    XCP_DIAG_UPDATE(XCP_TRANSPORT_TX_PACKET_SET_COUNTER);\n\n    msgBufferHeader = (struct xcpFifoEntry *) msgBuffer;\n    msgFrame = (uint8_T *)msgBuffer + sizeof(struct xcpFifoEntry);\n    msgFrameMaxSize = msgBufferSize - sizeof(struct xcpFifoEntry);\n\n#ifdef XCP_LOCKLESS_SYNC_DATA_TRANSFER_SUPPORT\n    if (!locklessTx) {\n#endif\n    /* Now fill the XCP frame content \n       @note the lock is used to protect the txFifo data structures from concurrent execution */\n    XCP_MUTEX_LOCK(txLock);\n\n#ifdef XCP_LOCKLESS_SYNC_DATA_TRANSFER_SUPPORT\n    }\n#endif\n\n    errorCode = xcpFrameCreateMsg(msgFrame, msgFrameMaxSize, &msgFrameSize, xcpPktSize);\n    if (errorCode != XCP_SUCCESS) {\n        XCP_PRINTF(\"xcpTransportTxPacketSet: xcpFrameCreateMsg failure detected (%d)\\n\", errorCode);\n        XCP_DIAG_UPDATE(XCP_TRANSPORT_FRAME_CREATE_MSG_ERROR);\n        goto error;\n    }\n\n    msgBufferHeader->msgFrameSize = msgFrameSize;\n\n#ifdef XCP_LOCKLESS_SYNC_DATA_TRANSFER_SUPPORT\n    if (!locklessTx) {\n#endif\n        /* Now that the packet has been created, we can add it to the txFifo for transmission */\n        xcpFifoEnqueue(&txFifo[queueType], msgBufferHeader);\n\n#ifdef XCP_LOCKLESS_SYNC_DATA_TRANSFER_SUPPORT\n    } else {\n        if (queueType == XCP_TRANSPORT_DEFERRED_TX_QUEUE) {\n            xcpFifoEnqueue(&daqDeferredTxFifo[daqId], msgBufferHeader);\n        } else {\n         xcpFifoEnqueue(&daqTxFifo[daqId], msgBufferHeader);\n        }\n    }\n#endif\n\n    XCP_DIAG_UPDATE(XCP_TRANSPORT_TX_PACKET_IN_COUNTER);\n\nerror:\n#ifdef XCP_LOCKLESS_SYNC_DATA_TRANSFER_SUPPORT\n    if (!locklessTx) {\n#endif\n    XCP_MUTEX_UNLOCK(txLock);\n#ifdef XCP_LOCKLESS_SYNC_DATA_TRANSFER_SUPPORT\n    }\n#endif\n\n    return errorCode;\n}\n\n\nXcpErrorCode xcpTransportTx(void)\n{\n    XcpErrorCode errorCode = XCP_SUCCESS;\n    size_t msgFrameSize = 0;\n    struct xcpFifoEntry *msgBufferHeader = NULL;\n    XcpTransportQueueType_T queueType = XCP_TRANSPORT_TX_HIGHEST_PRIO_QUEUE;\n#ifdef XCP_LOCKLESS_SYNC_DATA_TRANSFER_SUPPORT\n    /* Lock must be excluded for DAQ lists associated to reserved memory pools */\n    boolean_T locklessTx = false;\n#endif\n\n    XCP_ERROR_IF(!initialized, XCP_NOT_INITIALIZED, \"xcpTransportTx: transport layer not initialized\\n\");\n\n    XCP_DIAG_UPDATE(XCP_TRANSPORT_TX_COUNTER);\n\n    XCP_MUTEX_LOCK(txLock);\n    /* Extract the message from the Fifos, starting from the highest priority */\n    xcpFifoDequeue(&txFifo[queueType], &msgBufferHeader);\n\n    XCP_MUTEX_UNLOCK(txLock);\n\n#ifdef XCP_LOCKLESS_SYNC_DATA_TRANSFER_SUPPORT\n    if (msgBufferHeader == NULL) {\n        uint16_T i = 0;\n        /* If the highest priority is empty, check if one of the DAQ-specific ones\n           has a pending request */\n        for (i = 0; (i < XCP_MEM_DAQ_RESERVED_POOLS_NUMBER) && !locklessTx; i++) {\n            lastDaqIdTx = (lastDaqIdTx + 1) %  XCP_MEM_DAQ_RESERVED_POOLS_NUMBER;\n            if (daqTxRequest[lastDaqIdTx]) {\n                xcpFifoDequeue(&daqTxFifo[lastDaqIdTx], &msgBufferHeader);\n                if (msgBufferHeader == NULL) {\n                    /* if no data are available, we can acknowledge the request\n                       straight away */\n                    daqTxRequest[lastDaqIdTx] = false;\n                } else {\n                    locklessTx = true;\n                }\n            }\n        }\n    }\n#endif\n    if (msgBufferHeader == NULL) {\n        /* If the highest priority is empty, and no DAQ packets are available\n           try the default queue */\n        XCP_MUTEX_LOCK(txLock);\n\n        queueType = XCP_TRANSPORT_TX_DEFAULT_QUEUE;\n        xcpFifoDequeue(&txFifo[queueType], &msgBufferHeader);\n        XCP_MUTEX_UNLOCK(txLock);\n    }\n\n    if (msgBufferHeader != NULL) {\n        msgFrameSize = msgBufferHeader->msgFrameSize;\n\n        /* Trying to send one XCP message via the frame handler\n           @note The frame handler will be responsible for releasing\n                 the message buffer if the data has been successfully sent\n                 (return code XCP_SUCCESS).\n                 If not, the memory area won't be freed and the message\n                 will need to go back to the FIFO. */\n        errorCode = xcpFrameMsgSend(msgBufferHeader, sizeof(struct xcpFifoEntry), msgFrameSize);\n\n        if (errorCode != XCP_SUCCESS) {\n            XCP_DIAG_UPDATE(XCP_TRANSPORT_FRAME_SEND_ERROR);\n\n#ifdef XCP_LOCKLESS_SYNC_DATA_TRANSFER_SUPPORT\n            if (!locklessTx) {\n#endif\n            XCP_MUTEX_LOCK(txLock);\n\n            xcpFifoEnqueueHead(&txFifo[queueType], msgBufferHeader);\n\n            XCP_MUTEX_UNLOCK(txLock);\n#ifdef XCP_LOCKLESS_SYNC_DATA_TRANSFER_SUPPORT\n            } else {\n                xcpFifoEnqueueHead(&daqTxFifo[lastDaqIdTx], msgBufferHeader);\n            }\n#endif\n        } else {\n            XCP_DIAG_UPDATE(XCP_TRANSPORT_TX_PACKET_OUT_COUNTER);\n\n#ifdef XCP_LOCKLESS_SYNC_DATA_TRANSFER_SUPPORT\n            if (locklessTx && xcpFifoEmpty(&daqTxFifo[lastDaqIdTx])) {\n                /* All packets in the queue have been sent,\n                   the request can be acknowledged */\n                XCP_MEM_BARRIER();\n                daqTxRequest[lastDaqIdTx] = false;\n            }\n#endif\n        }\n    } else {\n        errorCode = XCP_EMPTY;\n        XCP_DIAG_UPDATE(XCP_TRANSPORT_TX_IS_EMPTY_COUNTER);\n    }\n\n    return errorCode;\n}\n\n\nXcpErrorCode xcpTransportRx(void)\n{\n    XcpErrorCode errorCode = XCP_SUCCESS;\n    size_t msgFrameSize = 0;\n    struct xcpFifoEntry *msgBufferHeader = NULL;\n\n    XCP_ERROR_IF(!initialized, XCP_NOT_INITIALIZED, \"xcpTransportRx: transport layer not initialized\\n\");\n\n    XCP_DIAG_UPDATE(XCP_TRANSPORT_RX_COUNTER);\n\n#ifdef XCP_LOCKLESS_SYNC_DATA_TRANSFER_SUPPORT\n    /* Make sure that the blocks associated to the CTO reserved memory\n       pool are made available for subsequent allocations */\n    xcpMemReservedPoolFlushFreeMem(xcpCtoReservedMemPoolId);\n#endif\n\n    /* Trying to receive one XCP message via the frame handler\n       @note The frame handler is also responsible for allocating the\n             memory area and it is no longer responsible for the ownership\n             of the memory if the function has been successfully executed\n             (error code XCP_SUCCESS)\n             If there are no messages available, the return code is XCP_EMPTY */\n    errorCode = xcpFrameMsgRecv((void**) &msgBufferHeader, sizeof(struct xcpFifoEntry), &msgFrameSize);\n\n    if (errorCode == XCP_SUCCESS) {\n        /* Add the message to the Fifo */\n        msgBufferHeader->msgFrameSize = msgFrameSize;\n\n        XCP_MUTEX_LOCK(rxLock);\n\n        /* Only one RX queue available */\n        xcpFifoEnqueue(&rxFifo[XCP_TRANSPORT_RX_DEFAULT_QUEUE], msgBufferHeader);\n        XCP_DIAG_UPDATE(XCP_TRANSPORT_RX_PACKET_IN_COUNTER);\n\n        XCP_MUTEX_UNLOCK(rxLock);\n    } else if (errorCode == XCP_EMPTY) {\n        XCP_DIAG_UPDATE(XCP_TRANSPORT_RX_IS_EMPTY_COUNTER);\n    } else {\n        XCP_DIAG_UPDATE(XCP_TRANSPORT_FRAME_RECV_ERROR);\n    }\n\n    return errorCode;\n}\n\n\nXcpErrorCode xcpTransportRxPacketGet(\n    XcpTransportQueueType_T queueType, /**< [in] id of the RX queue the packet has to be received from */\n    void  **msgBuffer,     /* [out] pointer to the buffer containing the full XCP message that has been extracted */\n    size_t *msgBufferSize, /* [out] size (in AG units) of the buffer */\n    size_t *xcpPktOffset,  /* [out] offset (in AG units) of the XCP packet within the message buffer */\n    size_t *xcpPktSize     /* [out] size (in BYTEs) of the XCP packet */\n    )\n{\n    struct xcpFifoEntry *msgBufferHeader = NULL;\n    uint8_T *msgFrame = NULL;\n    size_t msgFrameSize = 0;\n    XcpErrorCode errorCode = XCP_SUCCESS;\n\n    /* Input parameters validation */\n    XCP_ERROR_IF((queueType < 0) || (queueType >= XCP_TRANSPORT_RX_QUEUES_TYPES_NUMBER), XCP_INV_ARG, \"xcpTransportRxPacketGet: invalid queueType\\n\");\n    XCP_ERROR_IF(msgBuffer == NULL, XCP_INV_ARG, \"xcpTransportRxPacketGet: invalid msgBuffer pointer\\n\");\n    XCP_ERROR_IF(msgBufferSize == NULL, XCP_INV_ARG, \"xcpTransportRxPacketGet: invalid msgBufferSize pointer\\n\");\n    XCP_ERROR_IF(xcpPktOffset == NULL, XCP_INV_ARG, \"xcpTransportRxPacketGet: invalid xcpPktOffset pointer\\n\");\n    XCP_ERROR_IF(xcpPktSize == NULL, XCP_INV_ARG, \"xcpTransportRxPacketGet: invalid xcpPktSize pointer\\n\");\n    XCP_ERROR_IF(!initialized, XCP_NOT_INITIALIZED, \"xcpTransportRxPacketGet: transport layer not initialized\\n\");\n\n    XCP_DIAG_UPDATE(XCP_TRANSPORT_RX_PACKET_GET_COUNTER);\n\n    XCP_MUTEX_LOCK(rxLock);\n\n    xcpFifoDequeue(&rxFifo[queueType], &msgBufferHeader);\n\n    XCP_MUTEX_UNLOCK(rxLock);\n\n    if (msgBufferHeader == NULL) {\n        return XCP_EMPTY; /* No messages in the FIFO */\n    }\n    else {\n        XCP_DIAG_UPDATE(XCP_TRANSPORT_RX_PACKET_OUT_COUNTER);\n    }\n\n    msgFrame = (uint8_T *) msgBufferHeader + sizeof(struct xcpFifoEntry);\n    msgFrameSize = msgBufferHeader->msgFrameSize;\n\n    /* Extract a new XCP packet from the XCP message, and carry out all the relevant checks in the frame format */\n    errorCode = xcpFrameExtractPacket(msgFrame, msgFrameSize, xcpPktSize);\n    if (errorCode != XCP_SUCCESS) {\n        XCP_DIAG_UPDATE(XCP_TRANSPORT_FRAME_EXTRACT_PACKET_ERROR);\n    }\n\n    *msgBuffer = msgBufferHeader;\n    *msgBufferSize = msgBufferHeader->msgFrameSize + sizeof(struct xcpFifoEntry);\n    *xcpPktOffset = xcpTransportPacketOffset();\n\n    return errorCode;\n}\n\n\nsize_t xcpTransportPacketOffset(void)\n{\n    size_t size = sizeof(struct xcpFifoEntry);\n\n    size += XCP_IN_HW_AG(xcpFrameHeaderSize());\n\n    return size;\n}\n\n/* xcpPacketSize is the number of octets in the XCP Packet\n * Return value the buffer size in terms of target memory granularity needed to contain this packet.\n * On 32-bit address granularity processor, a packet of 6 contiguous BYTEs, we require 2 memory\n *  locations to contain it.\n */\nsize_t xcpTransportMsgBufferSize(size_t xcpPacketSize, XcpPacketType pktType)\n{\n    size_t size = 0;\n    size_t maxPacketSize = 0;\n    \n    maxPacketSize = (pktType == XCP_CTO) ? xcpFrameMaxCtoSize() : xcpFrameMaxDtoSize();\n\n    if (xcpPacketSize > maxPacketSize) {\n        XCP_PRINTF(\"xcpTransportMsgSize: invalid xcpPacketSize\\n\");\n        return 0;\n    }\n\n    size = sizeof(struct xcpFifoEntry);\n\n    size += XCP_IN_HW_AG(xcpFrameHeaderSize());\n    size += XCP_IN_HW_AG(xcpPacketSize);\n    size += XCP_IN_HW_AG(xcpFrameTailSize());\n\n    return size;\n}\n\n\nsize_t xcpTransportMaxDtoSize(void)\n{\n    return xcpFrameMaxDtoSize();\n}\n\n\nsize_t xcpTransportMaxCtoSize(void)\n{\n    return xcpFrameMaxCtoSize();\n}\n\n\nXcpErrorCode xcpTransportRestart(void)\n{\n    XcpErrorCode errorCode = XCP_SUCCESS;\n\n    XCP_DIAG_UPDATE(XCP_TRANSPORT_RESTART_COUNTER);\n\n    /* Restart Frame Handler */\n    errorCode = xcpFrameRestart();\n    if (errorCode != XCP_SUCCESS) {\n        XCP_PRINTF(\"xcpTransportRestart: error (%d) detected during frame handler restart\\n\", errorCode);\n        XCP_DIAG_UPDATE(XCP_TRANSPORT_FRAME_RESTART_ERROR);\n        return errorCode;\n    }\n\n    /* Empty TX and RX fifos */\n    xcpTransportEmptyTxFifo();\n    xcpTransportEmptyRxFifo();\n\n    return errorCode;\n}\n\n\nXcpErrorCode xcpTransportResynch(void)\n{\n    XcpErrorCode errorCode = XCP_SUCCESS;\n\n    XCP_DIAG_UPDATE(XCP_TRANSPORT_RESYNCH_COUNTER);\n\n    /* Restart Frame Handler */\n    errorCode = xcpFrameRestart();\n    if (errorCode != XCP_SUCCESS) {\n        XCP_PRINTF(\"xcpTransportRestart: error (%d) detected during frame handler restart\\n\", errorCode);\n        XCP_DIAG_UPDATE(XCP_TRANSPORT_FRAME_RESTART_ERROR);\n        return errorCode;\n    }\n\n    /* Empty TX FIFO */\n    xcpTransportEmptyTxFifo();\n\n    return errorCode;\n}\n\n\nxcpPoolId_T xcpTransportCtoReservedMemPoolId(void)\n{\n    return xcpCtoReservedMemPoolId;\n}\n\n\nXcpErrorCode xcpTransportReset(void)\n{\n    XcpErrorCode errorCode = XCP_SUCCESS;\n    XcpTransportQueueType_T i = 0;\n\n    if (!initialized) {\n        XCP_PRINTF(\"xcpTransportReset: transport layer already reset\\n\");\n        return XCP_SUCCESS; /* Nothing to do: just printing out a warning message*/\n    }\n\n    XCP_DIAG_UPDATE(XCP_TRANSPORT_RESET_COUNTER);\n\n    /* Reset XCP Frame handler */\n    errorCode = xcpFrameReset();\n    if (errorCode != XCP_SUCCESS) {\n        XCP_PRINTF(\"xcpTransportReset: error (%d) detected during frame handler reset\\n\", errorCode);\n        XCP_DIAG_UPDATE(XCP_TRANSPORT_FRAME_RESET_ERROR);\n        return errorCode;\n    }\n\n    /* Before resetting the txFifo and rxFifo, all the message buffers still enqueued need to be freed\n    as the ownership of the memory area was explicitly given to the Transport Layer */\n    xcpTransportEmptyTxFifo();\n    xcpTransportEmptyRxFifo();\n\n    /* Destroy the reserved memory pool */\n    xcpMemReservedPoolDestroy(xcpCtoReservedMemPoolId);\n\n    /* Reset XCP memory allocator */\n    errorCode = xcpMemReset();\n    if (errorCode != XCP_SUCCESS) {\n        XCP_PRINTF(\"xcpTransportReset: error (%d) detected during memory allocator reset\\n\", errorCode);\n        XCP_DIAG_UPDATE(XCP_TRANSPORT_MEM_RESET_ERROR);\n        return errorCode;\n    }\n\n    /* Now we can reset Tx and Rx Fifos */\n    /* Initialize Tx and Rx data structures*/\n    for (i = 0; i < XCP_TRANSPORT_TX_QUEUES_TYPES_NUMBER; i++) {\n        xcpFifoReset(&txFifo[i]);\n    }\n    for (i = 0; i < XCP_TRANSPORT_RX_QUEUES_TYPES_NUMBER; i++) {\n        xcpFifoReset(&rxFifo[i]);\n    }\n\n#ifdef XCP_LOCKLESS_SYNC_DATA_TRANSFER_SUPPORT\n    for (i = 0; i < XCP_MEM_DAQ_RESERVED_POOLS_NUMBER; i++) {\n        xcpFifoReset(&daqTxFifo[i]);\n        xcpFifoReset(&daqDeferredTxFifo[i]);\n        daqTxRequest[i] = false;\n    }\n    lastDaqIdTx = 0xFFFF;\n#endif\n\n    initialized = false;\n\n    return errorCode;\n}\n\n\n"},{"name":"xcp_utils.c","type":"source","group":"legacy","path":"C:\\Program Files\\MATLAB\\R2023a\\toolbox\\coder\\xcp\\src\\target\\slave\\common","tag":"","groupDisplay":"Other files","code":"/* Copyright 2022 The MathWorks, Inc. */\n\n#include \"xcp_utils.h\"\n\n/**\n * Sort elements in `toSort` in ascending order, keeping the correspondence with elements of\n * `toKeepAligned`.\n **/\nvoid xcpSortArray(size_t *toSort, size_t *toKeepAligned, size_t size)\n{\n    unsigned char sorted = size == 0; /* an empty array is already sorted */\n    size_t idx = 0;\n\n    while (!sorted) {\n        sorted = 1;\n        for (idx = 0; idx < size - 1; ++idx) {\n            if (toSort[idx + 1] < toSort[idx]) {\n                size_t tempToSort = toSort[idx];\n                size_t tempToKeepAligned = toKeepAligned[idx];\n\n                sorted = 0;\n\n                toKeepAligned[idx] = toKeepAligned[idx + 1];\n                toKeepAligned[idx + 1] = tempToKeepAligned;\n\n                toSort[idx] = toSort[idx + 1];\n                toSort[idx + 1] =  tempToSort;\n            }\n        }\n    }\n}\n"}],"trace":"{\"model\":\"LabB_TuneTheGyro\",\"sources\":[\"LabB_TuneTheGyro.c\",\"LabB_TuneTheGyro.h\"],\"categoricalProps\":[\"ModelElemCategory\",\"StorageClass\"],\"categoricalValues\":[\"InternalData\",\"Default\",\"LocalParameters\"],\"sidPrefixes\":[\"LabB_TuneTheGyro\",\"C\"],\"fileRecords\":{\"0\":{\"records\":[{\"tk\":[51,3,51,19],\"els\":[\"0:\\\\Users\\\\Jasminis\\\\Documents\\\\MATLAB\\\\RASPlib\\\\blocks\\\\soMPU6050Gyro.m:2036-2084,#135\",\"0:578\"]},{\"tk\":[51,21,51,24],\"els\":[\"0:\\\\Users\\\\Jasminis\\\\Documents\\\\MATLAB\\\\RASPlib\\\\blocks\\\\soMPU6050Gyro.m:1830-1833,#135\"]},{\"tk\":[51,24,51,25],\"els\":[\"0:\\\\Users\\\\Jasminis\\\\Documents\\\\MATLAB\\\\RASPlib\\\\blocks\\\\soMPU6050Gyro.m:2036-2084,#135\",\"0:578\"]},{\"tk\":[51,25,51,26],\"els\":[\"0:\\\\Users\\\\Jasminis\\\\Documents\\\\MATLAB\\\\RASPlib\\\\blocks\\\\soMPU6050Gyro.m:2036-2084,#135\",\"0:578\"]},{\"tk\":[60,3,60,21],\"els\":[\"0:322#out:1\"]},{\"tk\":[60,22,60,41],\"els\":[\"0:322#out:1\"]},{\"tk\":[60,42,60,43],\"els\":[\"0:322#out:1\",\"0:322\"]},{\"tk\":[60,44,60,47],\"els\":[\"0:\\\\Users\\\\Jasminis\\\\Documents\\\\MATLAB\\\\RASPlib\\\\blocks\\\\soMPU6050Gyro.m:1830-1833,#135\"]},{\"tk\":[60,47,60,48],\"els\":[\"0:\\\\Users\\\\Jasminis\\\\Documents\\\\MATLAB\\\\RASPlib\\\\blocks\\\\soMPU6050Gyro.m:2218-2221,#135\",\"0:578\"]},{\"tk\":[60,48,60,49],\"els\":[\"0:\\\\Users\\\\Jasminis\\\\Documents\\\\MATLAB\\\\RASPlib\\\\blocks\\\\soMPU6050Gyro.m:2218-2221,#135\",\"0:578\"]},{\"tk\":[69,3,69,5],\"els\":[\"0:277\",\"0:556\"]},{\"tk\":[69,7,69,25],\"els\":[\"0:272\"]},{\"tk\":[69,25,69,27],\"els\":[\"0:272\"]},{\"tk\":[69,27,69,33],\"els\":[\"0:272\"]},{\"tk\":[69,33,69,34],\"els\":[\"0:272\"]},{\"tk\":[69,34,69,35],\"els\":[\"0:272\"]},{\"tk\":[69,35,69,36],\"els\":[\"0:272\"]},{\"tk\":[69,36,69,37],\"els\":[\"0:272\"]},{\"tk\":[69,37,69,38],\"els\":[\"0:272\"]},{\"tk\":[69,39,69,40],\"els\":[\"0:314:2\"]},{\"tk\":[70,7,70,25],\"els\":[\"0:314:2\",\"0:314:3\"]},{\"tk\":[70,26,70,57],\"els\":[\"0:314:2\",\"0:314:3\"]},{\"tk\":[71,5,71,15],\"els\":[\"0:277\",\"0:556\"]},{\"tk\":[71,16,71,38],\"els\":[\"0:277\",\"0:556\"]},{\"tk\":[71,39,71,68],\"els\":[\"0:277\",\"0:556\"]},{\"tk\":[190,3,190,25],\"els\":[\"0:578\"]},{\"tk\":[190,26,190,29],\"els\":[\"0:578\"]},{\"tk\":[190,30,190,52],\"els\":[\"0:578\"]},{\"tk\":[190,53,190,54],\"els\":[\"0:578\"]},{\"tk\":[190,55,190,60],\"els\":[\"0:578\"]},{\"tk\":[200,3,200,25],\"els\":[\"0:578\"]},{\"tk\":[200,26,200,29],\"els\":[\"0:578\"]},{\"tk\":[200,30,200,43],\"els\":[\"0:578\"]},{\"tk\":[200,44,200,45],\"els\":[\"0:578\"]},{\"tk\":[200,46,200,48],\"els\":[\"0:578\"]},{\"tk\":[208,3,208,19],\"els\":[\"0:\\\\Users\\\\Jasminis\\\\Documents\\\\MATLAB\\\\RASPlib\\\\blocks\\\\soMPU6050Gyro.m:1558-1603,#111\",\"0:578\"]},{\"tk\":[208,20,208,23],\"els\":[\"0:\\\\Users\\\\Jasminis\\\\Documents\\\\MATLAB\\\\RASPlib\\\\blocks\\\\soMPU6050Gyro.m:1590-1602,#111\",\"0:578\"]},{\"tk\":[209,3,209,25],\"els\":[\"0:578\"]},{\"tk\":[209,26,209,29],\"els\":[\"0:578\"]},{\"tk\":[209,30,209,45],\"els\":[\"0:578\"]},{\"tk\":[209,46,209,47],\"els\":[\"0:578\"]},{\"tk\":[209,48,209,52],\"els\":[\"0:578\"]},{\"tk\":[216,3,216,5],\"els\":[\"0:578\"]},{\"tk\":[216,7,216,8],\"els\":[\"0:578\"]},{\"tk\":[216,8,216,30],\"els\":[\"0:578\"]},{\"tk\":[216,31,216,34],\"els\":[\"0:578\"]},{\"tk\":[217,5,217,27],\"els\":[\"0:578\"]},{\"tk\":[217,28,217,31],\"els\":[\"0:578\"]},{\"tk\":[217,32,217,54],\"els\":[\"0:578\"]},{\"tk\":[217,55,217,56],\"els\":[\"0:578\"]},{\"tk\":[217,57,217,61],\"els\":[\"0:578\"]}]},\"1\":{\"records\":[{\"tk\":[80,3,80,9],\"els\":[\"1:322\"],\"ct\":{\"1\":1,\"0\":0}},{\"tk\":[80,10,80,29],\"els\":[\"1:322\"],\"ct\":{\"1\":1,\"0\":0}},{\"tk\":[80,29,80,30],\"els\":[\"1:322\"],\"ct\":{\"1\":1,\"0\":0}},{\"tk\":[85,3,85,33],\"els\":[\"1:578\"],\"ct\":{\"1\":1,\"0\":0}},{\"tk\":[85,34,85,37],\"els\":[\"1:578\"],\"ct\":{\"1\":1,\"0\":0}},{\"tk\":[85,37,85,38],\"els\":[\"1:578\"],\"ct\":{\"1\":1,\"0\":0}},{\"tk\":[86,3,86,9],\"els\":[\"1:577\"],\"ct\":{\"1\":1,\"0\":0}},{\"tk\":[86,10,86,11],\"els\":[\"1:577\"],\"ct\":{\"1\":1,\"0\":0}},{\"tk\":[87,5,87,9],\"els\":[\"1:577\"],\"ct\":{\"1\":1,\"0\":0}},{\"tk\":[87,10,87,11],\"els\":[\"1:577\"],\"ct\":{\"1\":1,\"0\":0}},{\"tk\":[87,11,87,21],\"els\":[\"1:577\"],\"ct\":{\"1\":1,\"0\":0}},{\"tk\":[87,21,87,22],\"els\":[\"1:577\"],\"ct\":{\"1\":1,\"0\":0}},{\"tk\":[88,3,88,4],\"els\":[\"1:577\"],\"ct\":{\"1\":1,\"0\":0}},{\"tk\":[88,5,88,16],\"els\":[\"1:577\"],\"ct\":{\"1\":1,\"0\":0}},{\"tk\":[88,16,88,17],\"els\":[\"1:577\"],\"ct\":{\"1\":1,\"0\":0}},{\"tk\":[90,3,90,9],\"els\":[\"1:567\"],\"ct\":{\"1\":1,\"0\":0}},{\"tk\":[90,10,90,11],\"els\":[\"1:567\"],\"ct\":{\"1\":1,\"0\":0}},{\"tk\":[91,5,91,9],\"els\":[\"1:567\"],\"ct\":{\"1\":1,\"0\":0}},{\"tk\":[91,10,91,11],\"els\":[\"1:567\"],\"ct\":{\"1\":1,\"0\":0}},{\"tk\":[91,11,91,21],\"els\":[\"1:567\"],\"ct\":{\"1\":1,\"0\":0}},{\"tk\":[91,21,91,22],\"els\":[\"1:567\"],\"ct\":{\"1\":1,\"0\":0}},{\"tk\":[92,3,92,4],\"els\":[\"1:567\"],\"ct\":{\"1\":1,\"0\":0}},{\"tk\":[92,5,92,18],\"els\":[\"1:567\"],\"ct\":{\"1\":1,\"0\":0}},{\"tk\":[92,18,92,19],\"els\":[\"1:567\"],\"ct\":{\"1\":1,\"0\":0}},{\"tk\":[94,3,94,9],\"els\":[\"1:556\"],\"ct\":{\"1\":1,\"0\":0}},{\"tk\":[94,10,94,39],\"els\":[\"1:556\"],\"ct\":{\"1\":1,\"0\":0}},{\"tk\":[94,39,94,40],\"els\":[\"1:556\"],\"ct\":{\"1\":1,\"0\":0}},{\"tk\":[99,3,99,9],\"els\":[\"1:314:3\"],\"ct\":{\"1\":1,\"0\":2}},{\"tk\":[99,10,99,41],\"els\":[\"1:314:3\"],\"ct\":{\"1\":1,\"0\":2}},{\"tk\":[99,41,99,42],\"els\":[\"1:314:3\"],\"ct\":{\"1\":1,\"0\":2}}]}}}","blocks":[{"RTWName":"<Root>/Clock","SIDString":"LabB_TuneTheGyro:272"},{"RTWName":"<Root>/Data Type\n Conversion1","SIDString":"LabB_TuneTheGyro:322"},{"RTWName":"<Root>/Gyroscope","SIDString":"LabB_TuneTheGyro:578"},{"RTWName":"<Root>/Scope","SIDString":"LabB_TuneTheGyro:577"},{"RTWName":"<Root>/Terminator","SIDString":"LabB_TuneTheGyro:569"},{"RTWName":"<Root>/Terminator1","SIDString":"LabB_TuneTheGyro:570"},{"RTWName":"<S1>/u","SIDString":"LabB_TuneTheGyro:314:1"},{"RTWName":"<S1>/Compare","SIDString":"LabB_TuneTheGyro:314:2"},{"RTWName":"<S1>/Constant","SIDString":"LabB_TuneTheGyro:314:3"},{"RTWName":"<S1>/y","SIDString":"LabB_TuneTheGyro:314:4"},{"RTWName":"<S2>/gyro bias","SIDString":"LabB_TuneTheGyro:557"},{"RTWName":"<S2>/enable the code below only when the external boolean input is true\n","SIDString":"LabB_TuneTheGyro:277"},{"RTWName":"<S2>/Scope","SIDString":"LabB_TuneTheGyro:567"},{"RTWName":"<Root>/calibrate the gyro before X seconds,\nstart controlling after X seconds","SIDString":"LabB_TuneTheGyro:314"},{"RTWName":"<Root>/measurement\nfilter","SIDString":"LabB_TuneTheGyro:556"}],"features":{"annotation":false,"coverage":true,"profiling":true,"tooltip":true,"coverageTooltip":true,"showJustificationLinks":true,"useMWTable":false,"showProfilingInfo":true,"showTaskSummary":true}};